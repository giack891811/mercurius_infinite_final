# modules/llm/azr_reasoner.py
"""
Modulo: azr_reasoner.py
Descrizione: Sistema di validazione logica del codice e dei pensieri AI secondo la logica AZR.
Utilizza analisi sintattica ed esecuzione controllata per determinare la validit√† di frammenti di codice.
"""
import ast
import traceback
from typing import Any
from utils.logger import setup_logger

logger = setup_logger(__name__)

class AZRReasoning:
    def __init__(self):
        self.log = []

    def validate_with_azr(self, code: str) -> bool:
        """
        Analizza il codice ricevuto e ne valuta la coerenza logica e l'eseguibilit√†.
        """
        self.log.append(f"üîç Validating code:\n{code}")
        logger.debug("AZR validation started")
        try:
            tree = ast.parse(code)
            self.log.append("‚úÖ AST parsing succeeded.")
            logger.debug("AZR AST ok")
        except SyntaxError as e:
            self.log.append(f"‚ùå Syntax Error: {e}")
            logger.error(f"AZR syntax error: {e}")
            return False
        try:
            compiled = compile(tree, filename="<azr_check>", mode="exec")
            test_env: dict[str, Any] = {}
            exec(compiled, test_env)
            self.log.append("‚úÖ Execution succeeded.")
            logger.debug("AZR execution ok")
            return True
        except Exception as e:
            self.log.append(f"‚ö†Ô∏è Execution Error: {traceback.format_exc()}")
            logger.error("AZR execution error")
            return False

    def last_validation_log(self) -> str:
        """Restituisce le ultime voci di log della validazione."""
        return "\n".join(self.log[-5:])

# Funzione diretta per uso esterno
def validate_with_azr(code: str) -> bool:
    azr = AZRReasoning()
    return azr.validate_with_azr(code)

# Agente AZR: utilizza AZRReasoning per analizzare task di debug/logica
class AZRAgent:
    def __init__(self):
        self.azr = AZRReasoning()

    def analyze(self, text: str, context: dict = None) -> str:
        """
        Analizza il testo (es. codice) con la logica AZR e restituisce un responso.
        """
        code_to_check = text if context is None else context.get("code", text)
        success = self.azr.validate_with_azr(code_to_check)
        if success:
            return "‚úÖ AZR: codice valido e logica consistente."
        else:
            # Include dettagli di errore nel risultato
            error_log = self.azr.last_validation_log()
            return f"‚ùå AZR: rilevate criticit√† logiche.\nLog: {error_log}"
