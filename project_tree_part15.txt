Questa è la parte 15 di project_tree. Continua da quella precedente.


    def can_respond(self, speaker: Optional[str] = None) -> bool:
        return self.authorized

    def request(self) -> str:
        return "Signore, posso rispondere?"


class MercuriusConnector:
    """Invia e riceve messaggi da Mercurius∞."""

    def __init__(self, url: str = "http://localhost:8000/ask") -> None:
        self.url = url

    def ask(self, prompt: str) -> str:
        if not requests:
            logger.error("requests non disponibile")
            return ""
        try:
            resp = requests.post(self.url, json={"prompt": prompt}, timeout=10)
            if resp.ok:
                return resp.json().get("response", "")
            return ""
        except Exception as exc:  # pragma: no cover
            logger.error("HTTP error: %s", exc)
            return ""


class JarvisResponder:
    """Risposte vocali eleganti con TTS."""

    def __init__(self) -> None:
        self.voice = None
        self._init_tts()

    def _init_tts(self) -> None:
        try:
            from voice.engine.elevenlabs_tts import ElevenLabsTTS
            self.voice = ElevenLabsTTS()
        except Exception:  # pragma: no cover
            try:
                from voice.engine.coqui_tts import CoquiTTS  # type: ignore
                self.voice = CoquiTTS()
            except Exception:
                logger.warning("Nessun motore TTS disponibile")

    def speak(self, text: str) -> None:
        if not self.voice:
            print(f"[JARVIS]: {text}")
        else:
            try:
                self.voice.synthesize(text, voice="Jarvis")  # type: ignore[attr-defined]
            except Exception as exc:  # pragma: no cover
                logger.error("TTS error: %s", exc)
                print(f"[JARVIS]: {text}")


class Note10JarvisBridge:
    """Orchestratore del bridge vocale."""

    def __init__(self) -> None:
        self.listener = VoiceListener()
        self.responder = JarvisResponder()
        self.connector = MercuriusConnector()
        self.permissions = PermissionHandler()

    def _handle_phrase(self, phrase: str) -> None:
        if not self.permissions.can_respond():
            self.responder.speak("Con tutto il rispetto, io rispondo solo al mio creatore.")
            return
        response = self.connector.ask(phrase)
        if not response:
            self.responder.speak("Attenda un istante, Signore. Sto raccogliendo i dati")
        else:
            self.responder.speak(response.strip()[:250])

    def start(self) -> None:
        self.listener.start(self._handle_phrase)
        print("🤖 Note10 Jarvis Bridge attivo. Microfono in ascolto...")
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            self.listener.stop()


def start_jarvis_loop() -> None:
    """Funzione helper per avviare il loop."""
    bridge = Note10JarvisBridge()
    bridge.start()

### --- modules/voice_bridge/activation_hook.py --- ###
from interface.genesis_bridge import GenesisBridge

class VoiceActivation:
    def __init__(self):
        self.bridge = GenesisBridge()

    def process_input(self, speech: str) -> str:
        if self.bridge.activate_from_voice(speech):
            self.bridge.trigger_activation("voce")
            return "GENESIS attivato!"
        return "Comando vocale ignorato."

### --- modules/voice_bridge/audio_interface.py --- ###
"""
Modulo: audio_interface
Descrizione: Interfaccia vocale per input STT e output TTS nel sistema Mercurius∞.
Autore: Mercurius∞ AI Engineer
"""

import os

class AudioInterface:
    def __init__(self):
        self.microphone_ready = False
        self.tts_ready = False

    def initialize(self):
        """Inizializza le risorse audio."""
        print("[AUDIO] Inizializzazione microfono e TTS...")
        self.microphone_ready = True
        self.tts_ready = True

    def listen(self):
        """Simula acquisizione audio (STT)."""
        if not self.microphone_ready:
            return "[AUDIO] Microfono non inizializzato."
        print("[AUDIO] Ascolto... (placeholder)")
        return "comando vocale simulato"

    def speak(self, text):
        """Simula output vocale (TTS)."""
        if not self.tts_ready:
            return "[AUDIO] TTS non inizializzato."
        print(f"[AUDIO] Parla: {text}")

# Esecuzione diretta
if __name__ == "__main__":
    audio = AudioInterface()
    audio.initialize()
    command = audio.listen()
    audio.speak(f"Hai detto: {command}")

### --- modules/voice_bridge/dia_model_mock.py --- ###
"""
Mock per dia.model se il pacchetto non è installabile localmente.
"""

class Dia:
    @staticmethod
    def from_pretrained(model_name: str):
        class DummyModel:
            def generate(self, text):
                import numpy as np
                return np.zeros(44100)
        return DummyModel()

### --- modules/voice_bridge/multimodal_controller.py --- ###
"""
Modulo: multimodal_controller
Descrizione: Gestione input/output multimodale vocale per Mercurius∞.
Autore: Mercurius∞ AI Engineer
"""

import time
from modules.voice_bridge.speech_to_text import WhisperSTT

# TTS avanzato (Nari Dia) + fallback
try:
    from modules.voice_bridge.nari_dia_tts import NariDiaTTS
    TTS_ENGINE = "nari"
except ImportError:
    from modules.voice_bridge.text_to_speech import TextToSpeech
    TTS_ENGINE = "pyttsx3"

class MultimodalController:
    def __init__(self):
        self.stt = WhisperSTT()
        if TTS_ENGINE == "nari":
            self.tts = NariDiaTTS()
        else:
            self.tts = TextToSpeech()

    def listen_and_respond(self, audio_file_path: str, ai_callback):
        """
        Ascolta un file audio, lo trascrive, passa il testo all'AI,
        e vocalizza la risposta.
        """
        print("🎧 Ricezione vocale in corso...")
        input_text = self.stt.transcribe(audio_file_path)
        print("🗣 Input:", input_text)

        response = ai_callback(input_text)
        print("🧠 Risposta AI:", response)

        time.sleep(0.5)  # Ottimizzazione dialogo
        self.tts.speak(response)
        return response

# Esecuzione di prova
if __name__ == "__main__":
    def mock_ai(text):
        return f"Hai detto: {text}"

    mmc = MultimodalController()
    mmc.listen_and_respond("sample_audio.wav", mock_ai)

### --- modules/voice_bridge/nari_dia_tts.py --- ###
import soundfile as sf
from modules.voice_bridge.dia_model_mock import Dia


class NariDiaTTS:
    def __init__(self, model_name="nari-labs/Dia-1.6B"):
        self.model = Dia.from_pretrained(model_name)

    def speak(self, text: str, output_path="output.wav"):
        """
        Genera audio da testo utilizzando Nari Dia.
        """
        output = self.model.generate(text)
        sf.write(output_path, output, 44100)
        # Riproduzione audio (opzionale)
        # playsound(output_path)

### --- modules/voice_bridge/pyttsx3_tts.py --- ###
# modules/voice_bridge/pyttsx3_tts.py
"""
Modulo: pyttsx3_tts.py
Descrizione: Sintesi vocale offline compatibile con qualsiasi Python (usando pyttsx3).
"""

import pyttsx3

class Pyttsx3TTS:
    def __init__(self, voice_id=None):
        self.engine = pyttsx3.init()
        if voice_id:
            self.engine.setProperty('voice', voice_id)

    def speak(self, text: str):
        self.engine.say(text)
        self.engine.runAndWait()

### --- modules/voice_bridge/speech_to_text.py --- ###
"""
Modulo: speech_to_text
Descrizione: Interfaccia vocale STT usando Whisper per Mercurius∞.
Autore: Mercurius∞ AI Engineer
"""

import whisper

class WhisperSTT:
    def __init__(self, model_name="base"):
        self.model = whisper.load_model(model_name)

    def transcribe(self, audio_path: str) -> str:
        """Esegue la trascrizione da un file audio."""
        try:
            result = self.model.transcribe(audio_path, language='it')
            return result['text']
        except Exception as e:
            return f"[STT Error] {e}"

# Test
if __name__ == "__main__":
    stt = WhisperSTT()
    testo = stt.transcribe("sample_audio.wav")
    print("Trascrizione:", testo)

### --- modules/voice_bridge/text_to_speech.py --- ###
"""Simple gTTS based TTS engine."""
from gtts import gTTS
import os
import tempfile

class TextToSpeech:
    def __init__(self, lang: str = "it"):
        self.lang = lang

    def speak(self, text: str):
        tts = gTTS(text=text, lang=self.lang)
        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as f:
            tts.save(f.name)
            os.system(f"mpg123 -q {f.name}" if os.name != "nt" else f"start {f.name}")

### --- modules/voice_bridge/tts_engine.py --- ###
# modules/voice_bridge/tts_engine.py
"""
Modulo: tts_engine.py
Descrizione: Motore TTS basato su pyttsx3 per la sintesi vocale offline.
"""
from modules.speech import TextToSpeech

class Pyttsx3TTS(TextToSpeech):
    """
    Wrapper per il motore di sintesi vocale pyttsx3 (alias di TextToSpeech).
    """
    def __init__(self, voice_id=None):
        super().__init__(voice_id=voice_id)

### --- modules/voice_bridge/voice_loop.py --- ###
"""Interactive voice loop using Whisper STT and gTTS."""
import os
from modules.voice_bridge.speech_to_text import WhisperSTT
from modules.voice_bridge.text_to_speech import TextToSpeech


def start_listening():
    stt = WhisperSTT()
    tts = TextToSpeech()
    print("[VOICE] Say 'exit' to stop. Provide path to .wav file for recognition.")
    while True:
        path = input("Audio file> ")
        if path.strip().lower() == "exit":
            break
        if not os.path.exists(path):
            print("File not found")
            continue
        text = stt.transcribe(path)
        print("[STT]", text)
        tts.speak(text)

### --- modules/voice_bridge/whisper_interface.py --- ###
"""
Modulo: whisper_interface
Descrizione: Interfaccia locale per trascrizione vocale usando Whisper (stub).
Autore: Mercurius∞ AI Engineer
"""

class WhisperSTT:
    def __init__(self):
        self.language = "it"

    def transcribe(self, audio_path: str) -> str:
        """
        Simula la trascrizione vocale di un file audio.
        In una versione reale, chiamerebbe whisper transcribe(audio_path).
        """
        print(f"[WHISPER] Trascrizione simulata del file: {audio_path}")
        return "Questo è un esempio di trascrizione da audio."

# Esempio
if __name__ == "__main__":
    stt = WhisperSTT()
    testo = stt.transcribe("demo.wav")
    print(f"Risultato: {testo}")

### --- monitoring/__init__.py --- ###


### --- monitoring/health_check.py --- ###
# monitoring/health_check.py

"""
Modulo: health_check.py
Descrizione: Endpoint di salute (liveness/readiness) per Mercurius∞ via FastAPI.
Espone:
  • GET /health → {"status": "ok", "uptime_sec": N}
  • GET /ready  → {"ready": true|false}

L'endpoint /health restituisce sempre "ok" finché il processo è in esecuzione,
mentre /ready diventa True solo se la variabile d'ambiente MERCURIUS_READY è settata a "true",
ad esempio quando l'orchestrator ha completato l'avvio completo di GENESIS_MODE.
"""

import os
from datetime import datetime

import uvicorn
from fastapi import FastAPI

app = FastAPI(title="Mercurius∞ HealthCheck")
START_TIME = datetime.utcnow()


@app.get("/health")
def health():
    """
    Liveness probe:
    Restituisce sempre {"status": "ok", "uptime_sec": N}, dove N è il numero
    di secondi trascorsi dall'avvio di questo servizio.
    """
    uptime = (datetime.utcnow() - START_TIME).seconds
    return {"status": "ok", "uptime_sec": uptime}


@app.get("/ready")
def ready():
    """
    Readiness probe:
    Verifica se la variabile d'ambiente MERCURIUS_READY è impostata a "true".
    Restituisce {"ready": true} solo in quel caso, altrimenti {"ready": false}.
    Questo consente di segnalare che l'orchestrator (o il modulo GENESIS) è completamente avviato.
    """
    ready_flag = os.getenv("MERCURIUS_READY", "false").lower() == "true"
    return {"ready": ready_flag}


if __name__ == "__main__":
    # Esegue il server FastAPI su tutte le interfacce di rete (0.0.0.0) alla porta 8080
    uvicorn.run(app, host="0.0.0.0", port=8080)

### --- monitoring/log_dashboard.py --- ###
# monitoring/log_dashboard.py

"""
Modulo: log_dashboard.py
Descrizione: Dashboard Streamlit per visualizzare in tempo reale l’Audit Log di Mercurius∞.
Espone una tabella che mostra le ultime righe di “logs/audit_log.jsonl” e si aggiorna ogni 2 secondi.
"""

import json
from pathlib import Path

import streamlit as st

# Percorso del file di log in formato JSON Lines
LOG_FILE = Path("logs/audit_log.jsonl")

# Configurazione della pagina Streamlit
st.set_page_config(layout="wide", page_title="Mercurius∞ – Audit Log Live")
st.title("🛡️ Mercurius∞ – Live Audit Log")

# Placeholder che verrà rimpiazzato con la tabella dei log
placeholder = st.empty()


def tail_log(n: int = 200):
    """
    Legge le ultime `n` righe del file di log (se presente) e le restituisce
    come lista di dizionari JSON. Se il file non esiste, ritorna lista vuota.

    :param n: numero di righe finali da leggere (default 200)
    :return: lista di oggetti (dict) corrispondenti alle righe JSON più recenti
    """
    if not LOG_FILE.exists():
        return []
    # Legge tutto il testo del file, lo divide per righe e ne restituisce le ultime n
    lines = LOG_FILE.read_text(encoding="utf-8").splitlines()[-n:]
    return [json.loads(line) for line in lines]


# Loop infinito: ogni 2 secondi aggiorna la tabella con gli ultimi log
while True:
    data = tail_log()
    placeholder.table(data)
    st.sleep(2)

### --- monitoring/metrics_exporter.py --- ###
# monitoring/metrics_exporter.py

"""
Modulo: metrics_exporter.py
Descrizione: Esporta metriche Prometheus per Mercurius∞ (HTTP 9100/metrics).
Raccoglie l’utilizzo di CPU e memoria e le espone come metriche Prometheus.

Metriche disponibili:
  • mercurius_cpu_usage_percent  → Percentuale di utilizzo CPU
  • mercurius_mem_usage_mb      → Memoria usata in MB

Il servizio HTTP di Prometheus viene avviato sulla porta 9100 all’esecuzione dello script.
Le metriche vengono aggiornate ogni 5 secondi.
"""

import time

import psutil
from prometheus_client import Gauge, start_http_server

# Creazione dei gauge Prometheus
CPU_USAGE = Gauge("mercurius_cpu_usage_percent", "CPU usage in percent")
MEM_USAGE = Gauge("mercurius_mem_usage_mb", "Memory usage in MB")


def collect_metrics():
    """
    Raccoglie le metriche di sistema:
      - CPU usage percentuale (valore 0-100)
      - Memoria usata in Megabyte (RAM utilizzata dal sistema)
    e aggiorna i corrispondenti Gauge Prometheus.
    """
    CPU_USAGE.set(psutil.cpu_percent())
    MEM_USAGE.set(psutil.virtual_memory().used / 1024 / 1024)


if __name__ == "__main__":
    # Avvia il server HTTP per Prometheus sulla porta 9100.
    # L’endpoint esposto sarà accessibile su http://<host>:9100/metrics
    start_http_server(9100)

    # Loop infinito: ogni 5 secondi raccoglie e aggiorna le metriche
    while True:
        collect_metrics()
        time.sleep(5)

### --- node_modules/.package-lock.json --- ###
{
  "name": "mercurius_infinite_final",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "node_modules/@types/react": {
      "version": "19.1.6",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-19.1.6.tgz",
      "integrity": "sha512-JeG0rEWak0N6Itr6QUx+X60uQmN+5t3j9r/OVDtWzFXKaj6kD1BwJzOksD0FF6iWxZlbE1kB0q9vtnU2ekqa1Q==",
      "license": "MIT",
      "dependencies": {
        "csstype": "^3.0.2"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "license": "MIT"
    },
    "node_modules/react": {
      "version": "19.1.0",
      "resolved": "https://registry.npmjs.org/react/-/react-19.1.0.tgz",
      "integrity": "sha512-FS+XFBNvn3GTAWq26joslQgWNoFu08F4kl0J4CgdNKADkdSGXQyTCnKteIAJy96Br6YbpEU1LSzV5dYtjMkMDg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    }
  }
}

### --- node_modules/@types/react/README.md --- ###
# Installation
> `npm install --save @types/react`

# Summary
This package contains type definitions for react (https://react.dev/).

# Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react.

### Additional Details
 * Last updated: Tue, 27 May 2025 08:02:50 GMT
 * Dependencies: [csstype](https://npmjs.com/package/csstype)

# Credits
These definitions were written by [Asana](https://asana.com), [AssureSign](http://www.assuresign.com), [Microsoft](https://microsoft.com), [John Reilly](https://github.com/johnnyreilly), [Benoit Benezech](https://github.com/bbenezech), [Patricio Zavolinsky](https://github.com/pzavolinsky), [Eric Anderson](https://github.com/ericanderson), [Dovydas Navickas](https://github.com/DovydasNavickas), [Josh Rutherford](https://github.com/theruther4d), [Guilherme Hübner](https://github.com/guilhermehubner), [Ferdy Budhidharma](https://github.com/ferdaber), [Johann Rakotoharisoa](https://github.com/jrakotoharisoa), [Olivier Pascal](https://github.com/pascaloliv), [Martin Hochel](https://github.com/hotell), [Frank Li](https://github.com/franklixuefei), [Jessica Franco](https://github.com/Jessidhia), [Saransh Kataria](https://github.com/saranshkataria), [Kanitkorn Sujautra](https://github.com/lukyth), [Sebastian Silbermann](https://github.com/eps1lon), [Kyle Scully](https://github.com/zieka), [Cong Zhang](https://github.com/dancerphil), [Dimitri Mitropoulos](https://github.com/dimitropoulos), [JongChan Choi](https://github.com/disjukr), [Victor Magalhães](https://github.com/vhfmag), [Priyanshu Rav](https://github.com/priyanshurav), [Dmitry Semigradsky](https://github.com/Semigradsky), and [Matt Pocock](https://github.com/mattpocock).

### --- node_modules/@types/react/package.json --- ###
{
    "name": "@types/react",
    "version": "19.1.6",
    "description": "TypeScript definitions for react",
    "homepage": "https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react",
    "license": "MIT",
    "contributors": [
        {
            "name": "Asana",
            "url": "https://asana.com"
        },
        {
            "name": "AssureSign",
            "url": "http://www.assuresign.com"
        },
        {
            "name": "Microsoft",
            "url": "https://microsoft.com"
        },
        {
            "name": "John Reilly",
            "githubUsername": "johnnyreilly",
            "url": "https://github.com/johnnyreilly"
        },
        {
            "name": "Benoit Benezech",
            "githubUsername": "bbenezech",
            "url": "https://github.com/bbenezech"
        },
        {
            "name": "Patricio Zavolinsky",
            "githubUsername": "pzavolinsky",
            "url": "https://github.com/pzavolinsky"
        },
        {
            "name": "Eric Anderson",
            "githubUsername": "ericanderson",
            "url": "https://github.com/ericanderson"
        },
        {
            "name": "Dovydas Navickas",
            "githubUsername": "DovydasNavickas",
            "url": "https://github.com/DovydasNavickas"
        },
        {
            "name": "Josh Rutherford",
            "githubUsername": "theruther4d",
            "url": "https://github.com/theruther4d"
        },
        {
            "name": "Guilherme Hübner",
            "githubUsername": "guilhermehubner",
            "url": "https://github.com/guilhermehubner"
        },
        {
            "name": "Ferdy Budhidharma",
            "githubUsername": "ferdaber",
            "url": "https://github.com/ferdaber"
        },
        {
            "name": "Johann Rakotoharisoa",
            "githubUsername": "jrakotoharisoa",
            "url": "https://github.com/jrakotoharisoa"
        },
        {
            "name": "Olivier Pascal",
            "githubUsername": "pascaloliv",
            "url": "https://github.com/pascaloliv"
        },
        {
            "name": "Martin Hochel",
            "githubUsername": "hotell",
            "url": "https://github.com/hotell"
        },
        {
            "name": "Frank Li",
            "githubUsername": "franklixuefei",
            "url": "https://github.com/franklixuefei"
        },
        {
            "name": "Jessica Franco",
            "githubUsername": "Jessidhia",
            "url": "https://github.com/Jessidhia"
        },
        {
            "name": "Saransh Kataria",
            "githubUsername": "saranshkataria",
            "url": "https://github.com/saranshkataria"
        },
        {
            "name": "Kanitkorn Sujautra",
            "githubUsername": "lukyth",
            "url": "https://github.com/lukyth"
        },
        {
            "name": "Sebastian Silbermann",
            "githubUsername": "eps1lon",
            "url": "https://github.com/eps1lon"
        },
        {
            "name": "Kyle Scully",
            "githubUsername": "zieka",
            "url": "https://github.com/zieka"
        },
        {
            "name": "Cong Zhang",
            "githubUsername": "dancerphil",
            "url": "https://github.com/dancerphil"
        },
        {
            "name": "Dimitri Mitropoulos",
            "githubUsername": "dimitropoulos",
            "url": "https://github.com/dimitropoulos"
        },
        {
            "name": "JongChan Choi",
            "githubUsername": "disjukr",
            "url": "https://github.com/disjukr"
        },
        {
            "name": "Victor Magalhães",
            "githubUsername": "vhfmag",
            "url": "https://github.com/vhfmag"
        },
        {
            "name": "Priyanshu Rav",
            "githubUsername": "priyanshurav",
            "url": "https://github.com/priyanshurav"
        },
        {
            "name": "Dmitry Semigradsky",
            "githubUsername": "Semigradsky",
            "url": "https://github.com/Semigradsky"
        },
        {
            "name": "Matt Pocock",
            "githubUsername": "mattpocock",
            "url": "https://github.com/mattpocock"
        }
    ],
    "main": "",
    "types": "index.d.ts",
    "typesVersions": {
        "<=5.0": {
            "*": [
                "ts5.0/*"
            ]
        }
    },
    "exports": {
        ".": {
            "types@<=5.0": {
                "default": "./ts5.0/index.d.ts"
            },
            "types": {
                "default": "./index.d.ts"
            }
        },
        "./canary": {
            "types@<=5.0": {
                "default": "./ts5.0/canary.d.ts"
            },
            "types": {
                "default": "./canary.d.ts"
            }
        },
        "./compiler-runtime": {
            "types": {
                "default": "./compiler-runtime.d.ts"
            }
        },
        "./experimental": {
            "types@<=5.0": {
                "default": "./ts5.0/experimental.d.ts"
            },
            "types": {
                "default": "./experimental.d.ts"
            }
        },
        "./jsx-runtime": {
            "types@<=5.0": {
                "default": "./ts5.0/jsx-runtime.d.ts"
            },
            "types": {
                "default": "./jsx-runtime.d.ts"
            }
        },
        "./jsx-dev-runtime": {
            "types@<=5.0": {
                "default": "./ts5.0/jsx-dev-runtime.d.ts"
            },
            "types": {
                "default": "./jsx-dev-runtime.d.ts"
            }
        },
        "./package.json": "./package.json"
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/DefinitelyTyped/DefinitelyTyped.git",
        "directory": "types/react"
    },
    "scripts": {},
    "dependencies": {
        "csstype": "^3.0.2"
    },
    "peerDependencies": {},
    "typesPublisherContentHash": "d69364f7ca8310f5e294400f1e12adb95cd625cef54bf527da66912f3b1c940e",
    "typeScriptVersion": "5.1"
}

### --- node_modules/csstype/README.md --- ###
# CSSType

[![npm](https://img.shields.io/npm/v/csstype.svg)](https://www.npmjs.com/package/csstype)

TypeScript and Flow definitions for CSS, generated by [data from MDN](https://github.com/mdn/data). It provides autocompletion and type checking for CSS properties and values.

**TypeScript**

```ts
import type * as CSS from 'csstype';

const style: CSS.Properties = {
  colour: 'white', // Type error on property
  textAlign: 'middle', // Type error on value
};
```

**Flow**

```js
// @flow strict
import * as CSS from 'csstype';

const style: CSS.Properties<> = {
  colour: 'white', // Type error on property
  textAlign: 'middle', // Type error on value
};
```

_Further examples below will be in TypeScript!_

## Getting started

```sh
$ npm install csstype
```

## Table of content

- [Style types](#style-types)
- [At-rule types](#at-rule-types)
- [Pseudo types](#pseudo-types)
- [Generics](#generics)
- [Usage](#usage)
- [What should I do when I get type errors?](#what-should-i-do-when-i-get-type-errors)
- [Version 3.0](#version-30)
- [Contributing](#contributing)

## Style types

Properties are categorized in different uses and in several technical variations to provide typings that suits as many as possible.

|                | Default              | `Hyphen`                   | `Fallback`                   | `HyphenFallback`                   |
| -------------- | -------------------- | -------------------------- | ---------------------------- | ---------------------------------- |
| **All**        | `Properties`         | `PropertiesHyphen`         | `PropertiesFallback`         | `PropertiesHyphenFallback`         |
| **`Standard`** | `StandardProperties` | `StandardPropertiesHyphen` | `StandardPropertiesFallback` | `StandardPropertiesHyphenFallback` |
| **`Vendor`**   | `VendorProperties`   | `VendorPropertiesHyphen`   | `VendorPropertiesFallback`   | `VendorPropertiesHyphenFallback`   |