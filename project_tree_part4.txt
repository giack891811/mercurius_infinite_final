              modeling_encoder_decoder.py
              modeling_flax_encoder_decoder.py
              modeling_tf_encoder_decoder.py
              __init__.py
              __pycache__/
                configuration_encoder_decoder.cpython-312.pyc
                modeling_encoder_decoder.cpython-312.pyc
                modeling_flax_encoder_decoder.cpython-312.pyc
                modeling_tf_encoder_decoder.cpython-312.pyc
                __init__.cpython-312.pyc
            ernie/
              configuration_ernie.py
              modeling_ernie.py
              __init__.py
              __pycache__/
                configuration_ernie.cpython-312.pyc
                modeling_ernie.cpython-312.pyc
                __init__.cpython-312.pyc
            esm/
              configuration_esm.py
              modeling_esm.py
              modeling_esmfold.py
              modeling_tf_esm.py
              tokenization_esm.py
              __init__.py
              openfold_utils/
                chunk_utils.py
                data_transforms.py
                feats.py
                loss.py
                protein.py
                residue_constants.py
                rigid_utils.py
                tensor_utils.py
                __init__.py
                __pycache__/
                  chunk_utils.cpython-312.pyc
                  data_transforms.cpython-312.pyc
                  feats.cpython-312.pyc
                  loss.cpython-312.pyc
                  protein.cpython-312.pyc
                  residue_constants.cpython-312.pyc
                  rigid_utils.cpython-312.pyc
                  tensor_utils.cpython-312.pyc
                  __init__.cpython-312.pyc
              __pycache__/
                configuration_esm.cpython-312.pyc
                modeling_esm.cpython-312.pyc
                modeling_esmfold.cpython-312.pyc
                modeling_tf_esm.cpython-312.pyc
                tokenization_esm.cpython-312.pyc
                __init__.cpython-312.pyc
            falcon/
              configuration_falcon.py
              modeling_falcon.py
              __init__.py
              __pycache__/
                configuration_falcon.cpython-312.pyc
                modeling_falcon.cpython-312.pyc
                __init__.cpython-312.pyc
            falcon_mamba/
              configuration_falcon_mamba.py
              modeling_falcon_mamba.py
              __init__.py
              __pycache__/
                configuration_falcon_mamba.cpython-312.pyc
                modeling_falcon_mamba.cpython-312.pyc
                __init__.cpython-312.pyc
            fastspeech2_conformer/
              configuration_fastspeech2_conformer.py
              modeling_fastspeech2_conformer.py
              tokenization_fastspeech2_conformer.py
              __init__.py
              __pycache__/
                configuration_fastspeech2_conformer.cpython-312.pyc
                modeling_fastspeech2_conformer.cpython-312.pyc
                tokenization_fastspeech2_conformer.cpython-312.pyc
                __init__.cpython-312.pyc
            flaubert/
              configuration_flaubert.py
              modeling_flaubert.py
              modeling_tf_flaubert.py
              tokenization_flaubert.py
              __init__.py
              __pycache__/
                configuration_flaubert.cpython-312.pyc
                modeling_flaubert.cpython-312.pyc
                modeling_tf_flaubert.cpython-312.pyc
                tokenization_flaubert.cpython-312.pyc
                __init__.cpython-312.pyc
            flava/
              configuration_flava.py
              feature_extraction_flava.py
              image_processing_flava.py
              image_processing_flava_fast.py
              modeling_flava.py
              processing_flava.py
              __init__.py
              __pycache__/
                configuration_flava.cpython-312.pyc
                feature_extraction_flava.cpython-312.pyc
                image_processing_flava.cpython-312.pyc
                image_processing_flava_fast.cpython-312.pyc
                modeling_flava.cpython-312.pyc
                processing_flava.cpython-312.pyc
                __init__.cpython-312.pyc
            fnet/
              configuration_fnet.py
              modeling_fnet.py
              tokenization_fnet.py
              tokenization_fnet_fast.py
              __init__.py
              __pycache__/
                configuration_fnet.cpython-312.pyc
                modeling_fnet.cpython-312.pyc
                tokenization_fnet.cpython-312.pyc
                tokenization_fnet_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            focalnet/
              configuration_focalnet.py
              modeling_focalnet.py
              __init__.py
              __pycache__/
                configuration_focalnet.cpython-312.pyc
                modeling_focalnet.cpython-312.pyc
                __init__.cpython-312.pyc
            fsmt/
              configuration_fsmt.py
              modeling_fsmt.py
              tokenization_fsmt.py
              __init__.py
              __pycache__/
                configuration_fsmt.cpython-312.pyc
                modeling_fsmt.cpython-312.pyc
                tokenization_fsmt.cpython-312.pyc
                __init__.cpython-312.pyc
            funnel/
              configuration_funnel.py
              modeling_funnel.py
              modeling_tf_funnel.py
              tokenization_funnel.py
              tokenization_funnel_fast.py
              __init__.py
              __pycache__/
                configuration_funnel.cpython-312.pyc
                modeling_funnel.cpython-312.pyc
                modeling_tf_funnel.cpython-312.pyc
                tokenization_funnel.cpython-312.pyc
                tokenization_funnel_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            fuyu/
              configuration_fuyu.py
              image_processing_fuyu.py
              modeling_fuyu.py
              processing_fuyu.py
              __init__.py
              __pycache__/
                configuration_fuyu.cpython-312.pyc
                image_processing_fuyu.cpython-312.pyc
                modeling_fuyu.cpython-312.pyc
                processing_fuyu.cpython-312.pyc
                __init__.cpython-312.pyc
            gemma/
              configuration_gemma.py
              modeling_flax_gemma.py
              modeling_gemma.py
              modular_gemma.py
              tokenization_gemma.py
              tokenization_gemma_fast.py
              __init__.py
              __pycache__/
                configuration_gemma.cpython-312.pyc
                modeling_flax_gemma.cpython-312.pyc
                modeling_gemma.cpython-312.pyc
                modular_gemma.cpython-312.pyc
                tokenization_gemma.cpython-312.pyc
                tokenization_gemma_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            gemma2/
              configuration_gemma2.py
              modeling_gemma2.py
              modular_gemma2.py
              __init__.py
              __pycache__/
                configuration_gemma2.cpython-312.pyc
                modeling_gemma2.cpython-312.pyc
                modular_gemma2.cpython-312.pyc
                __init__.cpython-312.pyc
            gemma3/
              configuration_gemma3.py
              image_processing_gemma3.py
              image_processing_gemma3_fast.py
              modeling_gemma3.py
              modular_gemma3.py
              processing_gemma3.py
              __init__.py
              __pycache__/
                configuration_gemma3.cpython-312.pyc
                image_processing_gemma3.cpython-312.pyc
                image_processing_gemma3_fast.cpython-312.pyc
                modeling_gemma3.cpython-312.pyc
                modular_gemma3.cpython-312.pyc
                processing_gemma3.cpython-312.pyc
                __init__.cpython-312.pyc
            git/
              configuration_git.py
              modeling_git.py
              processing_git.py
              __init__.py
              __pycache__/
                configuration_git.cpython-312.pyc
                modeling_git.cpython-312.pyc
                processing_git.cpython-312.pyc
                __init__.cpython-312.pyc
            glm/
              configuration_glm.py
              modeling_glm.py
              modular_glm.py
              __init__.py
              __pycache__/
                configuration_glm.cpython-312.pyc
                modeling_glm.cpython-312.pyc
                modular_glm.cpython-312.pyc
                __init__.cpython-312.pyc
            glm4/
              configuration_glm4.py
              modeling_glm4.py
              modular_glm4.py
              __init__.py
              __pycache__/
                configuration_glm4.cpython-312.pyc
                modeling_glm4.cpython-312.pyc
                modular_glm4.cpython-312.pyc
                __init__.cpython-312.pyc
            glpn/
              configuration_glpn.py
              feature_extraction_glpn.py
              image_processing_glpn.py
              modeling_glpn.py
              __init__.py
              __pycache__/
                configuration_glpn.cpython-312.pyc
                feature_extraction_glpn.cpython-312.pyc
                image_processing_glpn.cpython-312.pyc
                modeling_glpn.cpython-312.pyc
                __init__.cpython-312.pyc
            got_ocr2/
              configuration_got_ocr2.py
              image_processing_got_ocr2.py
              image_processing_got_ocr2_fast.py
              modeling_got_ocr2.py
              modular_got_ocr2.py
              processing_got_ocr2.py
              __init__.py
              __pycache__/
                configuration_got_ocr2.cpython-312.pyc
                image_processing_got_ocr2.cpython-312.pyc
                image_processing_got_ocr2_fast.cpython-312.pyc
                modeling_got_ocr2.cpython-312.pyc
                modular_got_ocr2.cpython-312.pyc
                processing_got_ocr2.cpython-312.pyc
                __init__.cpython-312.pyc
            gpt2/
              configuration_gpt2.py
              modeling_flax_gpt2.py
              modeling_gpt2.py
              modeling_tf_gpt2.py
              tokenization_gpt2.py
              tokenization_gpt2_fast.py
              tokenization_gpt2_tf.py
              __init__.py
              __pycache__/
                configuration_gpt2.cpython-312.pyc
                modeling_flax_gpt2.cpython-312.pyc
                modeling_gpt2.cpython-312.pyc
                modeling_tf_gpt2.cpython-312.pyc
                tokenization_gpt2.cpython-312.pyc
                tokenization_gpt2_fast.cpython-312.pyc
                tokenization_gpt2_tf.cpython-312.pyc
                __init__.cpython-312.pyc
            gptj/
              configuration_gptj.py
              modeling_flax_gptj.py
              modeling_gptj.py
              modeling_tf_gptj.py
              __init__.py
              __pycache__/
                configuration_gptj.cpython-312.pyc
                modeling_flax_gptj.cpython-312.pyc
                modeling_gptj.cpython-312.pyc
                modeling_tf_gptj.cpython-312.pyc
                __init__.cpython-312.pyc
            gpt_bigcode/
              configuration_gpt_bigcode.py
              modeling_gpt_bigcode.py
              __init__.py
              __pycache__/
                configuration_gpt_bigcode.cpython-312.pyc
                modeling_gpt_bigcode.cpython-312.pyc
                __init__.cpython-312.pyc
            gpt_neo/
              configuration_gpt_neo.py
              modeling_flax_gpt_neo.py
              modeling_gpt_neo.py
              __init__.py
              __pycache__/
                configuration_gpt_neo.cpython-312.pyc
                modeling_flax_gpt_neo.cpython-312.pyc
                modeling_gpt_neo.cpython-312.pyc
                __init__.cpython-312.pyc
            gpt_neox/
              configuration_gpt_neox.py
              modeling_gpt_neox.py
              modular_gpt_neox.py
              tokenization_gpt_neox_fast.py
              __init__.py
              __pycache__/
                configuration_gpt_neox.cpython-312.pyc
                modeling_gpt_neox.cpython-312.pyc
                modular_gpt_neox.cpython-312.pyc
                tokenization_gpt_neox_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            gpt_neox_japanese/
              configuration_gpt_neox_japanese.py
              modeling_gpt_neox_japanese.py
              tokenization_gpt_neox_japanese.py
              __init__.py
              __pycache__/
                configuration_gpt_neox_japanese.cpython-312.pyc
                modeling_gpt_neox_japanese.cpython-312.pyc
                tokenization_gpt_neox_japanese.cpython-312.pyc
                __init__.cpython-312.pyc
            gpt_sw3/
              tokenization_gpt_sw3.py
              __init__.py
              __pycache__/
                tokenization_gpt_sw3.cpython-312.pyc
                __init__.cpython-312.pyc
            granite/
              configuration_granite.py
              modeling_granite.py
              modular_granite.py
              __init__.py
              __pycache__/
                configuration_granite.cpython-312.pyc
                modeling_granite.cpython-312.pyc
                modular_granite.cpython-312.pyc
                __init__.cpython-312.pyc
            granitemoe/
              configuration_granitemoe.py
              modeling_granitemoe.py
              __init__.py
              __pycache__/
                configuration_granitemoe.cpython-312.pyc
                modeling_granitemoe.cpython-312.pyc
                __init__.cpython-312.pyc
            granitemoehybrid/
              configuration_granitemoehybrid.py
              modeling_granitemoehybrid.py
              modular_granitemoehybrid.py
              __init__.py
              __pycache__/
                configuration_granitemoehybrid.cpython-312.pyc
                modeling_granitemoehybrid.cpython-312.pyc
                modular_granitemoehybrid.cpython-312.pyc
                __init__.cpython-312.pyc
            granitemoeshared/
              configuration_granitemoeshared.py
              modeling_granitemoeshared.py
              modular_granitemoeshared.py
              __init__.py
              __pycache__/
                configuration_granitemoeshared.cpython-312.pyc
                modeling_granitemoeshared.cpython-312.pyc
                modular_granitemoeshared.cpython-312.pyc
                __init__.cpython-312.pyc
            granite_speech/
              configuration_granite_speech.py
              feature_extraction_granite_speech.py
              modeling_granite_speech.py
              processing_granite_speech.py
              __init__.py
              __pycache__/
                configuration_granite_speech.cpython-312.pyc
                feature_extraction_granite_speech.cpython-312.pyc
                modeling_granite_speech.cpython-312.pyc
                processing_granite_speech.cpython-312.pyc
                __init__.cpython-312.pyc
            grounding_dino/
              configuration_grounding_dino.py
              image_processing_grounding_dino.py
              image_processing_grounding_dino_fast.py
              modeling_grounding_dino.py
              modular_grounding_dino.py
              processing_grounding_dino.py
              __init__.py
              __pycache__/
                configuration_grounding_dino.cpython-312.pyc
                image_processing_grounding_dino.cpython-312.pyc
                image_processing_grounding_dino_fast.cpython-312.pyc
                modeling_grounding_dino.cpython-312.pyc
                modular_grounding_dino.cpython-312.pyc
                processing_grounding_dino.cpython-312.pyc
                __init__.cpython-312.pyc
            groupvit/
              configuration_groupvit.py
              modeling_groupvit.py
              modeling_tf_groupvit.py
              __init__.py
              __pycache__/
                configuration_groupvit.cpython-312.pyc
                modeling_groupvit.cpython-312.pyc
                modeling_tf_groupvit.cpython-312.pyc
                __init__.cpython-312.pyc
            helium/
              configuration_helium.py
              modeling_helium.py
              modular_helium.py
              __init__.py
              __pycache__/
                configuration_helium.cpython-312.pyc
                modeling_helium.cpython-312.pyc
                modular_helium.cpython-312.pyc
                __init__.cpython-312.pyc
            herbert/
              tokenization_herbert.py
              tokenization_herbert_fast.py
              __init__.py
              __pycache__/
                tokenization_herbert.cpython-312.pyc
                tokenization_herbert_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            hgnet_v2/
              configuration_hgnet_v2.py
              modeling_hgnet_v2.py
              modular_hgnet_v2.py
              __init__.py
              __pycache__/
                configuration_hgnet_v2.cpython-312.pyc
                modeling_hgnet_v2.cpython-312.pyc
                modular_hgnet_v2.cpython-312.pyc
                __init__.cpython-312.pyc
            hiera/
              configuration_hiera.py
              modeling_hiera.py
              __init__.py
              __pycache__/
                configuration_hiera.cpython-312.pyc
                modeling_hiera.cpython-312.pyc
                __init__.cpython-312.pyc
            hubert/
              configuration_hubert.py
              modeling_hubert.py
              modeling_tf_hubert.py
              modular_hubert.py
              __init__.py
              __pycache__/
                configuration_hubert.cpython-312.pyc
                modeling_hubert.cpython-312.pyc
                modeling_tf_hubert.cpython-312.pyc
                modular_hubert.cpython-312.pyc
                __init__.cpython-312.pyc
            ibert/
              configuration_ibert.py
              modeling_ibert.py
              quant_modules.py
              __init__.py
              __pycache__/
                configuration_ibert.cpython-312.pyc
                modeling_ibert.cpython-312.pyc
                quant_modules.cpython-312.pyc
                __init__.cpython-312.pyc
            idefics/
              configuration_idefics.py
              image_processing_idefics.py
              modeling_idefics.py
              modeling_tf_idefics.py
              perceiver.py
              perceiver_tf.py
              processing_idefics.py
              vision.py
              vision_tf.py
              __init__.py
              __pycache__/
                configuration_idefics.cpython-312.pyc
                image_processing_idefics.cpython-312.pyc
                modeling_idefics.cpython-312.pyc
                modeling_tf_idefics.cpython-312.pyc
                perceiver.cpython-312.pyc
                perceiver_tf.cpython-312.pyc
                processing_idefics.cpython-312.pyc
                vision.cpython-312.pyc
                vision_tf.cpython-312.pyc
                __init__.cpython-312.pyc
            idefics2/
              configuration_idefics2.py
              image_processing_idefics2.py
              modeling_idefics2.py
              processing_idefics2.py
              __init__.py
              __pycache__/
                configuration_idefics2.cpython-312.pyc
                image_processing_idefics2.cpython-312.pyc
                modeling_idefics2.cpython-312.pyc
                processing_idefics2.cpython-312.pyc
                __init__.cpython-312.pyc
            idefics3/
              configuration_idefics3.py
              image_processing_idefics3.py
              modeling_idefics3.py
              processing_idefics3.py
              __init__.py
              __pycache__/
                configuration_idefics3.cpython-312.pyc
                image_processing_idefics3.cpython-312.pyc
                modeling_idefics3.cpython-312.pyc
                processing_idefics3.cpython-312.pyc
                __init__.cpython-312.pyc
            ijepa/
              configuration_ijepa.py
              modeling_ijepa.py
              modular_ijepa.py
              __init__.py
              __pycache__/
                configuration_ijepa.cpython-312.pyc
                modeling_ijepa.cpython-312.pyc
                modular_ijepa.cpython-312.pyc
                __init__.cpython-312.pyc
            imagegpt/
              configuration_imagegpt.py
              feature_extraction_imagegpt.py
              image_processing_imagegpt.py
              modeling_imagegpt.py
              __init__.py
              __pycache__/
                configuration_imagegpt.cpython-312.pyc
                feature_extraction_imagegpt.cpython-312.pyc
                image_processing_imagegpt.cpython-312.pyc
                modeling_imagegpt.cpython-312.pyc
                __init__.cpython-312.pyc
            informer/
              configuration_informer.py
              modeling_informer.py
              __init__.py
              __pycache__/
                configuration_informer.cpython-312.pyc
                modeling_informer.cpython-312.pyc
                __init__.cpython-312.pyc
            instructblip/
              configuration_instructblip.py
              modeling_instructblip.py
              processing_instructblip.py
              __init__.py
              __pycache__/
                configuration_instructblip.cpython-312.pyc
                modeling_instructblip.cpython-312.pyc
                processing_instructblip.cpython-312.pyc
                __init__.cpython-312.pyc
            instructblipvideo/
              configuration_instructblipvideo.py
              image_processing_instructblipvideo.py
              modeling_instructblipvideo.py
              modular_instructblipvideo.py
              processing_instructblipvideo.py
              video_processing_instructblipvideo.py
              __init__.py
              __pycache__/
                configuration_instructblipvideo.cpython-312.pyc
                image_processing_instructblipvideo.cpython-312.pyc
                modeling_instructblipvideo.cpython-312.pyc
                modular_instructblipvideo.cpython-312.pyc
                processing_instructblipvideo.cpython-312.pyc
                video_processing_instructblipvideo.cpython-312.pyc
                __init__.cpython-312.pyc
            internvl/
              configuration_internvl.py
              modeling_internvl.py
              modular_internvl.py
              processing_internvl.py
              video_processing_internvl.py
              __init__.py
              __pycache__/
                configuration_internvl.cpython-312.pyc
                modeling_internvl.cpython-312.pyc
                modular_internvl.cpython-312.pyc
                processing_internvl.cpython-312.pyc
                video_processing_internvl.cpython-312.pyc
                __init__.cpython-312.pyc
            jamba/
              configuration_jamba.py
              modeling_jamba.py
              __init__.py
              __pycache__/
                configuration_jamba.cpython-312.pyc
                modeling_jamba.cpython-312.pyc
                __init__.cpython-312.pyc
            janus/
              configuration_janus.py
              image_processing_janus.py
              modeling_janus.py
              modular_janus.py
              processing_janus.py
              __init__.py
              __pycache__/
                configuration_janus.cpython-312.pyc
                image_processing_janus.cpython-312.pyc
                modeling_janus.cpython-312.pyc
                modular_janus.cpython-312.pyc
                processing_janus.cpython-312.pyc
                __init__.cpython-312.pyc
            jetmoe/
              configuration_jetmoe.py
              modeling_jetmoe.py
              __init__.py
              __pycache__/
                configuration_jetmoe.cpython-312.pyc
                modeling_jetmoe.cpython-312.pyc
                __init__.cpython-312.pyc
            kosmos2/
              configuration_kosmos2.py
              modeling_kosmos2.py
              processing_kosmos2.py
              __init__.py
              __pycache__/
                configuration_kosmos2.cpython-312.pyc
                modeling_kosmos2.cpython-312.pyc
                processing_kosmos2.cpython-312.pyc
                __init__.cpython-312.pyc
            layoutlm/
              configuration_layoutlm.py
              modeling_layoutlm.py
              modeling_tf_layoutlm.py
              tokenization_layoutlm.py
              tokenization_layoutlm_fast.py
              __init__.py
              __pycache__/
                configuration_layoutlm.cpython-312.pyc
                modeling_layoutlm.cpython-312.pyc
                modeling_tf_layoutlm.cpython-312.pyc
                tokenization_layoutlm.cpython-312.pyc
                tokenization_layoutlm_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            layoutlmv2/
              configuration_layoutlmv2.py
              feature_extraction_layoutlmv2.py
              image_processing_layoutlmv2.py
              image_processing_layoutlmv2_fast.py
              modeling_layoutlmv2.py
              processing_layoutlmv2.py
              tokenization_layoutlmv2.py
              tokenization_layoutlmv2_fast.py
              __init__.py
              __pycache__/
                configuration_layoutlmv2.cpython-312.pyc
                feature_extraction_layoutlmv2.cpython-312.pyc
                image_processing_layoutlmv2.cpython-312.pyc
                image_processing_layoutlmv2_fast.cpython-312.pyc
                modeling_layoutlmv2.cpython-312.pyc
                processing_layoutlmv2.cpython-312.pyc
                tokenization_layoutlmv2.cpython-312.pyc
                tokenization_layoutlmv2_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            layoutlmv3/
              configuration_layoutlmv3.py
              feature_extraction_layoutlmv3.py
              image_processing_layoutlmv3.py
              image_processing_layoutlmv3_fast.py
              modeling_layoutlmv3.py
              modeling_tf_layoutlmv3.py
              processing_layoutlmv3.py
              tokenization_layoutlmv3.py
              tokenization_layoutlmv3_fast.py
              __init__.py
              __pycache__/
                configuration_layoutlmv3.cpython-312.pyc
                feature_extraction_layoutlmv3.cpython-312.pyc
                image_processing_layoutlmv3.cpython-312.pyc
                image_processing_layoutlmv3_fast.cpython-312.pyc
                modeling_layoutlmv3.cpython-312.pyc
                modeling_tf_layoutlmv3.cpython-312.pyc
                processing_layoutlmv3.cpython-312.pyc
                tokenization_layoutlmv3.cpython-312.pyc
                tokenization_layoutlmv3_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            layoutxlm/
              processing_layoutxlm.py
              tokenization_layoutxlm.py
              tokenization_layoutxlm_fast.py
              __init__.py
              __pycache__/
                processing_layoutxlm.cpython-312.pyc
                tokenization_layoutxlm.cpython-312.pyc
                tokenization_layoutxlm_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            led/
              configuration_led.py
              modeling_led.py
              modeling_tf_led.py
              tokenization_led.py
              tokenization_led_fast.py
              __init__.py
              __pycache__/
                configuration_led.cpython-312.pyc
                modeling_led.cpython-312.pyc
                modeling_tf_led.cpython-312.pyc
                tokenization_led.cpython-312.pyc
                tokenization_led_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            levit/
              configuration_levit.py
              feature_extraction_levit.py
              image_processing_levit.py
              image_processing_levit_fast.py
              modeling_levit.py
              __init__.py
              __pycache__/
                configuration_levit.cpython-312.pyc
                feature_extraction_levit.cpython-312.pyc
                image_processing_levit.cpython-312.pyc
                image_processing_levit_fast.cpython-312.pyc
                modeling_levit.cpython-312.pyc
                __init__.cpython-312.pyc
            lilt/
              configuration_lilt.py
              modeling_lilt.py
              __init__.py
              __pycache__/
                configuration_lilt.cpython-312.pyc
                modeling_lilt.cpython-312.pyc
                __init__.cpython-312.pyc
            llama/
              configuration_llama.py
              modeling_flax_llama.py
              modeling_llama.py
              tokenization_llama.py
              tokenization_llama_fast.py
              __init__.py
              __pycache__/
                configuration_llama.cpython-312.pyc
                modeling_flax_llama.cpython-312.pyc
                modeling_llama.cpython-312.pyc
                tokenization_llama.cpython-312.pyc
                tokenization_llama_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            llama4/
              configuration_llama4.py
              image_processing_llama4_fast.py
              modeling_llama4.py
              processing_llama4.py
              __init__.py
              __pycache__/
                configuration_llama4.cpython-312.pyc
                image_processing_llama4_fast.cpython-312.pyc
                modeling_llama4.cpython-312.pyc
                processing_llama4.cpython-312.pyc
                __init__.cpython-312.pyc
            llava/
              configuration_llava.py
              image_processing_llava.py
              image_processing_llava_fast.py
              modeling_llava.py
              processing_llava.py
              __init__.py
              __pycache__/
                configuration_llava.cpython-312.pyc
                image_processing_llava.cpython-312.pyc
                image_processing_llava_fast.cpython-312.pyc
                modeling_llava.cpython-312.pyc
                processing_llava.cpython-312.pyc
                __init__.cpython-312.pyc
            llava_next/
              configuration_llava_next.py
              image_processing_llava_next.py
              image_processing_llava_next_fast.py
              modeling_llava_next.py
              processing_llava_next.py
              __init__.py
              __pycache__/
                configuration_llava_next.cpython-312.pyc
                image_processing_llava_next.cpython-312.pyc
                image_processing_llava_next_fast.cpython-312.pyc
                modeling_llava_next.cpython-312.pyc
                processing_llava_next.cpython-312.pyc
                __init__.cpython-312.pyc
            llava_next_video/
              configuration_llava_next_video.py
              image_processing_llava_next_video.py
              modeling_llava_next_video.py
              modular_llava_next_video.py
              processing_llava_next_video.py
              video_processing_llava_next_video.py
              __init__.py
              __pycache__/
                configuration_llava_next_video.cpython-312.pyc
                image_processing_llava_next_video.cpython-312.pyc
                modeling_llava_next_video.cpython-312.pyc
                modular_llava_next_video.cpython-312.pyc
                processing_llava_next_video.cpython-312.pyc
                video_processing_llava_next_video.cpython-312.pyc
                __init__.cpython-312.pyc
            llava_onevision/
              configuration_llava_onevision.py
              image_processing_llava_onevision.py
              image_processing_llava_onevision_fast.py
              modeling_llava_onevision.py
              modular_llava_onevision.py
              processing_llava_onevision.py
              video_processing_llava_onevision.py
              __init__.py
              __pycache__/
                configuration_llava_onevision.cpython-312.pyc
                image_processing_llava_onevision.cpython-312.pyc
                image_processing_llava_onevision_fast.cpython-312.pyc
                modeling_llava_onevision.cpython-312.pyc
                modular_llava_onevision.cpython-312.pyc
                processing_llava_onevision.cpython-312.pyc
                video_processing_llava_onevision.cpython-312.pyc
                __init__.cpython-312.pyc
            longformer/
              configuration_longformer.py
              modeling_longformer.py
              modeling_tf_longformer.py
              tokenization_longformer.py
              tokenization_longformer_fast.py
              __init__.py
              __pycache__/
                configuration_longformer.cpython-312.pyc
                modeling_longformer.cpython-312.pyc
                modeling_tf_longformer.cpython-312.pyc
                tokenization_longformer.cpython-312.pyc
                tokenization_longformer_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            longt5/
              configuration_longt5.py
              modeling_flax_longt5.py
              modeling_longt5.py
              __init__.py
              __pycache__/
                configuration_longt5.cpython-312.pyc
                modeling_flax_longt5.cpython-312.pyc
                modeling_longt5.cpython-312.pyc
                __init__.cpython-312.pyc
            luke/
              configuration_luke.py
              modeling_luke.py
              tokenization_luke.py
              __init__.py
              __pycache__/
                configuration_luke.cpython-312.pyc
                modeling_luke.cpython-312.pyc
                tokenization_luke.cpython-312.pyc
                __init__.cpython-312.pyc
            lxmert/
              configuration_lxmert.py
              modeling_lxmert.py
              modeling_tf_lxmert.py
              tokenization_lxmert.py
              tokenization_lxmert_fast.py
              __init__.py
              __pycache__/
                configuration_lxmert.cpython-312.pyc
                modeling_lxmert.cpython-312.pyc
                modeling_tf_lxmert.cpython-312.pyc
                tokenization_lxmert.cpython-312.pyc
                tokenization_lxmert_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            m2m_100/
              configuration_m2m_100.py
              modeling_m2m_100.py
              tokenization_m2m_100.py
              __init__.py
              __pycache__/
                configuration_m2m_100.cpython-312.pyc
                modeling_m2m_100.cpython-312.pyc
                tokenization_m2m_100.cpython-312.pyc
                __init__.cpython-312.pyc
            mamba/
              configuration_mamba.py
              modeling_mamba.py
              __init__.py
              __pycache__/
                configuration_mamba.cpython-312.pyc
                modeling_mamba.cpython-312.pyc
                __init__.cpython-312.pyc
            mamba2/
              configuration_mamba2.py
              modeling_mamba2.py
              __init__.py
              __pycache__/
                configuration_mamba2.cpython-312.pyc
                modeling_mamba2.cpython-312.pyc
                __init__.cpython-312.pyc
            marian/
              configuration_marian.py
              modeling_flax_marian.py
              modeling_marian.py
              modeling_tf_marian.py
              tokenization_marian.py
              __init__.py
              __pycache__/
                configuration_marian.cpython-312.pyc
                modeling_flax_marian.cpython-312.pyc
                modeling_marian.cpython-312.pyc
                modeling_tf_marian.cpython-312.pyc
                tokenization_marian.cpython-312.pyc
                __init__.cpython-312.pyc
            markuplm/
              configuration_markuplm.py
              feature_extraction_markuplm.py
              modeling_markuplm.py
              processing_markuplm.py
              tokenization_markuplm.py
              tokenization_markuplm_fast.py
              __init__.py
              __pycache__/
                configuration_markuplm.cpython-312.pyc
                feature_extraction_markuplm.cpython-312.pyc
                modeling_markuplm.cpython-312.pyc
                processing_markuplm.cpython-312.pyc
                tokenization_markuplm.cpython-312.pyc
                tokenization_markuplm_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            mask2former/
              configuration_mask2former.py
              image_processing_mask2former.py
              modeling_mask2former.py
              __init__.py
              __pycache__/
                configuration_mask2former.cpython-312.pyc
                image_processing_mask2former.cpython-312.pyc
                modeling_mask2former.cpython-312.pyc
                __init__.cpython-312.pyc
            maskformer/
              configuration_maskformer.py
              configuration_maskformer_swin.py
              feature_extraction_maskformer.py
              image_processing_maskformer.py
              modeling_maskformer.py
              modeling_maskformer_swin.py
              __init__.py
              __pycache__/
                configuration_maskformer.cpython-312.pyc
                configuration_maskformer_swin.cpython-312.pyc
                feature_extraction_maskformer.cpython-312.pyc
                image_processing_maskformer.cpython-312.pyc
                modeling_maskformer.cpython-312.pyc
                modeling_maskformer_swin.cpython-312.pyc
                __init__.cpython-312.pyc
            mbart/
              configuration_mbart.py
              modeling_flax_mbart.py
              modeling_mbart.py
              modeling_tf_mbart.py
              tokenization_mbart.py
              tokenization_mbart_fast.py
              __init__.py
              __pycache__/
                configuration_mbart.cpython-312.pyc
                modeling_flax_mbart.cpython-312.pyc
                modeling_mbart.cpython-312.pyc
                modeling_tf_mbart.cpython-312.pyc
                tokenization_mbart.cpython-312.pyc
                tokenization_mbart_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            mbart50/
              tokenization_mbart50.py
              tokenization_mbart50_fast.py
              __init__.py
              __pycache__/
                tokenization_mbart50.cpython-312.pyc
                tokenization_mbart50_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            megatron_bert/
              configuration_megatron_bert.py
              modeling_megatron_bert.py
              __init__.py
              __pycache__/
                configuration_megatron_bert.cpython-312.pyc
                modeling_megatron_bert.cpython-312.pyc
                __init__.cpython-312.pyc
            megatron_gpt2/
              checkpoint_reshaping_and_interoperability.py
              __init__.py
              __pycache__/
                checkpoint_reshaping_and_interoperability.cpython-312.pyc
                __init__.cpython-312.pyc
            mgp_str/
              configuration_mgp_str.py
              modeling_mgp_str.py
              processing_mgp_str.py
              tokenization_mgp_str.py
              __init__.py
              __pycache__/
                configuration_mgp_str.cpython-312.pyc
                modeling_mgp_str.cpython-312.pyc
                processing_mgp_str.cpython-312.pyc
                tokenization_mgp_str.cpython-312.pyc
                __init__.cpython-312.pyc
            mimi/
              configuration_mimi.py
              modeling_mimi.py
              __init__.py
              __pycache__/
                configuration_mimi.cpython-312.pyc
                modeling_mimi.cpython-312.pyc
                __init__.cpython-312.pyc
            mistral/
              configuration_mistral.py
              modeling_flax_mistral.py
              modeling_mistral.py
              modeling_tf_mistral.py
              modular_mistral.py
              __init__.py
              __pycache__/
                configuration_mistral.cpython-312.pyc
                modeling_flax_mistral.cpython-312.pyc
                modeling_mistral.cpython-312.pyc
                modeling_tf_mistral.cpython-312.pyc
                modular_mistral.cpython-312.pyc
                __init__.cpython-312.pyc
            mistral3/
              configuration_mistral3.py
              modeling_mistral3.py
              modular_mistral3.py
              __init__.py
              __pycache__/
                configuration_mistral3.cpython-312.pyc
                modeling_mistral3.cpython-312.pyc
                modular_mistral3.cpython-312.pyc
                __init__.cpython-312.pyc
            mixtral/
              configuration_mixtral.py
              modeling_mixtral.py
              modular_mixtral.py
              __init__.py
              __pycache__/
                configuration_mixtral.cpython-312.pyc
                modeling_mixtral.cpython-312.pyc
                modular_mixtral.cpython-312.pyc
                __init__.cpython-312.pyc
            mlcd/
              configuration_mlcd.py
              modeling_mlcd.py
              modular_mlcd.py
              __init__.py
              __pycache__/
                configuration_mlcd.cpython-312.pyc
                modeling_mlcd.cpython-312.pyc
                modular_mlcd.cpython-312.pyc
                __init__.cpython-312.pyc
            mllama/
              configuration_mllama.py
              image_processing_mllama.py
              modeling_mllama.py
              processing_mllama.py
              __init__.py
              __pycache__/
                configuration_mllama.cpython-312.pyc
                image_processing_mllama.cpython-312.pyc
                modeling_mllama.cpython-312.pyc
                processing_mllama.cpython-312.pyc
                __init__.cpython-312.pyc
            mluke/
              tokenization_mluke.py
              __init__.py
              __pycache__/
                tokenization_mluke.cpython-312.pyc
                __init__.cpython-312.pyc
            mobilebert/
              configuration_mobilebert.py
              modeling_mobilebert.py
              modeling_tf_mobilebert.py
              tokenization_mobilebert.py
              tokenization_mobilebert_fast.py
              __init__.py
              __pycache__/
                configuration_mobilebert.cpython-312.pyc
                modeling_mobilebert.cpython-312.pyc
                modeling_tf_mobilebert.cpython-312.pyc
                tokenization_mobilebert.cpython-312.pyc
                tokenization_mobilebert_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            mobilenet_v1/
              configuration_mobilenet_v1.py
              feature_extraction_mobilenet_v1.py
              image_processing_mobilenet_v1.py
              image_processing_mobilenet_v1_fast.py
              modeling_mobilenet_v1.py
              __init__.py
              __pycache__/
                configuration_mobilenet_v1.cpython-312.pyc
                feature_extraction_mobilenet_v1.cpython-312.pyc
                image_processing_mobilenet_v1.cpython-312.pyc
                image_processing_mobilenet_v1_fast.cpython-312.pyc
                modeling_mobilenet_v1.cpython-312.pyc
                __init__.cpython-312.pyc
            mobilenet_v2/
              configuration_mobilenet_v2.py
              feature_extraction_mobilenet_v2.py
              image_processing_mobilenet_v2.py
              image_processing_mobilenet_v2_fast.py
              modeling_mobilenet_v2.py
              __init__.py
              __pycache__/
                configuration_mobilenet_v2.cpython-312.pyc
                feature_extraction_mobilenet_v2.cpython-312.pyc
                image_processing_mobilenet_v2.cpython-312.pyc
                image_processing_mobilenet_v2_fast.cpython-312.pyc
                modeling_mobilenet_v2.cpython-312.pyc
                __init__.cpython-312.pyc
            mobilevit/
              configuration_mobilevit.py
              feature_extraction_mobilevit.py
              image_processing_mobilevit.py
              modeling_mobilevit.py
              modeling_tf_mobilevit.py
              __init__.py
              __pycache__/
                configuration_mobilevit.cpython-312.pyc
                feature_extraction_mobilevit.cpython-312.pyc
                image_processing_mobilevit.cpython-312.pyc
                modeling_mobilevit.cpython-312.pyc
                modeling_tf_mobilevit.cpython-312.pyc
                __init__.cpython-312.pyc
            mobilevitv2/
              configuration_mobilevitv2.py
              modeling_mobilevitv2.py
              __init__.py
              __pycache__/
                configuration_mobilevitv2.cpython-312.pyc
                modeling_mobilevitv2.cpython-312.pyc
                __init__.cpython-312.pyc
            modernbert/
              configuration_modernbert.py
              modeling_modernbert.py
              modular_modernbert.py
              __init__.py
              __pycache__/
                configuration_modernbert.cpython-312.pyc
                modeling_modernbert.cpython-312.pyc
                modular_modernbert.cpython-312.pyc
                __init__.cpython-312.pyc
            moonshine/
              configuration_moonshine.py
              modeling_moonshine.py
              modular_moonshine.py
              __init__.py
              __pycache__/
                configuration_moonshine.cpython-312.pyc
                modeling_moonshine.cpython-312.pyc
                modular_moonshine.cpython-312.pyc
                __init__.cpython-312.pyc
            moshi/
              configuration_moshi.py
              modeling_moshi.py
              __init__.py
              __pycache__/
                configuration_moshi.cpython-312.pyc
                modeling_moshi.cpython-312.pyc
                __init__.cpython-312.pyc
            mpnet/
              configuration_mpnet.py
              modeling_mpnet.py
              modeling_tf_mpnet.py
              tokenization_mpnet.py
              tokenization_mpnet_fast.py
              __init__.py
              __pycache__/
                configuration_mpnet.cpython-312.pyc
                modeling_mpnet.cpython-312.pyc
                modeling_tf_mpnet.cpython-312.pyc
                tokenization_mpnet.cpython-312.pyc
                tokenization_mpnet_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            mpt/
              configuration_mpt.py
              modeling_mpt.py
              __init__.py
              __pycache__/
                configuration_mpt.cpython-312.pyc
                modeling_mpt.cpython-312.pyc
                __init__.cpython-312.pyc
            mra/
              configuration_mra.py
              modeling_mra.py
              __init__.py
              __pycache__/
                configuration_mra.cpython-312.pyc
                modeling_mra.cpython-312.pyc
                __init__.cpython-312.pyc
            mt5/
              configuration_mt5.py
              modeling_flax_mt5.py
              modeling_mt5.py
              modeling_tf_mt5.py
              tokenization_mt5.py
              tokenization_mt5_fast.py
              __init__.py
              __pycache__/
                configuration_mt5.cpython-312.pyc
                modeling_flax_mt5.cpython-312.pyc
                modeling_mt5.cpython-312.pyc
                modeling_tf_mt5.cpython-312.pyc
                tokenization_mt5.cpython-312.pyc
                tokenization_mt5_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            musicgen/
              configuration_musicgen.py
              modeling_musicgen.py
              processing_musicgen.py
              __init__.py
              __pycache__/
                configuration_musicgen.cpython-312.pyc
                modeling_musicgen.cpython-312.pyc
                processing_musicgen.cpython-312.pyc
                __init__.cpython-312.pyc
            musicgen_melody/
              configuration_musicgen_melody.py
              feature_extraction_musicgen_melody.py
              modeling_musicgen_melody.py
              processing_musicgen_melody.py
              __init__.py
              __pycache__/
                configuration_musicgen_melody.cpython-312.pyc
                feature_extraction_musicgen_melody.cpython-312.pyc
                modeling_musicgen_melody.cpython-312.pyc
                processing_musicgen_melody.cpython-312.pyc
                __init__.cpython-312.pyc
            mvp/
              configuration_mvp.py
              modeling_mvp.py
              tokenization_mvp.py
              tokenization_mvp_fast.py
              __init__.py
              __pycache__/
                configuration_mvp.cpython-312.pyc
                modeling_mvp.cpython-312.pyc
                tokenization_mvp.cpython-312.pyc
                tokenization_mvp_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            myt5/
              tokenization_myt5.py
              __init__.py
              __pycache__/
                tokenization_myt5.cpython-312.pyc
                __init__.cpython-312.pyc
            nemotron/
              configuration_nemotron.py
              modeling_nemotron.py
              __init__.py
              __pycache__/
                configuration_nemotron.cpython-312.pyc
                modeling_nemotron.cpython-312.pyc
                __init__.cpython-312.pyc
            nllb/
              tokenization_nllb.py
              tokenization_nllb_fast.py
              __init__.py
              __pycache__/
                tokenization_nllb.cpython-312.pyc
                tokenization_nllb_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            nllb_moe/
              configuration_nllb_moe.py
              modeling_nllb_moe.py
              __init__.py
              __pycache__/
                configuration_nllb_moe.cpython-312.pyc
                modeling_nllb_moe.cpython-312.pyc
                __init__.cpython-312.pyc
            nougat/
              image_processing_nougat.py
              processing_nougat.py
              tokenization_nougat_fast.py
              __init__.py
              __pycache__/
                image_processing_nougat.cpython-312.pyc
                processing_nougat.cpython-312.pyc
                tokenization_nougat_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            nystromformer/
              configuration_nystromformer.py
              modeling_nystromformer.py
              __init__.py
              __pycache__/
                configuration_nystromformer.cpython-312.pyc
                modeling_nystromformer.cpython-312.pyc
                __init__.cpython-312.pyc
            olmo/
              configuration_olmo.py
              modeling_olmo.py
              modular_olmo.py
              __init__.py
              __pycache__/
                configuration_olmo.cpython-312.pyc
                modeling_olmo.cpython-312.pyc
                modular_olmo.cpython-312.pyc
                __init__.cpython-312.pyc
            olmo2/
              configuration_olmo2.py
              modeling_olmo2.py
              modular_olmo2.py
              __init__.py
              __pycache__/
                configuration_olmo2.cpython-312.pyc
                modeling_olmo2.cpython-312.pyc
                modular_olmo2.cpython-312.pyc
                __init__.cpython-312.pyc
            olmoe/
              configuration_olmoe.py
              modeling_olmoe.py
              __init__.py
              __pycache__/
                configuration_olmoe.cpython-312.pyc
                modeling_olmoe.cpython-312.pyc
                __init__.cpython-312.pyc
            omdet_turbo/
              configuration_omdet_turbo.py
              modeling_omdet_turbo.py
              processing_omdet_turbo.py
              __init__.py
              __pycache__/
                configuration_omdet_turbo.cpython-312.pyc
                modeling_omdet_turbo.cpython-312.pyc
                processing_omdet_turbo.cpython-312.pyc
                __init__.cpython-312.pyc
            oneformer/
              configuration_oneformer.py
              image_processing_oneformer.py
              modeling_oneformer.py
              processing_oneformer.py
              __init__.py
              __pycache__/
                configuration_oneformer.cpython-312.pyc
                image_processing_oneformer.cpython-312.pyc
                modeling_oneformer.cpython-312.pyc
                processing_oneformer.cpython-312.pyc
                __init__.cpython-312.pyc
            openai/
              configuration_openai.py
              modeling_openai.py
              modeling_tf_openai.py
              tokenization_openai.py
              tokenization_openai_fast.py
              __init__.py
              __pycache__/
                configuration_openai.cpython-312.pyc
                modeling_openai.cpython-312.pyc
                modeling_tf_openai.cpython-312.pyc
                tokenization_openai.cpython-312.pyc
                tokenization_openai_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            opt/
              configuration_opt.py
              modeling_flax_opt.py
              modeling_opt.py
              modeling_tf_opt.py
              __init__.py
              __pycache__/
                configuration_opt.cpython-312.pyc
                modeling_flax_opt.cpython-312.pyc
                modeling_opt.cpython-312.pyc
                modeling_tf_opt.cpython-312.pyc
                __init__.cpython-312.pyc
            owlv2/
              configuration_owlv2.py
              image_processing_owlv2.py
              modeling_owlv2.py
              processing_owlv2.py
              __init__.py
              __pycache__/
                configuration_owlv2.cpython-312.pyc
                image_processing_owlv2.cpython-312.pyc
                modeling_owlv2.cpython-312.pyc
                processing_owlv2.cpython-312.pyc
                __init__.cpython-312.pyc
            owlvit/
              configuration_owlvit.py
              feature_extraction_owlvit.py
              image_processing_owlvit.py
              image_processing_owlvit_fast.py
              modeling_owlvit.py
              processing_owlvit.py
              __init__.py
              __pycache__/
                configuration_owlvit.cpython-312.pyc
                feature_extraction_owlvit.cpython-312.pyc
                image_processing_owlvit.cpython-312.pyc
                image_processing_owlvit_fast.cpython-312.pyc
                modeling_owlvit.cpython-312.pyc
                processing_owlvit.cpython-312.pyc
                __init__.cpython-312.pyc
            paligemma/
              configuration_paligemma.py
              modeling_paligemma.py
              processing_paligemma.py
              __init__.py
              __pycache__/
                configuration_paligemma.cpython-312.pyc
                modeling_paligemma.cpython-312.pyc
                processing_paligemma.cpython-312.pyc
                __init__.cpython-312.pyc
            patchtsmixer/
              configuration_patchtsmixer.py
              modeling_patchtsmixer.py
              __init__.py
              __pycache__/
                configuration_patchtsmixer.cpython-312.pyc
                modeling_patchtsmixer.cpython-312.pyc
                __init__.cpython-312.pyc
            patchtst/
              configuration_patchtst.py
              modeling_patchtst.py
              __init__.py
              __pycache__/
                configuration_patchtst.cpython-312.pyc
                modeling_patchtst.cpython-312.pyc
                __init__.cpython-312.pyc
            pegasus/
              configuration_pegasus.py
              modeling_flax_pegasus.py
              modeling_pegasus.py
              modeling_tf_pegasus.py
              tokenization_pegasus.py
              tokenization_pegasus_fast.py
              __init__.py
              __pycache__/
                configuration_pegasus.cpython-312.pyc
                modeling_flax_pegasus.cpython-312.pyc
                modeling_pegasus.cpython-312.pyc
                modeling_tf_pegasus.cpython-312.pyc
                tokenization_pegasus.cpython-312.pyc
                tokenization_pegasus_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            pegasus_x/
              configuration_pegasus_x.py
              modeling_pegasus_x.py
              __init__.py
              __pycache__/
                configuration_pegasus_x.cpython-312.pyc
                modeling_pegasus_x.cpython-312.pyc
                __init__.cpython-312.pyc
            perceiver/
              configuration_perceiver.py
              feature_extraction_perceiver.py
              image_processing_perceiver.py
              image_processing_perceiver_fast.py
              modeling_perceiver.py
              tokenization_perceiver.py
              __init__.py
              __pycache__/
                configuration_perceiver.cpython-312.pyc
                feature_extraction_perceiver.cpython-312.pyc
                image_processing_perceiver.cpython-312.pyc
                image_processing_perceiver_fast.cpython-312.pyc
                modeling_perceiver.cpython-312.pyc
                tokenization_perceiver.cpython-312.pyc
                __init__.cpython-312.pyc
            persimmon/
              configuration_persimmon.py
              modeling_persimmon.py
              __init__.py
              __pycache__/
                configuration_persimmon.cpython-312.pyc
                modeling_persimmon.cpython-312.pyc
                __init__.cpython-312.pyc
            phi/
              configuration_phi.py
              modeling_phi.py
              modular_phi.py
              __init__.py
              __pycache__/
                configuration_phi.cpython-312.pyc
                modeling_phi.cpython-312.pyc
                modular_phi.cpython-312.pyc
                __init__.cpython-312.pyc
            phi3/
              configuration_phi3.py
              modeling_phi3.py
              modular_phi3.py
              __init__.py
              __pycache__/
                configuration_phi3.cpython-312.pyc
                modeling_phi3.cpython-312.pyc
                modular_phi3.cpython-312.pyc
                __init__.cpython-312.pyc
            phi4_multimodal/
              configuration_phi4_multimodal.py
              feature_extraction_phi4_multimodal.py
              image_processing_phi4_multimodal_fast.py
              modeling_phi4_multimodal.py
              modular_phi4_multimodal.py
              processing_phi4_multimodal.py
              __init__.py
              __pycache__/
                configuration_phi4_multimodal.cpython-312.pyc
                feature_extraction_phi4_multimodal.cpython-312.pyc
                image_processing_phi4_multimodal_fast.cpython-312.pyc
                modeling_phi4_multimodal.cpython-312.pyc
                modular_phi4_multimodal.cpython-312.pyc
                processing_phi4_multimodal.cpython-312.pyc
                __init__.cpython-312.pyc
            phimoe/
              configuration_phimoe.py
              modeling_phimoe.py
              __init__.py
              __pycache__/
                configuration_phimoe.cpython-312.pyc
                modeling_phimoe.cpython-312.pyc
                __init__.cpython-312.pyc
            phobert/
              tokenization_phobert.py
              __init__.py
              __pycache__/
                tokenization_phobert.cpython-312.pyc
                __init__.cpython-312.pyc
            pix2struct/
              configuration_pix2struct.py
              image_processing_pix2struct.py
              modeling_pix2struct.py
              processing_pix2struct.py
              __init__.py
              __pycache__/
                configuration_pix2struct.cpython-312.pyc
                image_processing_pix2struct.cpython-312.pyc
                modeling_pix2struct.cpython-312.pyc
                processing_pix2struct.cpython-312.pyc
                __init__.cpython-312.pyc
            pixtral/
              configuration_pixtral.py
              image_processing_pixtral.py
              image_processing_pixtral_fast.py
              modeling_pixtral.py
              processing_pixtral.py
              __init__.py
              __pycache__/
                configuration_pixtral.cpython-312.pyc
                image_processing_pixtral.cpython-312.pyc
                image_processing_pixtral_fast.cpython-312.pyc
                modeling_pixtral.cpython-312.pyc
                processing_pixtral.cpython-312.pyc
                __init__.cpython-312.pyc
            plbart/
              configuration_plbart.py
              modeling_plbart.py
              tokenization_plbart.py
              __init__.py
              __pycache__/
                configuration_plbart.cpython-312.pyc
                modeling_plbart.cpython-312.pyc
                tokenization_plbart.cpython-312.pyc
                __init__.cpython-312.pyc
            poolformer/
              configuration_poolformer.py
              feature_extraction_poolformer.py
              image_processing_poolformer.py
              image_processing_poolformer_fast.py
              modeling_poolformer.py
              __init__.py
              __pycache__/
                configuration_poolformer.cpython-312.pyc
                feature_extraction_poolformer.cpython-312.pyc
                image_processing_poolformer.cpython-312.pyc
                image_processing_poolformer_fast.cpython-312.pyc
                modeling_poolformer.cpython-312.pyc
                __init__.cpython-312.pyc
            pop2piano/
              configuration_pop2piano.py
              feature_extraction_pop2piano.py
              modeling_pop2piano.py
              processing_pop2piano.py
              tokenization_pop2piano.py
              __init__.py
              __pycache__/
                configuration_pop2piano.cpython-312.pyc
                feature_extraction_pop2piano.cpython-312.pyc
                modeling_pop2piano.cpython-312.pyc
                processing_pop2piano.cpython-312.pyc
                tokenization_pop2piano.cpython-312.pyc
                __init__.cpython-312.pyc
            prompt_depth_anything/
              configuration_prompt_depth_anything.py
              image_processing_prompt_depth_anything.py
              modeling_prompt_depth_anything.py
              modular_prompt_depth_anything.py
              __init__.py
              __pycache__/
                configuration_prompt_depth_anything.cpython-312.pyc
                image_processing_prompt_depth_anything.cpython-312.pyc
                modeling_prompt_depth_anything.cpython-312.pyc
                modular_prompt_depth_anything.cpython-312.pyc
                __init__.cpython-312.pyc
            prophetnet/
              configuration_prophetnet.py
              modeling_prophetnet.py
              tokenization_prophetnet.py
              __init__.py
              __pycache__/
                configuration_prophetnet.cpython-312.pyc
                modeling_prophetnet.cpython-312.pyc
                tokenization_prophetnet.cpython-312.pyc
                __init__.cpython-312.pyc
            pvt/
              configuration_pvt.py
              image_processing_pvt.py
              image_processing_pvt_fast.py
              modeling_pvt.py
              __init__.py
              __pycache__/
                configuration_pvt.cpython-312.pyc
                image_processing_pvt.cpython-312.pyc
                image_processing_pvt_fast.cpython-312.pyc
                modeling_pvt.cpython-312.pyc
                __init__.cpython-312.pyc
            pvt_v2/
              configuration_pvt_v2.py
              modeling_pvt_v2.py
              __init__.py
              __pycache__/
                configuration_pvt_v2.cpython-312.pyc
                modeling_pvt_v2.cpython-312.pyc
                __init__.cpython-312.pyc
            qwen2/
              configuration_qwen2.py
              modeling_qwen2.py
              modular_qwen2.py
              tokenization_qwen2.py
              tokenization_qwen2_fast.py
              __init__.py
              __pycache__/
                configuration_qwen2.cpython-312.pyc
                modeling_qwen2.cpython-312.pyc
                modular_qwen2.cpython-312.pyc
                tokenization_qwen2.cpython-312.pyc
                tokenization_qwen2_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            qwen2_5_omni/
              configuration_qwen2_5_omni.py
              modeling_qwen2_5_omni.py
              modular_qwen2_5_omni.py
              processing_qwen2_5_omni.py
              __init__.py
              __pycache__/
                configuration_qwen2_5_omni.cpython-312.pyc
                modeling_qwen2_5_omni.cpython-312.pyc
                modular_qwen2_5_omni.cpython-312.pyc
                processing_qwen2_5_omni.cpython-312.pyc
                __init__.cpython-312.pyc
            qwen2_5_vl/
              configuration_qwen2_5_vl.py
              modeling_qwen2_5_vl.py
              modular_qwen2_5_vl.py
              processing_qwen2_5_vl.py
              __init__.py
              __pycache__/
                configuration_qwen2_5_vl.cpython-312.pyc
                modeling_qwen2_5_vl.cpython-312.pyc
                modular_qwen2_5_vl.cpython-312.pyc
                processing_qwen2_5_vl.cpython-312.pyc
                __init__.cpython-312.pyc
            qwen2_audio/
              configuration_qwen2_audio.py
              modeling_qwen2_audio.py
              processing_qwen2_audio.py
              __init__.py
              __pycache__/
                configuration_qwen2_audio.cpython-312.pyc
                modeling_qwen2_audio.cpython-312.pyc
                processing_qwen2_audio.cpython-312.pyc
                __init__.cpython-312.pyc
            qwen2_moe/
              configuration_qwen2_moe.py
              modeling_qwen2_moe.py
              __init__.py
              __pycache__/
                configuration_qwen2_moe.cpython-312.pyc
                modeling_qwen2_moe.cpython-312.pyc
                __init__.cpython-312.pyc
            qwen2_vl/
              configuration_qwen2_vl.py
              image_processing_qwen2_vl.py
              image_processing_qwen2_vl_fast.py
              modeling_qwen2_vl.py
              processing_qwen2_vl.py
              video_processing_qwen2_vl.py
              __init__.py
              __pycache__/
                configuration_qwen2_vl.cpython-312.pyc
                image_processing_qwen2_vl.cpython-312.pyc
                image_processing_qwen2_vl_fast.cpython-312.pyc
                modeling_qwen2_vl.cpython-312.pyc
                processing_qwen2_vl.cpython-312.pyc
                video_processing_qwen2_vl.cpython-312.pyc
                __init__.cpython-312.pyc
            qwen3/
              configuration_qwen3.py
              modeling_qwen3.py
              modular_qwen3.py
              __init__.py
              __pycache__/
                configuration_qwen3.cpython-312.pyc
                modeling_qwen3.cpython-312.pyc
                modular_qwen3.cpython-312.pyc
                __init__.cpython-312.pyc
            qwen3_moe/
              configuration_qwen3_moe.py
              modeling_qwen3_moe.py
              modular_qwen3_moe.py
              __init__.py
              __pycache__/
                configuration_qwen3_moe.cpython-312.pyc
                modeling_qwen3_moe.cpython-312.pyc
                modular_qwen3_moe.cpython-312.pyc
                __init__.cpython-312.pyc
            rag/
              configuration_rag.py
              modeling_rag.py
              modeling_tf_rag.py
              retrieval_rag.py
              tokenization_rag.py
              __init__.py
              __pycache__/
                configuration_rag.cpython-312.pyc
                modeling_rag.cpython-312.pyc
                modeling_tf_rag.cpython-312.pyc
                retrieval_rag.cpython-312.pyc
                tokenization_rag.cpython-312.pyc
                __init__.cpython-312.pyc
            recurrent_gemma/
              configuration_recurrent_gemma.py
              modeling_recurrent_gemma.py
              __init__.py
              __pycache__/
                configuration_recurrent_gemma.cpython-312.pyc
                modeling_recurrent_gemma.cpython-312.pyc
                __init__.cpython-312.pyc
            reformer/
              configuration_reformer.py
              modeling_reformer.py
              tokenization_reformer.py
              tokenization_reformer_fast.py
              __init__.py
              __pycache__/
                configuration_reformer.cpython-312.pyc
                modeling_reformer.cpython-312.pyc
                tokenization_reformer.cpython-312.pyc
                tokenization_reformer_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            regnet/
              configuration_regnet.py
              modeling_flax_regnet.py
              modeling_regnet.py
              modeling_tf_regnet.py
              __init__.py
              __pycache__/
                configuration_regnet.cpython-312.pyc
                modeling_flax_regnet.cpython-312.pyc
                modeling_regnet.cpython-312.pyc
                modeling_tf_regnet.cpython-312.pyc
                __init__.cpython-312.pyc
            rembert/
              configuration_rembert.py
              modeling_rembert.py
              modeling_tf_rembert.py
              tokenization_rembert.py
              tokenization_rembert_fast.py
              __init__.py
              __pycache__/
                configuration_rembert.cpython-312.pyc
                modeling_rembert.cpython-312.pyc
                modeling_tf_rembert.cpython-312.pyc
                tokenization_rembert.cpython-312.pyc
                tokenization_rembert_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            resnet/
              configuration_resnet.py
              modeling_flax_resnet.py
              modeling_resnet.py
              modeling_tf_resnet.py
              __init__.py
              __pycache__/
                configuration_resnet.cpython-312.pyc
                modeling_flax_resnet.cpython-312.pyc
                modeling_resnet.cpython-312.pyc
                modeling_tf_resnet.cpython-312.pyc
                __init__.cpython-312.pyc
            roberta/
              configuration_roberta.py
              modeling_flax_roberta.py
              modeling_roberta.py
              modeling_tf_roberta.py
              tokenization_roberta.py
              tokenization_roberta_fast.py
              __init__.py
              __pycache__/
                configuration_roberta.cpython-312.pyc
                modeling_flax_roberta.cpython-312.pyc
                modeling_roberta.cpython-312.pyc
                modeling_tf_roberta.cpython-312.pyc
                tokenization_roberta.cpython-312.pyc
                tokenization_roberta_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            roberta_prelayernorm/
              configuration_roberta_prelayernorm.py
              modeling_flax_roberta_prelayernorm.py
              modeling_roberta_prelayernorm.py
              modeling_tf_roberta_prelayernorm.py
              __init__.py
              __pycache__/
                configuration_roberta_prelayernorm.cpython-312.pyc
                modeling_flax_roberta_prelayernorm.cpython-312.pyc
                modeling_roberta_prelayernorm.cpython-312.pyc
                modeling_tf_roberta_prelayernorm.cpython-312.pyc
                __init__.cpython-312.pyc
            roc_bert/
              configuration_roc_bert.py
              modeling_roc_bert.py
              tokenization_roc_bert.py
              __init__.py
              __pycache__/
                configuration_roc_bert.cpython-312.pyc
                modeling_roc_bert.cpython-312.pyc
                tokenization_roc_bert.cpython-312.pyc
                __init__.cpython-312.pyc
            roformer/
              configuration_roformer.py
              modeling_flax_roformer.py
              modeling_roformer.py
              modeling_tf_roformer.py
              tokenization_roformer.py
              tokenization_roformer_fast.py
              tokenization_utils.py
              __init__.py
              __pycache__/
                configuration_roformer.cpython-312.pyc
                modeling_flax_roformer.cpython-312.pyc
                modeling_roformer.cpython-312.pyc
                modeling_tf_roformer.cpython-312.pyc
                tokenization_roformer.cpython-312.pyc
                tokenization_roformer_fast.cpython-312.pyc
                tokenization_utils.cpython-312.pyc
                __init__.cpython-312.pyc
            rt_detr/
              configuration_rt_detr.py
              configuration_rt_detr_resnet.py
              image_processing_rt_detr.py
              image_processing_rt_detr_fast.py
              modeling_rt_detr.py
              modeling_rt_detr_resnet.py
              modular_rt_detr.py
              __init__.py
              __pycache__/
                configuration_rt_detr.cpython-312.pyc
                configuration_rt_detr_resnet.cpython-312.pyc
                image_processing_rt_detr.cpython-312.pyc
                image_processing_rt_detr_fast.cpython-312.pyc
                modeling_rt_detr.cpython-312.pyc
                modeling_rt_detr_resnet.cpython-312.pyc
                modular_rt_detr.cpython-312.pyc
                __init__.cpython-312.pyc
            rt_detr_v2/
              configuration_rt_detr_v2.py
              modeling_rt_detr_v2.py
              modular_rt_detr_v2.py
              __init__.py
              __pycache__/
                configuration_rt_detr_v2.cpython-312.pyc
                modeling_rt_detr_v2.cpython-312.pyc
                modular_rt_detr_v2.cpython-312.pyc
                __init__.cpython-312.pyc
            rwkv/
              configuration_rwkv.py
              modeling_rwkv.py
              __init__.py
              __pycache__/
                configuration_rwkv.cpython-312.pyc
                modeling_rwkv.cpython-312.pyc
                __init__.cpython-312.pyc
            sam/
              configuration_sam.py
              image_processing_sam.py
              modeling_sam.py
              modeling_tf_sam.py
              processing_sam.py
              __init__.py
              __pycache__/
                configuration_sam.cpython-312.pyc
                image_processing_sam.cpython-312.pyc
                modeling_sam.cpython-312.pyc
                modeling_tf_sam.cpython-312.pyc
                processing_sam.cpython-312.pyc
                __init__.cpython-312.pyc
            sam_hq/
              configuration_sam_hq.py
              modeling_sam_hq.py
              modular_sam_hq.py
              processing_samhq.py
              __init__.py
              __pycache__/
                configuration_sam_hq.cpython-312.pyc
                modeling_sam_hq.cpython-312.pyc
                modular_sam_hq.cpython-312.pyc
                processing_samhq.cpython-312.pyc
                __init__.cpython-312.pyc
            seamless_m4t/
              configuration_seamless_m4t.py
              feature_extraction_seamless_m4t.py
              modeling_seamless_m4t.py
              processing_seamless_m4t.py
              tokenization_seamless_m4t.py
              tokenization_seamless_m4t_fast.py
              __init__.py
              __pycache__/
                configuration_seamless_m4t.cpython-312.pyc
                feature_extraction_seamless_m4t.cpython-312.pyc
                modeling_seamless_m4t.cpython-312.pyc
                processing_seamless_m4t.cpython-312.pyc
                tokenization_seamless_m4t.cpython-312.pyc
                tokenization_seamless_m4t_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            seamless_m4t_v2/
              configuration_seamless_m4t_v2.py
              modeling_seamless_m4t_v2.py
              __init__.py
              __pycache__/
                configuration_seamless_m4t_v2.cpython-312.pyc
                modeling_seamless_m4t_v2.cpython-312.pyc
                __init__.cpython-312.pyc
            segformer/
              configuration_segformer.py
              feature_extraction_segformer.py
              image_processing_segformer.py
              modeling_segformer.py
              modeling_tf_segformer.py
              __init__.py
              __pycache__/
                configuration_segformer.cpython-312.pyc
                feature_extraction_segformer.cpython-312.pyc
                image_processing_segformer.cpython-312.pyc
                modeling_segformer.cpython-312.pyc
                modeling_tf_segformer.cpython-312.pyc
                __init__.cpython-312.pyc
            seggpt/
              configuration_seggpt.py
              image_processing_seggpt.py
              modeling_seggpt.py
              __init__.py
              __pycache__/
                configuration_seggpt.cpython-312.pyc
                image_processing_seggpt.cpython-312.pyc
                modeling_seggpt.cpython-312.pyc
                __init__.cpython-312.pyc
            sew/
              configuration_sew.py
              modeling_sew.py
              __init__.py
              __pycache__/
                configuration_sew.cpython-312.pyc
                modeling_sew.cpython-312.pyc
                __init__.cpython-312.pyc
            sew_d/
              configuration_sew_d.py
              modeling_sew_d.py
              __init__.py
              __pycache__/
                configuration_sew_d.cpython-312.pyc
                modeling_sew_d.cpython-312.pyc
                __init__.cpython-312.pyc
            shieldgemma2/
              configuration_shieldgemma2.py
              modeling_shieldgemma2.py
              processing_shieldgemma2.py
              __init__.py
              __pycache__/
                configuration_shieldgemma2.cpython-312.pyc
                modeling_shieldgemma2.cpython-312.pyc
                processing_shieldgemma2.cpython-312.pyc
                __init__.cpython-312.pyc
            siglip/
              configuration_siglip.py
              image_processing_siglip.py
              image_processing_siglip_fast.py
              modeling_siglip.py
              processing_siglip.py
              tokenization_siglip.py
              __init__.py
              __pycache__/
                configuration_siglip.cpython-312.pyc
                image_processing_siglip.cpython-312.pyc
                image_processing_siglip_fast.cpython-312.pyc
                modeling_siglip.cpython-312.pyc
                processing_siglip.cpython-312.pyc
                tokenization_siglip.cpython-312.pyc
                __init__.cpython-312.pyc
            siglip2/
              configuration_siglip2.py
              image_processing_siglip2.py
              image_processing_siglip2_fast.py
              modeling_siglip2.py
              modular_siglip2.py
              processing_siglip2.py
              __init__.py
              __pycache__/
                configuration_siglip2.cpython-312.pyc
                image_processing_siglip2.cpython-312.pyc
                image_processing_siglip2_fast.cpython-312.pyc
                modeling_siglip2.cpython-312.pyc
                modular_siglip2.cpython-312.pyc
                processing_siglip2.cpython-312.pyc
                __init__.cpython-312.pyc
            smolvlm/
              configuration_smolvlm.py
              image_processing_smolvlm.py
              modeling_smolvlm.py
              modular_smolvlm.py
              processing_smolvlm.py
              video_processing_smolvlm.py
              __init__.py
              __pycache__/
                configuration_smolvlm.cpython-312.pyc
                image_processing_smolvlm.cpython-312.pyc
                modeling_smolvlm.cpython-312.pyc
                modular_smolvlm.cpython-312.pyc
                processing_smolvlm.cpython-312.pyc
                video_processing_smolvlm.cpython-312.pyc
                __init__.cpython-312.pyc
            speecht5/
              configuration_speecht5.py
              feature_extraction_speecht5.py
              modeling_speecht5.py
              number_normalizer.py
              processing_speecht5.py
              tokenization_speecht5.py
              __init__.py
              __pycache__/
                configuration_speecht5.cpython-312.pyc
                feature_extraction_speecht5.cpython-312.pyc
                modeling_speecht5.cpython-312.pyc
                number_normalizer.cpython-312.pyc
                processing_speecht5.cpython-312.pyc
                tokenization_speecht5.cpython-312.pyc
                __init__.cpython-312.pyc
            speech_encoder_decoder/
              configuration_speech_encoder_decoder.py
              modeling_flax_speech_encoder_decoder.py
              modeling_speech_encoder_decoder.py
              __init__.py
              __pycache__/
                configuration_speech_encoder_decoder.cpython-312.pyc
                modeling_flax_speech_encoder_decoder.cpython-312.pyc
                modeling_speech_encoder_decoder.cpython-312.pyc
                __init__.cpython-312.pyc
            speech_to_text/
              configuration_speech_to_text.py
              feature_extraction_speech_to_text.py
              modeling_speech_to_text.py
              modeling_tf_speech_to_text.py
              processing_speech_to_text.py
              tokenization_speech_to_text.py
              __init__.py
              __pycache__/
                configuration_speech_to_text.cpython-312.pyc
                feature_extraction_speech_to_text.cpython-312.pyc
                modeling_speech_to_text.cpython-312.pyc
                modeling_tf_speech_to_text.cpython-312.pyc
                processing_speech_to_text.cpython-312.pyc
                tokenization_speech_to_text.cpython-312.pyc
                __init__.cpython-312.pyc
            splinter/
              configuration_splinter.py
              modeling_splinter.py
              tokenization_splinter.py
              tokenization_splinter_fast.py
              __init__.py
              __pycache__/
                configuration_splinter.cpython-312.pyc
                modeling_splinter.cpython-312.pyc
                tokenization_splinter.cpython-312.pyc
                tokenization_splinter_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            squeezebert/
              configuration_squeezebert.py
              modeling_squeezebert.py
              tokenization_squeezebert.py
              tokenization_squeezebert_fast.py
              __init__.py
              __pycache__/
                configuration_squeezebert.cpython-312.pyc
                modeling_squeezebert.cpython-312.pyc
                tokenization_squeezebert.cpython-312.pyc
                tokenization_squeezebert_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            stablelm/
              configuration_stablelm.py
              modeling_stablelm.py
              __init__.py
              __pycache__/
                configuration_stablelm.cpython-312.pyc
                modeling_stablelm.cpython-312.pyc
                __init__.cpython-312.pyc
            starcoder2/
              configuration_starcoder2.py
              modeling_starcoder2.py
              modular_starcoder2.py
              __init__.py
              __pycache__/
                configuration_starcoder2.cpython-312.pyc
                modeling_starcoder2.cpython-312.pyc
                modular_starcoder2.cpython-312.pyc
                __init__.cpython-312.pyc
            superglue/
              configuration_superglue.py
              image_processing_superglue.py
              modeling_superglue.py
              __init__.py
              __pycache__/
                configuration_superglue.cpython-312.pyc
                image_processing_superglue.cpython-312.pyc
                modeling_superglue.cpython-312.pyc
                __init__.cpython-312.pyc
            superpoint/
              configuration_superpoint.py
              image_processing_superpoint.py
              modeling_superpoint.py
              __init__.py
              __pycache__/
                configuration_superpoint.cpython-312.pyc
                image_processing_superpoint.cpython-312.pyc
                modeling_superpoint.cpython-312.pyc
                __init__.cpython-312.pyc
            swiftformer/
              configuration_swiftformer.py
              modeling_swiftformer.py
              modeling_tf_swiftformer.py
              __init__.py
              __pycache__/
                configuration_swiftformer.cpython-312.pyc
                modeling_swiftformer.cpython-312.pyc
                modeling_tf_swiftformer.cpython-312.pyc
                __init__.cpython-312.pyc
            swin/
              configuration_swin.py
              modeling_swin.py
              modeling_tf_swin.py
              __init__.py
              __pycache__/
                configuration_swin.cpython-312.pyc
                modeling_swin.cpython-312.pyc
                modeling_tf_swin.cpython-312.pyc
                __init__.cpython-312.pyc
            swin2sr/
              configuration_swin2sr.py
              image_processing_swin2sr.py
              image_processing_swin2sr_fast.py
              modeling_swin2sr.py
              __init__.py
              __pycache__/
                configuration_swin2sr.cpython-312.pyc
                image_processing_swin2sr.cpython-312.pyc
                image_processing_swin2sr_fast.cpython-312.pyc
                modeling_swin2sr.cpython-312.pyc
                __init__.cpython-312.pyc
            swinv2/
              configuration_swinv2.py
              modeling_swinv2.py
              __init__.py
              __pycache__/
                configuration_swinv2.cpython-312.pyc
                modeling_swinv2.cpython-312.pyc
                __init__.cpython-312.pyc
            switch_transformers/
              configuration_switch_transformers.py
              modeling_switch_transformers.py
              __init__.py
              __pycache__/
                configuration_switch_transformers.cpython-312.pyc
                modeling_switch_transformers.cpython-312.pyc
                __init__.cpython-312.pyc
            t5/
              configuration_t5.py
              modeling_flax_t5.py
              modeling_t5.py
              modeling_tf_t5.py
              tokenization_t5.py
              tokenization_t5_fast.py
              __init__.py
              __pycache__/
                configuration_t5.cpython-312.pyc
                modeling_flax_t5.cpython-312.pyc
                modeling_t5.cpython-312.pyc
                modeling_tf_t5.cpython-312.pyc
                tokenization_t5.cpython-312.pyc
                tokenization_t5_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            table_transformer/
              configuration_table_transformer.py
              modeling_table_transformer.py
              __init__.py
              __pycache__/
                configuration_table_transformer.cpython-312.pyc
                modeling_table_transformer.cpython-312.pyc
                __init__.cpython-312.pyc
            tapas/
              configuration_tapas.py
              modeling_tapas.py
              modeling_tf_tapas.py
              tokenization_tapas.py
              __init__.py
              __pycache__/
                configuration_tapas.cpython-312.pyc
                modeling_tapas.cpython-312.pyc
                modeling_tf_tapas.cpython-312.pyc
                tokenization_tapas.cpython-312.pyc
                __init__.cpython-312.pyc
            textnet/
              configuration_textnet.py
              image_processing_textnet.py
              modeling_textnet.py
              __init__.py
              __pycache__/
                configuration_textnet.cpython-312.pyc
                image_processing_textnet.cpython-312.pyc
                modeling_textnet.cpython-312.pyc
                __init__.cpython-312.pyc
            timesfm/
              configuration_timesfm.py
              modeling_timesfm.py
              modular_timesfm.py
              __init__.py
              __pycache__/
                configuration_timesfm.cpython-312.pyc
                modeling_timesfm.cpython-312.pyc
                modular_timesfm.cpython-312.pyc
                __init__.cpython-312.pyc
            timesformer/
              configuration_timesformer.py
              modeling_timesformer.py
              __init__.py
              __pycache__/
                configuration_timesformer.cpython-312.pyc
                modeling_timesformer.cpython-312.pyc
                __init__.cpython-312.pyc
            time_series_transformer/
              configuration_time_series_transformer.py
              modeling_time_series_transformer.py
              __init__.py
              __pycache__/
                configuration_time_series_transformer.cpython-312.pyc
                modeling_time_series_transformer.cpython-312.pyc
                __init__.cpython-312.pyc
            timm_backbone/
              configuration_timm_backbone.py
              modeling_timm_backbone.py
              __init__.py
              __pycache__/
                configuration_timm_backbone.cpython-312.pyc
                modeling_timm_backbone.cpython-312.pyc
                __init__.cpython-312.pyc
            timm_wrapper/
              configuration_timm_wrapper.py
              image_processing_timm_wrapper.py
              modeling_timm_wrapper.py
              __init__.py
              __pycache__/
                configuration_timm_wrapper.cpython-312.pyc
                image_processing_timm_wrapper.cpython-312.pyc
                modeling_timm_wrapper.cpython-312.pyc
                __init__.cpython-312.pyc
            trocr/
              configuration_trocr.py
              modeling_trocr.py
              processing_trocr.py
              __init__.py
              __pycache__/
                configuration_trocr.cpython-312.pyc
                modeling_trocr.cpython-312.pyc
                processing_trocr.cpython-312.pyc
                __init__.cpython-312.pyc
            tvp/
              configuration_tvp.py
              image_processing_tvp.py
              modeling_tvp.py
              processing_tvp.py
              __init__.py
              __pycache__/
                configuration_tvp.cpython-312.pyc
                image_processing_tvp.cpython-312.pyc
                modeling_tvp.cpython-312.pyc
                processing_tvp.cpython-312.pyc
                __init__.cpython-312.pyc
            udop/
              configuration_udop.py
              modeling_udop.py
              processing_udop.py
              tokenization_udop.py
              tokenization_udop_fast.py
              __init__.py
              __pycache__/
                configuration_udop.cpython-312.pyc
                modeling_udop.cpython-312.pyc
                processing_udop.cpython-312.pyc
                tokenization_udop.cpython-312.pyc
                tokenization_udop_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            umt5/
              configuration_umt5.py
              modeling_umt5.py
              __init__.py
              __pycache__/
                configuration_umt5.cpython-312.pyc
                modeling_umt5.cpython-312.pyc
                __init__.cpython-312.pyc
            unispeech/
              configuration_unispeech.py
              modeling_unispeech.py
              modular_unispeech.py
              __init__.py
              __pycache__/
                configuration_unispeech.cpython-312.pyc
                modeling_unispeech.cpython-312.pyc
                modular_unispeech.cpython-312.pyc
                __init__.cpython-312.pyc
            unispeech_sat/
              configuration_unispeech_sat.py
              modeling_unispeech_sat.py
              modular_unispeech_sat.py
              __init__.py
              __pycache__/
                configuration_unispeech_sat.cpython-312.pyc
                modeling_unispeech_sat.cpython-312.pyc
                modular_unispeech_sat.cpython-312.pyc
                __init__.cpython-312.pyc
            univnet/
              configuration_univnet.py
              feature_extraction_univnet.py
              modeling_univnet.py
              __init__.py
              __pycache__/
                configuration_univnet.cpython-312.pyc
                feature_extraction_univnet.cpython-312.pyc
                modeling_univnet.cpython-312.pyc
                __init__.cpython-312.pyc
            upernet/
              configuration_upernet.py
              modeling_upernet.py
              __init__.py
              __pycache__/
                configuration_upernet.cpython-312.pyc
                modeling_upernet.cpython-312.pyc
                __init__.cpython-312.pyc
            videomae/
              configuration_videomae.py
              feature_extraction_videomae.py
              image_processing_videomae.py
              modeling_videomae.py
              __init__.py
              __pycache__/
                configuration_videomae.cpython-312.pyc
                feature_extraction_videomae.cpython-312.pyc
                image_processing_videomae.cpython-312.pyc
                modeling_videomae.cpython-312.pyc
                __init__.cpython-312.pyc
            video_llava/
              configuration_video_llava.py
              image_processing_video_llava.py
              modeling_video_llava.py
              processing_video_llava.py
              video_processing_video_llava.py
              __init__.py
              __pycache__/
                configuration_video_llava.cpython-312.pyc
                image_processing_video_llava.cpython-312.pyc
                modeling_video_llava.cpython-312.pyc
                processing_video_llava.cpython-312.pyc
                video_processing_video_llava.cpython-312.pyc
                __init__.cpython-312.pyc
            vilt/
              configuration_vilt.py
              feature_extraction_vilt.py
              image_processing_vilt.py
              image_processing_vilt_fast.py
              modeling_vilt.py
              processing_vilt.py
              __init__.py
              __pycache__/
                configuration_vilt.cpython-312.pyc
                feature_extraction_vilt.cpython-312.pyc
                image_processing_vilt.cpython-312.pyc
                image_processing_vilt_fast.cpython-312.pyc
                modeling_vilt.cpython-312.pyc
                processing_vilt.cpython-312.pyc
                __init__.cpython-312.pyc
            vipllava/
              configuration_vipllava.py
              modeling_vipllava.py
              modular_vipllava.py
              __init__.py
              __pycache__/
                configuration_vipllava.cpython-312.pyc
                modeling_vipllava.cpython-312.pyc
                modular_vipllava.cpython-312.pyc
                __init__.cpython-312.pyc
            vision_encoder_decoder/
              configuration_vision_encoder_decoder.py
              modeling_flax_vision_encoder_decoder.py
              modeling_tf_vision_encoder_decoder.py
              modeling_vision_encoder_decoder.py
              __init__.py
              __pycache__/
                configuration_vision_encoder_decoder.cpython-312.pyc
                modeling_flax_vision_encoder_decoder.cpython-312.pyc
                modeling_tf_vision_encoder_decoder.cpython-312.pyc
                modeling_vision_encoder_decoder.cpython-312.pyc
                __init__.cpython-312.pyc
            vision_text_dual_encoder/
              configuration_vision_text_dual_encoder.py
              modeling_flax_vision_text_dual_encoder.py
              modeling_tf_vision_text_dual_encoder.py
              modeling_vision_text_dual_encoder.py
              processing_vision_text_dual_encoder.py
              __init__.py
              __pycache__/
                configuration_vision_text_dual_encoder.cpython-312.pyc
                modeling_flax_vision_text_dual_encoder.cpython-312.pyc
                modeling_tf_vision_text_dual_encoder.cpython-312.pyc
                modeling_vision_text_dual_encoder.cpython-312.pyc
                processing_vision_text_dual_encoder.cpython-312.pyc
                __init__.cpython-312.pyc
            visual_bert/
              configuration_visual_bert.py
              modeling_visual_bert.py
              __init__.py
              __pycache__/
                configuration_visual_bert.cpython-312.pyc
                modeling_visual_bert.cpython-312.pyc
                __init__.cpython-312.pyc
            vit/
              configuration_vit.py
              feature_extraction_vit.py
              image_processing_vit.py
              image_processing_vit_fast.py
              modeling_flax_vit.py
              modeling_tf_vit.py
              modeling_vit.py
              __init__.py
              __pycache__/
                configuration_vit.cpython-312.pyc
                feature_extraction_vit.cpython-312.pyc
                image_processing_vit.cpython-312.pyc
                image_processing_vit_fast.cpython-312.pyc
                modeling_flax_vit.cpython-312.pyc
                modeling_tf_vit.cpython-312.pyc
                modeling_vit.cpython-312.pyc
                __init__.cpython-312.pyc
            vitdet/
              configuration_vitdet.py
              modeling_vitdet.py
              __init__.py
              __pycache__/
                configuration_vitdet.cpython-312.pyc
                modeling_vitdet.cpython-312.pyc
                __init__.cpython-312.pyc
            vitmatte/
              configuration_vitmatte.py
              image_processing_vitmatte.py
              image_processing_vitmatte_fast.py
              modeling_vitmatte.py
              __init__.py
              __pycache__/
                configuration_vitmatte.cpython-312.pyc
                image_processing_vitmatte.cpython-312.pyc
                image_processing_vitmatte_fast.cpython-312.pyc
                modeling_vitmatte.cpython-312.pyc
                __init__.cpython-312.pyc
            vitpose/
              configuration_vitpose.py
              image_processing_vitpose.py
              modeling_vitpose.py
              __init__.py
              __pycache__/
                configuration_vitpose.cpython-312.pyc
                image_processing_vitpose.cpython-312.pyc
                modeling_vitpose.cpython-312.pyc
                __init__.cpython-312.pyc
            vitpose_backbone/
              configuration_vitpose_backbone.py
              modeling_vitpose_backbone.py
              __init__.py
              __pycache__/
                configuration_vitpose_backbone.cpython-312.pyc
                modeling_vitpose_backbone.cpython-312.pyc
                __init__.cpython-312.pyc
            vits/
              configuration_vits.py
              modeling_vits.py
              tokenization_vits.py
              __init__.py
              __pycache__/
                configuration_vits.cpython-312.pyc
                modeling_vits.cpython-312.pyc
                tokenization_vits.cpython-312.pyc
                __init__.cpython-312.pyc
            vit_mae/
              configuration_vit_mae.py
              modeling_tf_vit_mae.py
              modeling_vit_mae.py
              __init__.py
              __pycache__/
                configuration_vit_mae.cpython-312.pyc
                modeling_tf_vit_mae.cpython-312.pyc
                modeling_vit_mae.cpython-312.pyc
                __init__.cpython-312.pyc
            vit_msn/
              configuration_vit_msn.py
              modeling_vit_msn.py
              __init__.py
              __pycache__/
                configuration_vit_msn.cpython-312.pyc
                modeling_vit_msn.cpython-312.pyc
                __init__.cpython-312.pyc
            vivit/
              configuration_vivit.py
              image_processing_vivit.py
              modeling_vivit.py
              __init__.py
              __pycache__/
                configuration_vivit.cpython-312.pyc
                image_processing_vivit.cpython-312.pyc
                modeling_vivit.cpython-312.pyc
                __init__.cpython-312.pyc
            wav2vec2/
              configuration_wav2vec2.py
              feature_extraction_wav2vec2.py
              modeling_flax_wav2vec2.py
              modeling_tf_wav2vec2.py
              modeling_wav2vec2.py
              processing_wav2vec2.py
              tokenization_wav2vec2.py
              __init__.py
              __pycache__/
                configuration_wav2vec2.cpython-312.pyc
                feature_extraction_wav2vec2.cpython-312.pyc
                modeling_flax_wav2vec2.cpython-312.pyc
                modeling_tf_wav2vec2.cpython-312.pyc
                modeling_wav2vec2.cpython-312.pyc
                processing_wav2vec2.cpython-312.pyc
                tokenization_wav2vec2.cpython-312.pyc
                __init__.cpython-312.pyc
            wav2vec2_bert/
              configuration_wav2vec2_bert.py
              modeling_wav2vec2_bert.py
              modular_wav2vec2_bert.py
              processing_wav2vec2_bert.py
              __init__.py
              __pycache__/
                configuration_wav2vec2_bert.cpython-312.pyc
                modeling_wav2vec2_bert.cpython-312.pyc
                modular_wav2vec2_bert.cpython-312.pyc
                processing_wav2vec2_bert.cpython-312.pyc
                __init__.cpython-312.pyc
            wav2vec2_conformer/
              configuration_wav2vec2_conformer.py
              modeling_wav2vec2_conformer.py
              modular_wav2vec2_conformer.py
              __init__.py
              __pycache__/
                configuration_wav2vec2_conformer.cpython-312.pyc
                modeling_wav2vec2_conformer.cpython-312.pyc
                modular_wav2vec2_conformer.cpython-312.pyc
                __init__.cpython-312.pyc
            wav2vec2_phoneme/
              tokenization_wav2vec2_phoneme.py
              __init__.py
              __pycache__/
                tokenization_wav2vec2_phoneme.cpython-312.pyc
                __init__.cpython-312.pyc
            wav2vec2_with_lm/
              processing_wav2vec2_with_lm.py
              __init__.py
              __pycache__/
                processing_wav2vec2_with_lm.cpython-312.pyc
                __init__.cpython-312.pyc
            wavlm/
              configuration_wavlm.py
              modeling_wavlm.py
              modular_wavlm.py
              __init__.py
              __pycache__/
                configuration_wavlm.cpython-312.pyc
                modeling_wavlm.cpython-312.pyc
                modular_wavlm.cpython-312.pyc
                __init__.cpython-312.pyc
            whisper/
              configuration_whisper.py
              english_normalizer.py
              feature_extraction_whisper.py
              generation_whisper.py
              modeling_flax_whisper.py
              modeling_tf_whisper.py
              modeling_whisper.py
              processing_whisper.py
              tokenization_whisper.py
              tokenization_whisper_fast.py
              __init__.py
              __pycache__/
                configuration_whisper.cpython-312.pyc
                english_normalizer.cpython-312.pyc
                feature_extraction_whisper.cpython-312.pyc
                generation_whisper.cpython-312.pyc
                modeling_flax_whisper.cpython-312.pyc
                modeling_tf_whisper.cpython-312.pyc
                modeling_whisper.cpython-312.pyc
                processing_whisper.cpython-312.pyc
                tokenization_whisper.cpython-312.pyc
                tokenization_whisper_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            xglm/
              configuration_xglm.py
              modeling_flax_xglm.py
              modeling_tf_xglm.py
              modeling_xglm.py
              tokenization_xglm.py
              tokenization_xglm_fast.py
              __init__.py
              __pycache__/
                configuration_xglm.cpython-312.pyc
                modeling_flax_xglm.cpython-312.pyc
                modeling_tf_xglm.cpython-312.pyc
                modeling_xglm.cpython-312.pyc
                tokenization_xglm.cpython-312.pyc
                tokenization_xglm_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            xlm/
              configuration_xlm.py
              modeling_tf_xlm.py
              modeling_xlm.py
              tokenization_xlm.py
              __init__.py
              __pycache__/
                configuration_xlm.cpython-312.pyc
                modeling_tf_xlm.cpython-312.pyc
                modeling_xlm.cpython-312.pyc
                tokenization_xlm.cpython-312.pyc
                __init__.cpython-312.pyc
            xlm_roberta/
              configuration_xlm_roberta.py
              modeling_flax_xlm_roberta.py
              modeling_tf_xlm_roberta.py
              modeling_xlm_roberta.py
              tokenization_xlm_roberta.py
              tokenization_xlm_roberta_fast.py
              __init__.py
              __pycache__/
                configuration_xlm_roberta.cpython-312.pyc
                modeling_flax_xlm_roberta.cpython-312.pyc
                modeling_tf_xlm_roberta.cpython-312.pyc
                modeling_xlm_roberta.cpython-312.pyc
                tokenization_xlm_roberta.cpython-312.pyc
                tokenization_xlm_roberta_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            xlm_roberta_xl/
              configuration_xlm_roberta_xl.py
              modeling_xlm_roberta_xl.py
              __init__.py
              __pycache__/
                configuration_xlm_roberta_xl.cpython-312.pyc
                modeling_xlm_roberta_xl.cpython-312.pyc
                __init__.cpython-312.pyc
            xlnet/
              configuration_xlnet.py
              modeling_tf_xlnet.py
              modeling_xlnet.py
              tokenization_xlnet.py
              tokenization_xlnet_fast.py
              __init__.py
              __pycache__/
                configuration_xlnet.cpython-312.pyc
                modeling_tf_xlnet.cpython-312.pyc
                modeling_xlnet.cpython-312.pyc
                tokenization_xlnet.cpython-312.pyc
                tokenization_xlnet_fast.cpython-312.pyc
                __init__.cpython-312.pyc
            xmod/
              configuration_xmod.py
              modeling_xmod.py
              __init__.py
              __pycache__/
                configuration_xmod.cpython-312.pyc
                modeling_xmod.cpython-312.pyc
                __init__.cpython-312.pyc
            x_clip/
              configuration_x_clip.py
              modeling_x_clip.py
              processing_x_clip.py
              __init__.py
              __pycache__/
                configuration_x_clip.cpython-312.pyc
                modeling_x_clip.cpython-312.pyc
                processing_x_clip.cpython-312.pyc
                __init__.cpython-312.pyc
            yolos/
              configuration_yolos.py
              feature_extraction_yolos.py
              image_processing_yolos.py
              image_processing_yolos_fast.py
              modeling_yolos.py
              modular_yolos.py
              __init__.py
              __pycache__/
                configuration_yolos.cpython-312.pyc
                feature_extraction_yolos.cpython-312.pyc
                image_processing_yolos.cpython-312.pyc
                image_processing_yolos_fast.cpython-312.pyc
                modeling_yolos.cpython-312.pyc
                modular_yolos.cpython-312.pyc
                __init__.cpython-312.pyc
            yoso/
              configuration_yoso.py
              modeling_yoso.py
              __init__.py
              __pycache__/
                configuration_yoso.cpython-312.pyc
                modeling_yoso.cpython-312.pyc
                __init__.cpython-312.pyc
            zamba/
              configuration_zamba.py
              modeling_zamba.py
              __init__.py
              __pycache__/
                configuration_zamba.cpython-312.pyc
                modeling_zamba.cpython-312.pyc
                __init__.cpython-312.pyc
            zamba2/
              configuration_zamba2.py
              modeling_zamba2.py
              modular_zamba2.py
              __init__.py
              __pycache__/
                configuration_zamba2.cpython-312.pyc
                modeling_zamba2.cpython-312.pyc
                modular_zamba2.cpython-312.pyc
                __init__.cpython-312.pyc
            zoedepth/
              configuration_zoedepth.py
              image_processing_zoedepth.py
              modeling_zoedepth.py
              __init__.py
              __pycache__/
                configuration_zoedepth.cpython-312.pyc
                image_processing_zoedepth.cpython-312.pyc
                modeling_zoedepth.cpython-312.pyc
                __init__.cpython-312.pyc
            __pycache__/
              __init__.cpython-312.pyc
          onnx/
            config.py
            convert.py
            features.py
            utils.py
            __init__.py
            __main__.py
            __pycache__/
              config.cpython-312.pyc
              convert.cpython-312.pyc
              features.cpython-312.pyc
              utils.cpython-312.pyc
              __init__.cpython-312.pyc
              __main__.cpython-312.pyc
          pipelines/
            audio_classification.py
            audio_utils.py
            automatic_speech_recognition.py
            base.py
            depth_estimation.py
            document_question_answering.py
            feature_extraction.py
            fill_mask.py
            image_classification.py
            image_feature_extraction.py
            image_segmentation.py
            image_text_to_text.py
            image_to_image.py
            image_to_text.py
            mask_generation.py
            object_detection.py
            pt_utils.py
            question_answering.py
            table_question_answering.py
            text2text_generation.py
            text_classification.py
            text_generation.py
            text_to_audio.py
            token_classification.py
            video_classification.py
            visual_question_answering.py
            zero_shot_audio_classification.py
            zero_shot_classification.py
            zero_shot_image_classification.py
            zero_shot_object_detection.py
            __init__.py
            __pycache__/
              audio_classification.cpython-312.pyc
              audio_utils.cpython-312.pyc
              automatic_speech_recognition.cpython-312.pyc
              base.cpython-312.pyc
              depth_estimation.cpython-312.pyc
              document_question_answering.cpython-312.pyc
              feature_extraction.cpython-312.pyc
              fill_mask.cpython-312.pyc
              image_classification.cpython-312.pyc
              image_feature_extraction.cpython-312.pyc
              image_segmentation.cpython-312.pyc
              image_text_to_text.cpython-312.pyc
              image_to_image.cpython-312.pyc
              image_to_text.cpython-312.pyc
              mask_generation.cpython-312.pyc
              object_detection.cpython-312.pyc
              pt_utils.cpython-312.pyc
              question_answering.cpython-312.pyc
              table_question_answering.cpython-312.pyc
              text2text_generation.cpython-312.pyc
              text_classification.cpython-312.pyc
              text_generation.cpython-312.pyc
              text_to_audio.cpython-312.pyc
              token_classification.cpython-312.pyc
              video_classification.cpython-312.pyc
              visual_question_answering.cpython-312.pyc
              zero_shot_audio_classification.cpython-312.pyc
              zero_shot_classification.cpython-312.pyc
              zero_shot_image_classification.cpython-312.pyc
              zero_shot_object_detection.cpython-312.pyc
              __init__.cpython-312.pyc
          quantizers/
            auto.py
            base.py
            quantizers_utils.py
            quantizer_aqlm.py
            quantizer_auto_round.py
            quantizer_awq.py
            quantizer_bitnet.py
            quantizer_bnb_4bit.py
            quantizer_bnb_8bit.py
            quantizer_compressed_tensors.py
            quantizer_eetq.py
            quantizer_fbgemm_fp8.py
            quantizer_finegrained_fp8.py
            quantizer_gptq.py
            quantizer_higgs.py
            quantizer_hqq.py
            quantizer_quanto.py
            quantizer_quark.py
            quantizer_spqr.py
            quantizer_torchao.py
            quantizer_vptq.py
            __init__.py
            __pycache__/
              auto.cpython-312.pyc
              base.cpython-312.pyc
              quantizers_utils.cpython-312.pyc
              quantizer_aqlm.cpython-312.pyc
              quantizer_auto_round.cpython-312.pyc
              quantizer_awq.cpython-312.pyc
              quantizer_bitnet.cpython-312.pyc
              quantizer_bnb_4bit.cpython-312.pyc
              quantizer_bnb_8bit.cpython-312.pyc
              quantizer_compressed_tensors.cpython-312.pyc
              quantizer_eetq.cpython-312.pyc
              quantizer_fbgemm_fp8.cpython-312.pyc
              quantizer_finegrained_fp8.cpython-312.pyc
              quantizer_gptq.cpython-312.pyc
              quantizer_higgs.cpython-312.pyc
              quantizer_hqq.cpython-312.pyc
              quantizer_quanto.cpython-312.pyc
              quantizer_quark.cpython-312.pyc
              quantizer_spqr.cpython-312.pyc
              quantizer_torchao.cpython-312.pyc
              quantizer_vptq.cpython-312.pyc
              __init__.cpython-312.pyc
          sagemaker/
            trainer_sm.py
            training_args_sm.py
            __init__.py
            __pycache__/
              trainer_sm.cpython-312.pyc
              training_args_sm.cpython-312.pyc
              __init__.cpython-312.pyc
          utils/
            args_doc.py
            attention_visualizer.py
            backbone_utils.py
            bitsandbytes.py
            chat_template_utils.py
            constants.py
            deprecation.py
            doc.py
            dummy_detectron2_objects.py
            dummy_essentia_and_librosa_and_pretty_midi_and_scipy_and_torch_objects.py
            dummy_flax_objects.py
            dummy_music_objects.py
            dummy_pt_objects.py
            dummy_sentencepiece_and_tokenizers_objects.py
            dummy_sentencepiece_objects.py
            dummy_speech_objects.py
            dummy_tensorflow_text_objects.py
            dummy_tf_objects.py
            dummy_timm_and_torchvision_objects.py
            dummy_tokenizers_objects.py
            dummy_torchaudio_objects.py
            dummy_torchvision_objects.py
            dummy_vision_objects.py
            fx.py
            generic.py
            hp_naming.py
            hub.py
            import_utils.py
            logging.py
            model_parallel_utils.py
            notebook.py
            peft_utils.py
            quantization_config.py
            sentencepiece_model_pb2.py
            sentencepiece_model_pb2_new.py
            versions.py
            __init__.py
            __pycache__/
              args_doc.cpython-312.pyc
              attention_visualizer.cpython-312.pyc
              backbone_utils.cpython-312.pyc
              bitsandbytes.cpython-312.pyc
              chat_template_utils.cpython-312.pyc
              constants.cpython-312.pyc
              deprecation.cpython-312.pyc
              doc.cpython-312.pyc
              dummy_detectron2_objects.cpython-312.pyc
              dummy_essentia_and_librosa_and_pretty_midi_and_scipy_and_torch_objects.cpython-312.pyc
              dummy_flax_objects.cpython-312.pyc
              dummy_music_objects.cpython-312.pyc
              dummy_pt_objects.cpython-312.pyc
              dummy_sentencepiece_and_tokenizers_objects.cpython-312.pyc
              dummy_sentencepiece_objects.cpython-312.pyc
              dummy_speech_objects.cpython-312.pyc
              dummy_tensorflow_text_objects.cpython-312.pyc
              dummy_tf_objects.cpython-312.pyc
              dummy_timm_and_torchvision_objects.cpython-312.pyc
              dummy_tokenizers_objects.cpython-312.pyc
              dummy_torchaudio_objects.cpython-312.pyc
              dummy_torchvision_objects.cpython-312.pyc
              dummy_vision_objects.cpython-312.pyc
              fx.cpython-312.pyc
              generic.cpython-312.pyc
              hp_naming.cpython-312.pyc
              hub.cpython-312.pyc
              import_utils.cpython-312.pyc
              logging.cpython-312.pyc
              model_parallel_utils.cpython-312.pyc
              notebook.cpython-312.pyc
              peft_utils.cpython-312.pyc
              quantization_config.cpython-312.pyc
              sentencepiece_model_pb2.cpython-312.pyc
              sentencepiece_model_pb2_new.cpython-312.pyc
              versions.cpython-312.pyc
              __init__.cpython-312.pyc
          __pycache__/
            activations.cpython-312.pyc
            activations_tf.cpython-312.pyc
            audio_utils.cpython-312.pyc
            cache_utils.cpython-312.pyc
            configuration_utils.cpython-312.pyc
            convert_graph_to_onnx.cpython-312.pyc
            convert_pytorch_checkpoint_to_tf2.cpython-312.pyc
            convert_slow_tokenizer.cpython-312.pyc
            convert_slow_tokenizers_checkpoints_to_fast.cpython-312.pyc
            convert_tf_hub_seq_to_seq_bert_to_pytorch.cpython-312.pyc
            debug_utils.cpython-312.pyc
            dependency_versions_check.cpython-312.pyc
            dependency_versions_table.cpython-312.pyc
            dynamic_module_utils.cpython-312.pyc
            feature_extraction_sequence_utils.cpython-312.pyc
            feature_extraction_utils.cpython-312.pyc
            file_utils.cpython-312.pyc
            hf_argparser.cpython-312.pyc
            hyperparameter_search.cpython-312.pyc
            image_processing_base.cpython-312.pyc
            image_processing_utils.cpython-312.pyc
            image_processing_utils_fast.cpython-312.pyc
            image_transforms.cpython-312.pyc
            image_utils.cpython-312.pyc
            keras_callbacks.cpython-312.pyc
            modelcard.cpython-312.pyc
            modeling_attn_mask_utils.cpython-312.pyc
            modeling_flash_attention_utils.cpython-312.pyc
            modeling_flax_outputs.cpython-312.pyc
            modeling_flax_pytorch_utils.cpython-312.pyc
            modeling_flax_utils.cpython-312.pyc
            modeling_gguf_pytorch_utils.cpython-312.pyc
            modeling_layers.cpython-312.pyc
            modeling_outputs.cpython-312.pyc
            modeling_rope_utils.cpython-312.pyc
            modeling_tf_outputs.cpython-312.pyc
            modeling_tf_pytorch_utils.cpython-312.pyc
            modeling_tf_utils.cpython-312.pyc
            modeling_utils.cpython-312.pyc
            model_debugging_utils.cpython-312.pyc
            optimization.cpython-312.pyc
            optimization_tf.cpython-312.pyc
            processing_utils.cpython-312.pyc
            pytorch_utils.cpython-312.pyc
            safetensors_conversion.cpython-312.pyc
            testing_utils.cpython-312.pyc
            tf_utils.cpython-312.pyc
            time_series_utils.cpython-312.pyc
            tokenization_utils.cpython-312.pyc
            tokenization_utils_base.cpython-312.pyc
            tokenization_utils_fast.cpython-312.pyc
            trainer.cpython-312.pyc
            trainer_callback.cpython-312.pyc
            trainer_pt_utils.cpython-312.pyc
            trainer_seq2seq.cpython-312.pyc
            trainer_utils.cpython-312.pyc
            training_args.cpython-312.pyc
            training_args_seq2seq.cpython-312.pyc
            training_args_tf.cpython-312.pyc
            video_processing_utils.cpython-312.pyc
            video_utils.cpython-312.pyc
            __init__.cpython-312.pyc
        transformers-4.52.4.dist-info/
          entry_points.txt
          INSTALLER
          LICENSE
          METADATA
          RECORD
          top_level.txt
          WHEEL
        typing_extensions-4.13.2.dist-info/
          INSTALLER
          METADATA
          RECORD
          WHEEL
          licenses/
            LICENSE
        typing_inspection/
          introspection.py
          py.typed
          typing_objects.py
          typing_objects.pyi
          __init__.py
          __pycache__/
            introspection.cpython-312.pyc
            typing_objects.cpython-312.pyc
            __init__.cpython-312.pyc
        typing_inspection-0.4.1.dist-info/
          INSTALLER
          METADATA
          RECORD
          WHEEL
          licenses/
            LICENSE
        tzdata/
          zones
          __init__.py
          zoneinfo/
            CET
            CST6CDT
            Cuba
            EET
            Egypt
            Eire
            EST
            EST5EDT
            Factory
            GB
            GB-Eire
            GMT
            GMT+0
            GMT-0
            GMT0
            Greenwich
            Hongkong
            HST
            Iceland
            Iran
            iso3166.tab
            Israel
            Jamaica
            Japan
            Kwajalein
            leapseconds
            Libya
            MET
            MST
            MST7MDT
            Navajo
            NZ
            NZ-CHAT
            Poland
            Portugal
            PRC
            PST8PDT
            ROC
            ROK
            Singapore
            Turkey
            tzdata.zi
            UCT
            Universal
            UTC
            W-SU
            WET
            zone.tab
            zone1970.tab
            zonenow.tab
            Zulu
            __init__.py
            Africa/
              Abidjan
              Accra
              Addis_Ababa
              Algiers
              Asmara
              Asmera
              Bamako
              Bangui
              Banjul
              Bissau
              Blantyre
              Brazzaville
              Bujumbura
              Cairo
              Casablanca
              Ceuta
              Conakry
              Dakar
              Dar_es_Salaam
              Djibouti
              Douala
              El_Aaiun
              Freetown
              Gaborone
              Harare
              Johannesburg
              Juba
              Kampala
              Khartoum
              Kigali
              Kinshasa
              Lagos
              Libreville
              Lome
              Luanda
              Lubumbashi
              Lusaka
              Malabo
              Maputo
              Maseru
              Mbabane
              Mogadishu
              Monrovia
              Nairobi
              Ndjamena
              Niamey
              Nouakchott
              Ouagadougou
              Porto-Novo
              Sao_Tome
              Timbuktu
              Tripoli
              Tunis
              Windhoek
              __init__.py
              __pycache__/
                __init__.cpython-312.pyc
            America/
              Adak
              Anchorage
              Anguilla
              Antigua
              Araguaina
              Aruba
              Asuncion
              Atikokan
              Atka
              Bahia
              Bahia_Banderas
              Barbados
              Belem
              Belize
              Blanc-Sablon
              Boa_Vista
              Bogota
              Boise
              Buenos_Aires
              Cambridge_Bay
              Campo_Grande
              Cancun
              Caracas
              Catamarca
              Cayenne
              Cayman
              Chicago
              Chihuahua
              Ciudad_Juarez
              Coral_Harbour
              Cordoba
              Costa_Rica
              Coyhaique
              Creston
              Cuiaba
              Curacao
              Danmarkshavn
              Dawson
              Dawson_Creek
              Denver
              Detroit
              Dominica
              Edmonton
              Eirunepe
              El_Salvador
              Ensenada
              Fortaleza
              Fort_Nelson
              Fort_Wayne
              Glace_Bay
              Godthab
              Goose_Bay
              Grand_Turk
              Grenada
              Guadeloupe
              Guatemala
              Guayaquil
              Guyana
              Halifax
              Havana
              Hermosillo
              Indianapolis
              Inuvik
              Iqaluit
              Jamaica
              Jujuy
              Juneau
              Knox_IN
              Kralendijk
              La_Paz
              Lima
              Los_Angeles
              Louisville
              Lower_Princes
              Maceio
              Managua
              Manaus
              Marigot
              Martinique
              Matamoros
              Mazatlan
              Mendoza
              Menominee
              Merida
              Metlakatla
              Mexico_City
              Miquelon
              Moncton
              Monterrey
              Montevideo
              Montreal
              Montserrat
              Nassau
              New_York
              Nipigon
              Nome
              Noronha
              Nuuk
              Ojinaga
              Panama
              Pangnirtung
              Paramaribo
              Phoenix
              Port-au-Prince
              Porto_Acre
              Porto_Velho
              Port_of_Spain
              Puerto_Rico
              Punta_Arenas
              Rainy_River
              Rankin_Inlet
              Recife
              Regina
              Resolute
              Rio_Branco
              Rosario
              Santarem
              Santa_Isabel
              Santiago
              Santo_Domingo
              Sao_Paulo
              Scoresbysund
              Shiprock
              Sitka
              St_Barthelemy
              St_Johns
              St_Kitts
              St_Lucia
              St_Thomas
              St_Vincent
              Swift_Current
              Tegucigalpa
              Thule
              Thunder_Bay
              Tijuana
              Toronto
              Tortola
              Vancouver
              Virgin
              Whitehorse
              Winnipeg
              Yakutat
              Yellowknife
              __init__.py
              Argentina/
                Buenos_Aires
                Catamarca
                ComodRivadavia
                Cordoba
                Jujuy
                La_Rioja
                Mendoza
                Rio_Gallegos
                Salta
                San_Juan
                San_Luis
                Tucuman
                Ushuaia
                __init__.py
                __pycache__/
                  __init__.cpython-312.pyc
              Indiana/
                Indianapolis
                Knox
                Marengo
                Petersburg
                Tell_City
                Vevay
                Vincennes
                Winamac
                __init__.py
                __pycache__/
                  __init__.cpython-312.pyc
              Kentucky/
                Louisville
                Monticello
                __init__.py
                __pycache__/
                  __init__.cpython-312.pyc
              North_Dakota/
                Beulah
                Center
                New_Salem
                __init__.py
                __pycache__/
                  __init__.cpython-312.pyc
              __pycache__/
                __init__.cpython-312.pyc
            Antarctica/
              Casey
              Davis
              DumontDUrville
              Macquarie
              Mawson
              McMurdo
              Palmer
              Rothera
              South_Pole
              Syowa
              Troll
              Vostok
              __init__.py
              __pycache__/
                __init__.cpython-312.pyc
            Arctic/
              Longyearbyen
              __init__.py
              __pycache__/
                __init__.cpython-312.pyc
            Asia/
              Aden
              Almaty
              Amman
              Anadyr
              Aqtau
              Aqtobe
              Ashgabat
              Ashkhabad
              Atyrau
              Baghdad
              Bahrain
              Baku
              Bangkok
              Barnaul
              Beirut
              Bishkek
              Brunei
              Calcutta
              Chita
              Choibalsan
              Chongqing
              Chungking
              Colombo
              Dacca
              Damascus
              Dhaka
              Dili
              Dubai
              Dushanbe
              Famagusta
              Gaza
              Harbin
              Hebron
              Hong_Kong
              Hovd
              Ho_Chi_Minh
              Irkutsk
              Istanbul
              Jakarta
              Jayapura
              Jerusalem
              Kabul
              Kamchatka
              Karachi
              Kashgar
              Kathmandu
              Katmandu
              Khandyga
              Kolkata
              Krasnoyarsk
              Kuala_Lumpur
              Kuching
              Kuwait
              Macao
              Macau
              Magadan
              Makassar
              Manila
              Muscat
              Nicosia
              Novokuznetsk
              Novosibirsk
              Omsk
              Oral
              Phnom_Penh
              Pontianak
              Pyongyang
              Qatar
              Qostanay
              Qyzylorda
              Rangoon
              Riyadh
              Saigon
              Sakhalin
              Samarkand
              Seoul
              Shanghai
              Singapore
              Srednekolymsk
              Taipei
              Tashkent
              Tbilisi
              Tehran
              Tel_Aviv
              Thimbu
              Thimphu
              Tokyo
              Tomsk
              Ujung_Pandang
              Ulaanbaatar
              Ulan_Bator
              Urumqi
              Ust-Nera
              Vientiane
              Vladivostok
              Yakutsk
              Yangon
              Yekaterinburg
              Yerevan
              __init__.py
              __pycache__/
                __init__.cpython-312.pyc
            Atlantic/
              Azores
              Bermuda
              Canary
              Cape_Verde
              Faeroe
              Faroe
              Jan_Mayen
              Madeira
              Reykjavik
              South_Georgia
              Stanley
              St_Helena
              __init__.py
              __pycache__/
                __init__.cpython-312.pyc
            Australia/
              ACT
              Adelaide
              Brisbane
              Broken_Hill
              Canberra
              Currie
              Darwin
              Eucla
              Hobart
              LHI
              Lindeman
              Lord_Howe
              Melbourne
              North
              NSW
              Perth
              Queensland
              South
              Sydney
              Tasmania
              Victoria
              West
              Yancowinna
              __init__.py
              __pycache__/
                __init__.cpython-312.pyc
            Brazil/
              Acre
              DeNoronha
              East
              West
              __init__.py
              __pycache__/
                __init__.cpython-312.pyc
            Canada/
              Atlantic
              Central
              Eastern
              Mountain
              Newfoundland
              Pacific
              Saskatchewan
              Yukon
              __init__.py
              __pycache__/
                __init__.cpython-312.pyc
            Chile/
              Continental
              EasterIsland
              __init__.py
              __pycache__/
                __init__.cpython-312.pyc
            Etc/
              GMT
              GMT+0
              GMT+1
              GMT+10
              GMT+11
              GMT+12
              GMT+2
              GMT+3
              GMT+4
              GMT+5
              GMT+6
              GMT+7
              GMT+8
              GMT+9
              GMT-0
              GMT-1
              GMT-10
              GMT-11
              GMT-12
              GMT-13
              GMT-14
              GMT-2
              GMT-3
              GMT-4
              GMT-5
              GMT-6
              GMT-7
              GMT-8
              GMT-9
              GMT0
              Greenwich
              UCT
              Universal
              UTC
              Zulu
              __init__.py
              __pycache__/
                __init__.cpython-312.pyc
            Europe/
              Amsterdam
              Andorra
              Astrakhan
              Athens
              Belfast
              Belgrade
              Berlin
              Bratislava
              Brussels
              Bucharest
              Budapest
              Busingen
              Chisinau
              Copenhagen
              Dublin
              Gibraltar
              Guernsey
              Helsinki
              Isle_of_Man
              Istanbul
              Jersey
              Kaliningrad
              Kiev
              Kirov
              Kyiv
              Lisbon
              Ljubljana
              London
              Luxembourg
              Madrid
              Malta
              Mariehamn
              Minsk
              Monaco
              Moscow
              Nicosia
              Oslo
              Paris
              Podgorica
              Prague
              Riga
              Rome
              Samara
              San_Marino
              Sarajevo
              Saratov
              Simferopol
              Skopje
              Sofia
              Stockholm
              Tallinn
              Tirane
              Tiraspol
              Ulyanovsk
              Uzhgorod
              Vaduz
              Vatican
              Vienna
              Vilnius
              Volgograd
              Warsaw
              Zagreb
              Zaporozhye
              Zurich
              __init__.py
              __pycache__/
                __init__.cpython-312.pyc
            Indian/
              Antananarivo
              Chagos
              Christmas
              Cocos
              Comoro
              Kerguelen
              Mahe
              Maldives
              Mauritius
              Mayotte
              Reunion
              __init__.py
              __pycache__/
                __init__.cpython-312.pyc
            Mexico/
              BajaNorte
              BajaSur
              General
              __init__.py
              __pycache__/
                __init__.cpython-312.pyc
            Pacific/
              Apia
              Auckland
              Bougainville
              Chatham
              Chuuk
              Easter
              Efate
              Enderbury
              Fakaofo
              Fiji
              Funafuti
              Galapagos
              Gambier
              Guadalcanal
              Guam
              Honolulu
              Johnston
              Kanton
              Kiritimati
              Kosrae
              Kwajalein
              Majuro
              Marquesas
              Midway
              Nauru
              Niue
              Norfolk
              Noumea
              Pago_Pago
              Palau
              Pitcairn
              Pohnpei
              Ponape
              Port_Moresby
              Rarotonga
              Saipan
              Samoa
              Tahiti
              Tarawa
              Tongatapu
              Truk
              Wake
              Wallis
              Yap
              __init__.py
              __pycache__/
                __init__.cpython-312.pyc
            US/
              Alaska
              Aleutian
              Arizona
              Central
              East-Indiana
              Eastern
              Hawaii
              Indiana-Starke
              Michigan
              Mountain
              Pacific
              Samoa
              __init__.py
              __pycache__/
                __init__.cpython-312.pyc
            __pycache__/
              __init__.cpython-312.pyc
          __pycache__/
            __init__.cpython-312.pyc
        tzdata-2025.2.dist-info/
          INSTALLER
          METADATA
          RECORD
          top_level.txt
          WHEEL
          licenses/
            LICENSE
            licenses/
              LICENSE_APACHE
        ultralytics/
          __init__.py
          assets/
            bus.jpg
            zidane.jpg
          cfg/
            default.yaml
            __init__.py
            datasets/
              african-wildlife.yaml
              Argoverse.yaml
              brain-tumor.yaml
              carparts-seg.yaml
              coco-pose.yaml
              coco.yaml
              coco128-seg.yaml
              coco128.yaml
              coco8-grayscale.yaml
              coco8-multispectral.yaml
              coco8-pose.yaml
              coco8-seg.yaml
              coco8.yaml
              crack-seg.yaml
              dog-pose.yaml
              dota8-multispectral.yaml
              dota8.yaml
              DOTAv1.5.yaml
              DOTAv1.yaml
              GlobalWheat2020.yaml
              hand-keypoints.yaml
              HomeObjects-3K.yaml
              ImageNet.yaml
              lvis.yaml
              medical-pills.yaml
              Objects365.yaml
              open-images-v7.yaml
              package-seg.yaml
              signature.yaml
              SKU-110K.yaml
              tiger-pose.yaml
              VisDrone.yaml
              VOC.yaml
              xView.yaml
            models/
              11/
                yolo11-cls-resnet18.yaml
                yolo11-cls.yaml
                yolo11-obb.yaml
                yolo11-pose.yaml
                yolo11-seg.yaml
                yolo11.yaml
                yoloe-11-seg.yaml
                yoloe-11.yaml
              12/
                yolo12-cls.yaml
                yolo12-obb.yaml
                yolo12-pose.yaml
                yolo12-seg.yaml
                yolo12.yaml
              rt-detr/
                rtdetr-l.yaml
                rtdetr-resnet101.yaml
                rtdetr-resnet50.yaml
                rtdetr-x.yaml
              v10/
                yolov10b.yaml
                yolov10l.yaml
                yolov10m.yaml
                yolov10n.yaml
                yolov10s.yaml
                yolov10x.yaml
              v3/
                yolov3-spp.yaml
                yolov3-tiny.yaml
                yolov3.yaml
              v5/
                yolov5-p6.yaml
                yolov5.yaml
              v6/
                yolov6.yaml
              v8/
                yoloe-v8-seg.yaml
                yoloe-v8.yaml
                yolov8-cls-resnet101.yaml
                yolov8-cls-resnet50.yaml
                yolov8-cls.yaml
                yolov8-ghost-p2.yaml
                yolov8-ghost-p6.yaml
                yolov8-ghost.yaml
                yolov8-obb.yaml
                yolov8-p2.yaml
                yolov8-p6.yaml
                yolov8-pose-p6.yaml
                yolov8-pose.yaml
                yolov8-rtdetr.yaml
                yolov8-seg-p6.yaml
                yolov8-seg.yaml
                yolov8-world.yaml
                yolov8-worldv2.yaml
                yolov8.yaml
              v9/
                yolov9c-seg.yaml
                yolov9c.yaml
                yolov9e-seg.yaml
                yolov9e.yaml
                yolov9m.yaml
                yolov9s.yaml
                yolov9t.yaml
            trackers/
              botsort.yaml
              bytetrack.yaml
            __pycache__/
              __init__.cpython-312.pyc
          data/
            annotator.py
            augment.py
            base.py
            build.py
            converter.py
            dataset.py
            loaders.py
            split.py
            split_dota.py
            utils.py
            __init__.py
            scripts/
              download_weights.sh
              get_coco.sh
              get_coco128.sh
              get_imagenet.sh
            __pycache__/
              annotator.cpython-312.pyc
              augment.cpython-312.pyc
              base.cpython-312.pyc
              build.cpython-312.pyc
              converter.cpython-312.pyc
              dataset.cpython-312.pyc
              loaders.cpython-312.pyc
              split.cpython-312.pyc
              split_dota.cpython-312.pyc
              utils.cpython-312.pyc
              __init__.cpython-312.pyc
          engine/
            exporter.py
            model.py
            predictor.py
            results.py
            trainer.py
            tuner.py
            validator.py
            __init__.py
            __pycache__/
              exporter.cpython-312.pyc
              model.cpython-312.pyc
              predictor.cpython-312.pyc
              results.cpython-312.pyc
              trainer.cpython-312.pyc
              tuner.cpython-312.pyc
              validator.cpython-312.pyc
              __init__.cpython-312.pyc
          hub/
            auth.py
            session.py
            utils.py
            __init__.py
            google/
              __init__.py
              __pycache__/
                __init__.cpython-312.pyc
            __pycache__/
              auth.cpython-312.pyc
              session.cpython-312.pyc
              utils.cpython-312.pyc
              __init__.cpython-312.pyc
          models/
            __init__.py
            fastsam/
              model.py
              predict.py
              utils.py
              val.py
              __init__.py
              __pycache__/
                model.cpython-312.pyc
                predict.cpython-312.pyc
                utils.cpython-312.pyc
                val.cpython-312.pyc
                __init__.cpython-312.pyc
            nas/
              model.py
              predict.py
              val.py
              __init__.py
              __pycache__/
                model.cpython-312.pyc
                predict.cpython-312.pyc
                val.cpython-312.pyc
                __init__.cpython-312.pyc
            rtdetr/
              model.py
              predict.py
              train.py
              val.py
              __init__.py
              __pycache__/
                model.cpython-312.pyc
                predict.cpython-312.pyc
                train.cpython-312.pyc
                val.cpython-312.pyc
                __init__.cpython-312.pyc
            sam/
              amg.py
              build.py
              model.py
              predict.py
              __init__.py
              modules/
                blocks.py
                decoders.py
                encoders.py
                memory_attention.py
                sam.py
                tiny_encoder.py
                transformer.py
                utils.py
                __init__.py
                __pycache__/
                  blocks.cpython-312.pyc
                  decoders.cpython-312.pyc
                  encoders.cpython-312.pyc
                  memory_attention.cpython-312.pyc
                  sam.cpython-312.pyc
                  tiny_encoder.cpython-312.pyc
                  transformer.cpython-312.pyc
                  utils.cpython-312.pyc
                  __init__.cpython-312.pyc
              __pycache__/
                amg.cpython-312.pyc
                build.cpython-312.pyc
                model.cpython-312.pyc
                predict.cpython-312.pyc
                __init__.cpython-312.pyc
            utils/
              loss.py
              ops.py
              __init__.py
              __pycache__/
                loss.cpython-312.pyc
                ops.cpython-312.pyc
                __init__.cpython-312.pyc
            yolo/
              model.py
              __init__.py
              classify/
                predict.py
                train.py
                val.py
                __init__.py
                __pycache__/
                  predict.cpython-312.pyc
                  train.cpython-312.pyc
                  val.cpython-312.pyc
                  __init__.cpython-312.pyc
              detect/
                predict.py
                train.py
                val.py
                __init__.py
                __pycache__/
                  predict.cpython-312.pyc
                  train.cpython-312.pyc
                  val.cpython-312.pyc
                  __init__.cpython-312.pyc
              obb/
                predict.py
                train.py
                val.py
                __init__.py
                __pycache__/
                  predict.cpython-312.pyc
                  train.cpython-312.pyc
                  val.cpython-312.pyc
                  __init__.cpython-312.pyc
              pose/
                predict.py
                train.py
                val.py
                __init__.py
                __pycache__/
                  predict.cpython-312.pyc
                  train.cpython-312.pyc
                  val.cpython-312.pyc
                  __init__.cpython-312.pyc
              segment/
                predict.py
                train.py
                val.py
                __init__.py
                __pycache__/
                  predict.cpython-312.pyc
                  train.cpython-312.pyc
                  val.cpython-312.pyc
                  __init__.cpython-312.pyc
              world/
                train.py
                train_world.py
                __init__.py
                __pycache__/
                  train.cpython-312.pyc
                  train_world.cpython-312.pyc
                  __init__.cpython-312.pyc
              yoloe/
                predict.py
                train.py
                train_seg.py
                val.py
                __init__.py
                __pycache__/
                  predict.cpython-312.pyc
                  train.cpython-312.pyc
                  train_seg.cpython-312.pyc
                  val.cpython-312.pyc
                  __init__.cpython-312.pyc
              __pycache__/
                model.cpython-312.pyc
                __init__.cpython-312.pyc
            __pycache__/
              __init__.cpython-312.pyc
          nn/
            autobackend.py
            tasks.py
            text_model.py
            __init__.py
            modules/
              activation.py
              block.py
              conv.py
              head.py
              transformer.py
              utils.py
              __init__.py
              __pycache__/
                activation.cpython-312.pyc
                block.cpython-312.pyc
                conv.cpython-312.pyc
                head.cpython-312.pyc
                transformer.cpython-312.pyc
                utils.cpython-312.pyc
                __init__.cpython-312.pyc
            __pycache__/
              autobackend.cpython-312.pyc
              tasks.cpython-312.pyc
              text_model.cpython-312.pyc
              __init__.cpython-312.pyc
          solutions/
            ai_gym.py
            analytics.py
            config.py
            distance_calculation.py
            heatmap.py
            instance_segmentation.py
            object_blurrer.py
            object_counter.py
            object_cropper.py
            parking_management.py
            queue_management.py
            region_counter.py
            security_alarm.py
            similarity_search.py
            solutions.py
            speed_estimation.py
            streamlit_inference.py
            trackzone.py
            vision_eye.py
            __init__.py
            templates/
              similarity-search.html
            __pycache__/
              ai_gym.cpython-312.pyc
              analytics.cpython-312.pyc
              config.cpython-312.pyc
              distance_calculation.cpython-312.pyc
              heatmap.cpython-312.pyc
              instance_segmentation.cpython-312.pyc
              object_blurrer.cpython-312.pyc
              object_counter.cpython-312.pyc
              object_cropper.cpython-312.pyc
              parking_management.cpython-312.pyc
              queue_management.cpython-312.pyc
              region_counter.cpython-312.pyc
              security_alarm.cpython-312.pyc
              similarity_search.cpython-312.pyc
              solutions.cpython-312.pyc
              speed_estimation.cpython-312.pyc
              streamlit_inference.cpython-312.pyc
              trackzone.cpython-312.pyc
              vision_eye.cpython-312.pyc
              __init__.cpython-312.pyc
          trackers/
            basetrack.py
            bot_sort.py
            byte_tracker.py
            track.py
            __init__.py
            utils/
              gmc.py
              kalman_filter.py
              matching.py
              __init__.py
              __pycache__/
                gmc.cpython-312.pyc
                kalman_filter.cpython-312.pyc
                matching.cpython-312.pyc
                __init__.cpython-312.pyc
            __pycache__/
              basetrack.cpython-312.pyc
              bot_sort.cpython-312.pyc
              byte_tracker.cpython-312.pyc
              track.cpython-312.pyc
              __init__.cpython-312.pyc
          utils/
            autobatch.py
            autodevice.py
            benchmarks.py
            checks.py
            dist.py
            downloads.py
            errors.py
            export.py
            files.py
            instance.py
            loss.py
            metrics.py
            ops.py
            patches.py
            plotting.py
            tal.py
            torch_utils.py
            triton.py
            tuner.py
            __init__.py
            callbacks/
              base.py
              clearml.py
              comet.py
              dvc.py
              hub.py
              mlflow.py
              neptune.py
              raytune.py
              tensorboard.py
              wb.py
              __init__.py
              __pycache__/
                base.cpython-312.pyc
                clearml.cpython-312.pyc
                comet.cpython-312.pyc
                dvc.cpython-312.pyc
                hub.cpython-312.pyc
                mlflow.cpython-312.pyc
                neptune.cpython-312.pyc
                raytune.cpython-312.pyc
                tensorboard.cpython-312.pyc
                wb.cpython-312.pyc
                __init__.cpython-312.pyc
            __pycache__/
              autobatch.cpython-312.pyc
              autodevice.cpython-312.pyc
              benchmarks.cpython-312.pyc
              checks.cpython-312.pyc
              dist.cpython-312.pyc
              downloads.cpython-312.pyc
              errors.cpython-312.pyc
              export.cpython-312.pyc
              files.cpython-312.pyc
              instance.cpython-312.pyc
              loss.cpython-312.pyc
              metrics.cpython-312.pyc
              ops.cpython-312.pyc
              patches.cpython-312.pyc
              plotting.cpython-312.pyc
              tal.cpython-312.pyc
              torch_utils.cpython-312.pyc
              triton.cpython-312.pyc
              tuner.cpython-312.pyc
              __init__.cpython-312.pyc
          __pycache__/
            __init__.cpython-312.pyc
        ultralytics-8.3.146.dist-info/
          entry_points.txt
          INSTALLER
          METADATA
          RECORD
          REQUESTED
          top_level.txt
          WHEEL
          licenses/
            LICENSE
        ultralytics_thop-2.0.14.dist-info/
          INSTALLER
          LICENSE
          METADATA
          RECORD
          top_level.txt
          WHEEL
        urllib3/
          connection.py
          connectionpool.py
          exceptions.py
          fields.py
          filepost.py
          poolmanager.py
          py.typed
          response.py
          _base_connection.py
          _collections.py
          _request_methods.py
          _version.py
          __init__.py
          contrib/
            pyopenssl.py
            socks.py
            __init__.py
            emscripten/
              connection.py
              emscripten_fetch_worker.js
              fetch.py
              request.py
              response.py
              __init__.py
              __pycache__/
                connection.cpython-312.pyc
                fetch.cpython-312.pyc
                request.cpython-312.pyc
                response.cpython-312.pyc
                __init__.cpython-312.pyc
            __pycache__/
              pyopenssl.cpython-312.pyc
              socks.cpython-312.pyc
              __init__.cpython-312.pyc
          http2/
            connection.py
            probe.py
            __init__.py
            __pycache__/
              connection.cpython-312.pyc
              probe.cpython-312.pyc
              __init__.cpython-312.pyc
          util/
            connection.py
            proxy.py
            request.py
            response.py
            retry.py
            ssltransport.py
            ssl_.py
            ssl_match_hostname.py
            timeout.py
            url.py
            util.py
            wait.py
            __init__.py
            __pycache__/
              connection.cpython-312.pyc
              proxy.cpython-312.pyc
              request.cpython-312.pyc
              response.cpython-312.pyc
              retry.cpython-312.pyc
              ssltransport.cpython-312.pyc
              ssl_.cpython-312.pyc
              ssl_match_hostname.cpython-312.pyc
              timeout.cpython-312.pyc
              url.cpython-312.pyc
              util.cpython-312.pyc
              wait.cpython-312.pyc
              __init__.cpython-312.pyc
          __pycache__/
            connection.cpython-312.pyc
            connectionpool.cpython-312.pyc
            exceptions.cpython-312.pyc
            fields.cpython-312.pyc
            filepost.cpython-312.pyc
            poolmanager.cpython-312.pyc
            response.cpython-312.pyc
            _base_connection.cpython-312.pyc
            _collections.cpython-312.pyc
            _request_methods.cpython-312.pyc
            _version.cpython-312.pyc
            __init__.cpython-312.pyc
        urllib3-2.4.0.dist-info/
          INSTALLER
          METADATA
          RECORD
          WHEEL
          licenses/
            LICENSE.txt
        vosk/
          libgcc_s_seh-1.dll
          libstdc++-6.dll
          libvosk.dll
          libwinpthread-1.dll
          vosk_cffi.py
          __init__.py
          transcriber/
            cli.py
            transcriber.py
            __init__.py
            __pycache__/
              cli.cpython-312.pyc
              transcriber.cpython-312.pyc
              __init__.cpython-312.pyc
          __pycache__/
            vosk_cffi.cpython-312.pyc
            __init__.cpython-312.pyc
        vosk-0.3.45.dist-info/
          entry_points.txt
          INSTALLER
          METADATA
          RECORD
          REQUESTED
          top_level.txt
          WHEEL
        watchdog/
          events.py
          py.typed
          version.py
          watchmedo.py
          __init__.py
          observers/
            api.py
            fsevents.py
            fsevents2.py
            inotify.py
            inotify_buffer.py
            inotify_c.py
            kqueue.py
            polling.py
            read_directory_changes.py
            winapi.py
            __init__.py
            __pycache__/
              api.cpython-312.pyc
              fsevents.cpython-312.pyc
              fsevents2.cpython-312.pyc
              inotify.cpython-312.pyc
              inotify_buffer.cpython-312.pyc
              inotify_c.cpython-312.pyc
              kqueue.cpython-312.pyc
              polling.cpython-312.pyc
              read_directory_changes.cpython-312.pyc
              winapi.cpython-312.pyc
              __init__.cpython-312.pyc
          tricks/
            __init__.py
            __pycache__/
              __init__.cpython-312.pyc
          utils/
            bricks.py
            delayed_queue.py
            dirsnapshot.py
            echo.py
            event_debouncer.py
            patterns.py
            platform.py
            process_watcher.py
            __init__.py
            __pycache__/
              bricks.cpython-312.pyc
              delayed_queue.cpython-312.pyc
              dirsnapshot.cpython-312.pyc
              echo.cpython-312.pyc
              event_debouncer.cpython-312.pyc
              patterns.cpython-312.pyc
              platform.cpython-312.pyc
              process_watcher.cpython-312.pyc
              __init__.cpython-312.pyc
          __pycache__/
            events.cpython-312.pyc
            version.cpython-312.pyc
            watchmedo.cpython-312.pyc
            __init__.cpython-312.pyc
        watchdog-6.0.0.dist-info/
          AUTHORS
          COPYING
          entry_points.txt
          INSTALLER
          LICENSE
          METADATA
          RECORD
          top_level.txt
          WHEEL
        websockets/
          auth.py
          cli.py
          client.py
          connection.py
          datastructures.py
          exceptions.py
          frames.py
          headers.py
          http.py
          http11.py
          imports.py
          protocol.py
          py.typed
          server.py
          speedups.c
          speedups.cp312-win_amd64.pyd
          speedups.pyi
          streams.py
          typing.py
          uri.py
          utils.py
          version.py
          __init__.py
          __main__.py
          asyncio/
            async_timeout.py
            client.py
            compatibility.py
            connection.py
            messages.py
            router.py
            server.py
            __init__.py
            __pycache__/
              async_timeout.cpython-312.pyc
              client.cpython-312.pyc
              compatibility.cpython-312.pyc
              connection.cpython-312.pyc
              messages.cpython-312.pyc
              router.cpython-312.pyc
              server.cpython-312.pyc
              __init__.cpython-312.pyc
          extensions/
            base.py
            permessage_deflate.py
            __init__.py
            __pycache__/
              base.cpython-312.pyc
              permessage_deflate.cpython-312.pyc
              __init__.cpython-312.pyc
          legacy/
            auth.py
            client.py
            exceptions.py
            framing.py
            handshake.py
            http.py
            protocol.py
            server.py
            __init__.py
            __pycache__/
              auth.cpython-312.pyc
              client.cpython-312.pyc
              exceptions.cpython-312.pyc
              framing.cpython-312.pyc
              handshake.cpython-312.pyc
              http.cpython-312.pyc
              protocol.cpython-312.pyc
              server.cpython-312.pyc
              __init__.cpython-312.pyc
          sync/
            client.py
            connection.py
            messages.py
            router.py
            server.py
            utils.py
            __init__.py
            __pycache__/
              client.cpython-312.pyc
              connection.cpython-312.pyc
              messages.cpython-312.pyc
              router.cpython-312.pyc
              server.cpython-312.pyc
              utils.cpython-312.pyc
              __init__.cpython-312.pyc
          __pycache__/
            auth.cpython-312.pyc
            cli.cpython-312.pyc
            client.cpython-312.pyc
            connection.cpython-312.pyc
            datastructures.cpython-312.pyc
            exceptions.cpython-312.pyc
            frames.cpython-312.pyc
            headers.cpython-312.pyc
            http.cpython-312.pyc
            http11.cpython-312.pyc
            imports.cpython-312.pyc
            protocol.cpython-312.pyc
            server.cpython-312.pyc
            streams.cpython-312.pyc
            typing.cpython-312.pyc
            uri.cpython-312.pyc
            utils.cpython-312.pyc
            version.cpython-312.pyc
            __init__.cpython-312.pyc
            __main__.cpython-312.pyc
        websockets-15.0.1.dist-info/
          entry_points.txt
          INSTALLER
          LICENSE
          METADATA
          RECORD
          top_level.txt
          WHEEL
        whisper-1.1.10.dist-info/
          INSTALLER
          METADATA
          RECORD
          REQUESTED
          top_level.txt
          WHEEL
          licenses/
            LICENSE
        win32/
          license.txt
          mmapfile.pyd
          odbc.pyd
          perfmon.pyd
          perfmondata.dll
          pythonservice.exe
          servicemanager.pyd
          timer.pyd
          win32api.pyd
          win32clipboard.pyd
          win32console.pyd
          win32cred.pyd
          win32crypt.pyd
          win32event.pyd
          win32evtlog.pyd
          win32file.pyd
          win32gui.pyd
          win32help.pyd
          win32inet.pyd
          win32job.pyd
          win32lz.pyd
          win32net.pyd
          win32pdh.pyd
          win32pipe.pyd
          win32print.pyd
          win32process.pyd
          win32profile.pyd
          win32ras.pyd
          win32security.pyd
          win32service.pyd
          win32trace.pyd
          win32transaction.pyd
          win32ts.pyd
          win32wnet.pyd
          winxpgui.py
          _win32sysloader.pyd
          _winxptheme.pyd
          Demos/
            BackupRead_BackupWrite.py
            BackupSeek_streamheaders.py
            CopyFileEx.py
            CreateFileTransacted_MiniVersion.py
            desktopmanager.py
            eventLogDemo.py
            EvtFormatMessage.py
            EvtSubscribe_pull.py
            EvtSubscribe_push.py
            FileSecurityTest.py
            getfilever.py
            GetSaveFileName.py
            mmapfile_demo.py
            NetValidatePasswordPolicy.py
            OpenEncryptedFileRaw.py
            print_desktop.py
            rastest.py
            RegCreateKeyTransacted.py
            RegRestoreKey.py
            SystemParametersInfo.py
            timer_demo.py
            win32clipboardDemo.py
            win32clipboard_bitmapdemo.py
            win32comport_demo.py
            win32console_demo.py
            win32cred_demo.py
            win32fileDemo.py
            win32gui_demo.py
            win32gui_devicenotify.py
            win32gui_dialog.py
            win32gui_menu.py
            win32gui_taskbar.py
            win32netdemo.py
            win32rcparser_demo.py
            win32servicedemo.py
            win32ts_logoff_disconnected.py
            winprocess.py
            c_extension/
              setup.py
              __pycache__/
                setup.cpython-312.pyc
            dde/
              ddeclient.py
              ddeserver.py
              __pycache__/
                ddeclient.cpython-312.pyc
                ddeserver.cpython-312.pyc
            images/
              frowny.bmp
              smiley.bmp
            pipes/
              cat.py
              runproc.py
              __pycache__/
                cat.cpython-312.pyc
                runproc.cpython-312.pyc
            security/
              account_rights.py
              explicit_entries.py
              GetTokenInformation.py
              get_policy_info.py
              list_rights.py
              localized_names.py
              lsaregevent.py
              lsastore.py
              query_information.py
              regsave_sa.py
              regsecurity.py
              sa_inherit.py
              security_enums.py
              setkernelobjectsecurity.py
              setnamedsecurityinfo.py
              setsecurityinfo.py
              setuserobjectsecurity.py
              set_file_audit.py
              set_file_owner.py
              set_policy_info.py
              sspi/
                fetch_url.py
                simple_auth.py
                socket_server.py
                validate_password.py
                __pycache__/
                  fetch_url.cpython-312.pyc
                  simple_auth.cpython-312.pyc
                  socket_server.cpython-312.pyc
                  validate_password.cpython-312.pyc
              __pycache__/
                account_rights.cpython-312.pyc
                explicit_entries.cpython-312.pyc
                GetTokenInformation.cpython-312.pyc
                get_policy_info.cpython-312.pyc
                list_rights.cpython-312.pyc
                localized_names.cpython-312.pyc
                lsaregevent.cpython-312.pyc
                lsastore.cpython-312.pyc
                query_information.cpython-312.pyc
                regsave_sa.cpython-312.pyc
                regsecurity.cpython-312.pyc
                sa_inherit.cpython-312.pyc
                security_enums.cpython-312.pyc
                setkernelobjectsecurity.cpython-312.pyc
                setnamedsecurityinfo.cpython-312.pyc
                setsecurityinfo.cpython-312.pyc
                setuserobjectsecurity.cpython-312.pyc
                set_file_audit.cpython-312.pyc
                set_file_owner.cpython-312.pyc
                set_policy_info.cpython-312.pyc
            service/
              nativePipeTestService.py
              pipeTestService.py
              pipeTestServiceClient.py
              serviceEvents.py
              __pycache__/
                nativePipeTestService.cpython-312.pyc
                pipeTestService.cpython-312.pyc
                pipeTestServiceClient.cpython-312.pyc
                serviceEvents.cpython-312.pyc
            win32wnet/
              testwnet.py
              winnetwk.py
              __pycache__/
                testwnet.cpython-312.pyc
                winnetwk.cpython-312.pyc
            __pycache__/
              BackupRead_BackupWrite.cpython-312.pyc
              BackupSeek_streamheaders.cpython-312.pyc
              CopyFileEx.cpython-312.pyc
              CreateFileTransacted_MiniVersion.cpython-312.pyc
              desktopmanager.cpython-312.pyc
              eventLogDemo.cpython-312.pyc
              EvtFormatMessage.cpython-312.pyc
              EvtSubscribe_pull.cpython-312.pyc
              EvtSubscribe_push.cpython-312.pyc
              FileSecurityTest.cpython-312.pyc
              getfilever.cpython-312.pyc
              GetSaveFileName.cpython-312.pyc
              mmapfile_demo.cpython-312.pyc
              NetValidatePasswordPolicy.cpython-312.pyc
              OpenEncryptedFileRaw.cpython-312.pyc
              print_desktop.cpython-312.pyc
              rastest.cpython-312.pyc
              RegCreateKeyTransacted.cpython-312.pyc
              RegRestoreKey.cpython-312.pyc
              SystemParametersInfo.cpython-312.pyc
              timer_demo.cpython-312.pyc
              win32clipboardDemo.cpython-312.pyc
              win32clipboard_bitmapdemo.cpython-312.pyc
              win32comport_demo.cpython-312.pyc
              win32console_demo.cpython-312.pyc
              win32cred_demo.cpython-312.pyc
              win32fileDemo.cpython-312.pyc
              win32gui_demo.cpython-312.pyc
              win32gui_devicenotify.cpython-312.pyc
              win32gui_dialog.cpython-312.pyc
              win32gui_menu.cpython-312.pyc
              win32gui_taskbar.cpython-312.pyc
              win32netdemo.cpython-312.pyc
              win32rcparser_demo.cpython-312.pyc
              win32servicedemo.cpython-312.pyc
              win32ts_logoff_disconnected.cpython-312.pyc
              winprocess.cpython-312.pyc
          include/
            PyWinTypes.h
          lib/
            afxres.py
            commctrl.py
            mmsystem.py
            netbios.py
            ntsecuritycon.py
            pywin32_bootstrap.py
            pywin32_testutil.py
            pywintypes.py
            rasutil.py
            regcheck.py
            regutil.py
            sspi.py
            sspicon.py
            win2kras.py
            win32con.py
            win32cryptcon.py
            win32evtlogutil.py
            win32gui_struct.py
            win32inetcon.py
            win32netcon.py
            win32pdhquery.py
            win32pdhutil.py
            win32rcparser.py
            win32serviceutil.py
            win32timezone.py
            win32traceutil.py
            win32verstamp.py
            winerror.py
            winioctlcon.py
            winnt.py
            winperf.py
            winxptheme.py
            _win32verstamp_pywin32ctypes.py
            __pycache__/
              afxres.cpython-312.pyc
              commctrl.cpython-312.pyc
              mmsystem.cpython-312.pyc
              netbios.cpython-312.pyc
              ntsecuritycon.cpython-312.pyc
              pywin32_bootstrap.cpython-312.pyc
              pywin32_testutil.cpython-312.pyc
              pywintypes.cpython-312.pyc
              rasutil.cpython-312.pyc
              regcheck.cpython-312.pyc
              regutil.cpython-312.pyc
              sspi.cpython-312.pyc
              sspicon.cpython-312.pyc
              win2kras.cpython-312.pyc
              win32con.cpython-312.pyc
              win32cryptcon.cpython-312.pyc
              win32evtlogutil.cpython-312.pyc
              win32gui_struct.cpython-312.pyc
              win32inetcon.cpython-312.pyc
              win32netcon.cpython-312.pyc
              win32pdhquery.cpython-312.pyc
              win32pdhutil.cpython-312.pyc
              win32rcparser.cpython-312.pyc
              win32serviceutil.cpython-312.pyc
              win32timezone.cpython-312.pyc
              win32traceutil.cpython-312.pyc
              win32verstamp.cpython-312.pyc
              winerror.cpython-312.pyc
              winioctlcon.cpython-312.pyc
              winnt.cpython-312.pyc
              winperf.cpython-312.pyc
              winxptheme.cpython-312.pyc
              _win32verstamp_pywin32ctypes.cpython-312.pyc
          libs/
            pywintypes.lib
          scripts/
            backupEventLog.py
            ControlService.py
            h2py.py
            killProcName.py
            pywin32_postinstall.py
            pywin32_testall.py
            rasutil.py
            regsetup.py
            setup_d.py
            VersionStamp/
              BrandProject.py
              bulkstamp.py
              vssutil.py
              __pycache__/
                BrandProject.cpython-312.pyc
                bulkstamp.cpython-312.pyc
                vssutil.cpython-312.pyc
            __pycache__/
              backupEventLog.cpython-312.pyc
              ControlService.cpython-312.pyc
              h2py.cpython-312.pyc
              killProcName.cpython-312.pyc
              pywin32_postinstall.cpython-312.pyc
              pywin32_testall.cpython-312.pyc
              rasutil.cpython-312.pyc
              regsetup.cpython-312.pyc
              setup_d.cpython-312.pyc
          test/
            handles.py
            testall.py
            test_clipboard.py
            test_exceptions.py
            test_odbc.py
            test_pywintypes.py
            test_security.py
            test_sspi.py
            test_win32api.py
            test_win32clipboard.py
            test_win32cred.py
            test_win32crypt.py
            test_win32event.py
            test_win32file.py
            test_win32gui.py
            test_win32guistruct.py
            test_win32inet.py
            test_win32net.py
            test_win32pipe.py
            test_win32print.py
            test_win32profile.py
            test_win32rcparser.py
            test_win32timezone.py
            test_win32trace.py
            test_win32ts.py
            test_win32wnet.py
            win32rcparser/
              python.bmp
              python.ico
              test.h
              test.rc
            __pycache__/
              handles.cpython-312.pyc
              testall.cpython-312.pyc
              test_clipboard.cpython-312.pyc
              test_exceptions.cpython-312.pyc
              test_odbc.cpython-312.pyc
              test_pywintypes.cpython-312.pyc
              test_security.cpython-312.pyc
              test_sspi.cpython-312.pyc
              test_win32api.cpython-312.pyc
              test_win32clipboard.cpython-312.pyc
              test_win32cred.cpython-312.pyc
              test_win32crypt.cpython-312.pyc
              test_win32event.cpython-312.pyc
              test_win32file.cpython-312.pyc
              test_win32gui.cpython-312.pyc
              test_win32guistruct.cpython-312.pyc
              test_win32inet.cpython-312.pyc
              test_win32net.cpython-312.pyc
              test_win32pipe.cpython-312.pyc
              test_win32print.cpython-312.pyc
              test_win32profile.cpython-312.pyc
              test_win32rcparser.cpython-312.pyc
              test_win32timezone.cpython-312.pyc
              test_win32trace.cpython-312.pyc
              test_win32ts.cpython-312.pyc
              test_win32wnet.cpython-312.pyc
          __pycache__/
            winxpgui.cpython-312.pyc
        win32com/
          License.txt
          olectl.py
          readme.html
          storagecon.py
          universal.py
          util.py
          __init__.py
          client/
            build.py
            CLSIDToClass.py
            combrowse.py
            connect.py
            dynamic.py
            gencache.py
            genpy.py
            makepy.py
            selecttlb.py
            tlbrowse.py
            util.py
            __init__.py
            __pycache__/
              build.cpython-312.pyc
              CLSIDToClass.cpython-312.pyc
              combrowse.cpython-312.pyc
              connect.cpython-312.pyc
              dynamic.cpython-312.pyc
              gencache.cpython-312.pyc
              genpy.cpython-312.pyc
              makepy.cpython-312.pyc
              selecttlb.cpython-312.pyc
              tlbrowse.cpython-312.pyc
              util.cpython-312.pyc
              __init__.cpython-312.pyc
          demos/
            connect.py
            dump_clipboard.py
            eventsApartmentThreaded.py
            eventsFreeThreaded.py
            excelAddin.py
            excelRTDServer.py
            iebutton.py
            ietoolbar.py
            outlookAddin.py
            trybag.py
            __init__.py
            __pycache__/
              connect.cpython-312.pyc
              dump_clipboard.cpython-312.pyc
              eventsApartmentThreaded.cpython-312.pyc
              eventsFreeThreaded.cpython-312.pyc
              excelAddin.cpython-312.pyc
              excelRTDServer.cpython-312.pyc
              iebutton.cpython-312.pyc
              ietoolbar.cpython-312.pyc
              outlookAddin.cpython-312.pyc
              trybag.cpython-312.pyc
              __init__.cpython-312.pyc
          HTML/
            docindex.html
            GeneratedSupport.html
            index.html
            misc.html
            package.html
            PythonCOM.html
            QuickStartClientCom.html
            QuickStartServerCom.html
            variant.html
            image/
              blank.gif
              BTN_HomePage.gif
              BTN_ManualTop.gif
              BTN_NextPage.gif
              BTN_PrevPage.gif
              pycom_blowing.gif
              pythoncom.gif
              www_icon.gif
          include/
            PythonCOM.h
            PythonCOMRegister.h
            PythonCOMServer.h
          libs/
            axscript.lib
            pythoncom.lib
          makegw/
            makegw.py
            makegwenum.py
            makegwparse.py
            __init__.py
            __pycache__/
              makegw.cpython-312.pyc
              makegwenum.cpython-312.pyc
              makegwparse.cpython-312.pyc
              __init__.cpython-312.pyc
          server/
            connect.py
            dispatcher.py
            exception.py
            factory.py
            localserver.py
            policy.py
            register.py
            util.py
            __init__.py
            __pycache__/
              connect.cpython-312.pyc
              dispatcher.cpython-312.pyc
              exception.cpython-312.pyc
              factory.cpython-312.pyc
              localserver.cpython-312.pyc
              policy.cpython-312.pyc
              register.cpython-312.pyc
              util.cpython-312.pyc
              __init__.cpython-312.pyc
          servers/
            dictionary.py
            interp.py
            perfmon.py
            PythonTools.py
            test_pycomtest.py
            __init__.py
            __pycache__/
              dictionary.cpython-312.pyc
              interp.cpython-312.pyc
              perfmon.cpython-312.pyc
              PythonTools.cpython-312.pyc
              test_pycomtest.cpython-312.pyc
              __init__.cpython-312.pyc
          test/
            daodump.py
            errorSemantics.py
            GenTestScripts.py
            pippo.idl
            pippo_server.py
            policySemantics.py
            readme.txt
            testAccess.py
            testADOEvents.py
            testall.py
            testArrays.py
            testAXScript.py
            testClipboard.py
            testCollections.py
            testConversionErrors.py
            testDates.py
            testDCOM.py
            testDictionary.py
            testDictionary.vbs
            testDynamic.py
            testExchange.py
            testExplorer.py
            testGatewayAddresses.py
            testGIT.py
            testInterp.vbs
            testIterators.py
            testmakepy.py
            testMarshal.py
            testMSOffice.py
            testMSOfficeEvents.py
            testPersist.py
            testPippo.py
            testPyComTest.py
            Testpys.sct
            testPyScriptlet.js
            testROT.py
            testServers.py
            testShell.py
            testStorage.py
            testStreams.py
            testvb.py
            testvbscript_regexp.py
            testWMI.py
            testxslt.js
            testxslt.py
            testxslt.xsl
            util.py
            __init__.py
            __pycache__/
              daodump.cpython-312.pyc
              errorSemantics.cpython-312.pyc
              GenTestScripts.cpython-312.pyc
              pippo_server.cpython-312.pyc
              policySemantics.cpython-312.pyc
              testAccess.cpython-312.pyc
              testADOEvents.cpython-312.pyc
              testall.cpython-312.pyc
              testArrays.cpython-312.pyc
              testAXScript.cpython-312.pyc
              testClipboard.cpython-312.pyc
              testCollections.cpython-312.pyc
              testConversionErrors.cpython-312.pyc
              testDates.cpython-312.pyc
              testDCOM.cpython-312.pyc
              testDictionary.cpython-312.pyc
              testDynamic.cpython-312.pyc
              testExchange.cpython-312.pyc
              testExplorer.cpython-312.pyc
              testGatewayAddresses.cpython-312.pyc
              testGIT.cpython-312.pyc
              testIterators.cpython-312.pyc
              testmakepy.cpython-312.pyc
              testMarshal.cpython-312.pyc
              testMSOffice.cpython-312.pyc
              testMSOfficeEvents.cpython-312.pyc
              testPersist.cpython-312.pyc
              testPippo.cpython-312.pyc
              testPyComTest.cpython-312.pyc
              testROT.cpython-312.pyc
              testServers.cpython-312.pyc
              testShell.cpython-312.pyc
              testStorage.cpython-312.pyc
              testStreams.cpython-312.pyc
              testvb.cpython-312.pyc
              testvbscript_regexp.cpython-312.pyc
              testWMI.cpython-312.pyc
              testxslt.cpython-312.pyc
              util.cpython-312.pyc
              __init__.cpython-312.pyc
          __pycache__/
            olectl.cpython-312.pyc
            storagecon.cpython-312.pyc
            universal.cpython-312.pyc
            util.cpython-312.pyc
            __init__.cpython-312.pyc
        win32comext/
          adsi/
            adsi.pyd
            adsicon.py
            __init__.py
            demos/
              objectPicker.py
              scp.py
              search.py
              test.py
              __pycache__/
                objectPicker.cpython-312.pyc
                scp.cpython-312.pyc
                search.cpython-312.pyc
                test.cpython-312.pyc
            __pycache__/
              adsicon.cpython-312.pyc
              __init__.cpython-312.pyc
          authorization/
            authorization.pyd
            __init__.py
            demos/
              EditSecurity.py
              EditServiceSecurity.py
              __pycache__/
                EditSecurity.cpython-312.pyc
                EditServiceSecurity.cpython-312.pyc
            __pycache__/
              __init__.cpython-312.pyc
          axcontrol/
            axcontrol.pyd
            __init__.py
            __pycache__/
              __init__.cpython-312.pyc
          axdebug/
            adb.py
            codecontainer.py
            contexts.py
            debugger.py
            documents.py
            dump.py
            expressions.py
            gateways.py
            stackframe.py
            util.py
            __init__.py
            __pycache__/
              adb.cpython-312.pyc
              codecontainer.cpython-312.pyc
              contexts.cpython-312.pyc
              debugger.cpython-312.pyc
              documents.cpython-312.pyc
              dump.cpython-312.pyc
              expressions.cpython-312.pyc
              gateways.cpython-312.pyc
              stackframe.cpython-312.pyc
              util.cpython-312.pyc
              __init__.cpython-312.pyc
          axscript/
            asputil.py
            axscript.pyd
            __init__.py
            client/
              debug.py
              error.py
              framework.py
              pydumper.py
              pyscript.py
              pyscript_rexec.py
              scriptdispatch.py
              __init__.py
              __pycache__/
                debug.cpython-312.pyc
                error.cpython-312.pyc
                framework.cpython-312.pyc
                pydumper.cpython-312.pyc
                pyscript.cpython-312.pyc
                pyscript_rexec.cpython-312.pyc
                scriptdispatch.cpython-312.pyc
                __init__.cpython-312.pyc
            Demos/
              client/
                asp/
                  caps.asp
                  CreateObject.asp
                  tut1.asp
                  interrupt/
                    test.asp
                    test.html
                    test1.asp
                    test1.html
                ie/
                  calc.htm
                  CHARTPY.HTM
                  dbgtest.htm
                  demo.htm
                  demo_check.htm
                  demo_intro.htm
                  demo_menu.htm
                  docwrite.htm
                  FOO.HTM
                  foo2.htm
                  form.htm
                  marqueeDemo.htm
                  MarqueeText1.htm
                  mousetrack.htm
                  pycom_blowing.gif
                wsh/
                  blank.pys
                  excel.pys
                  registry.pys
                  test.pys
            server/
              axsite.py
              __init__.py
              __pycache__/
                axsite.cpython-312.pyc
                __init__.cpython-312.pyc
            test/
              debugTest.pys
              debugTest.vbs
              leakTest.py
              testHost.py
              testHost4Dbg.py
              __pycache__/
                leakTest.cpython-312.pyc
                testHost.cpython-312.pyc
                testHost4Dbg.cpython-312.pyc
            __pycache__/
              asputil.cpython-312.pyc
              __init__.cpython-312.pyc
          bits/
            bits.pyd
            __init__.py
            test/
              show_all_jobs.py
              test_bits.py
              __pycache__/
                show_all_jobs.cpython-312.pyc
                test_bits.cpython-312.pyc
            __pycache__/
              __init__.cpython-312.pyc
          directsound/
            directsound.pyd
            __init__.py
            test/
              ds_record.py
              ds_test.py
              __init__.py
              __pycache__/
                ds_record.cpython-312.pyc
                ds_test.cpython-312.pyc
                __init__.cpython-312.pyc
            __pycache__/
              __init__.cpython-312.pyc
          ifilter/
            ifilter.pyd
            ifiltercon.py
            __init__.py
            demo/
              filterDemo.py
              __pycache__/
                filterDemo.cpython-312.pyc
            __pycache__/
              ifiltercon.cpython-312.pyc
              __init__.cpython-312.pyc
          internet/
            inetcon.py
            internet.pyd
            __init__.py
            __pycache__/
              inetcon.cpython-312.pyc
              __init__.cpython-312.pyc
          mapi/
            emsabtags.py
            exchange.pyd
            mapi.pyd
            mapitags.py
            mapiutil.py
            __init__.py
            demos/
              mapisend.py
              __pycache__/
                mapisend.cpython-312.pyc
            __pycache__/
              emsabtags.cpython-312.pyc
              mapitags.cpython-312.pyc
              mapiutil.cpython-312.pyc
              __init__.cpython-312.pyc
          propsys/
            propsys.pyd
            pscon.py
            __init__.py
            test/
              testpropsys.py
              __pycache__/
                testpropsys.cpython-312.pyc
            __pycache__/
              pscon.cpython-312.pyc
              __init__.cpython-312.pyc
          shell/
            shell.pyd
            shellcon.py
            __init__.py
            demos/
              browse_for_folder.py
              create_link.py
              dump_link.py
              explorer_browser.py
              IActiveDesktop.py
              IFileOperationProgressSink.py
              IShellLinkDataList.py
              ITransferAdviseSink.py
              IUniformResourceLocator.py
              shellexecuteex.py
              viewstate.py
              walk_shell_folders.py
              servers/
                column_provider.py
                context_menu.py
                copy_hook.py
                empty_volume_cache.py
                folder_view.py
                icon_handler.py
                shell_view.py
                __pycache__/
                  column_provider.cpython-312.pyc
                  context_menu.cpython-312.pyc
                  copy_hook.cpython-312.pyc
                  empty_volume_cache.cpython-312.pyc
                  folder_view.cpython-312.pyc
                  icon_handler.cpython-312.pyc
                  shell_view.cpython-312.pyc
              __pycache__/
                browse_for_folder.cpython-312.pyc
                create_link.cpython-312.pyc
                dump_link.cpython-312.pyc
                explorer_browser.cpython-312.pyc
                IActiveDesktop.cpython-312.pyc
                IFileOperationProgressSink.cpython-312.pyc
                IShellLinkDataList.cpython-312.pyc
                ITransferAdviseSink.cpython-312.pyc
                IUniformResourceLocator.cpython-312.pyc
                shellexecuteex.cpython-312.pyc
                viewstate.cpython-312.pyc
                walk_shell_folders.cpython-312.pyc
            test/
              testShellFolder.py
              testShellItem.py
              testSHFileOperation.py
              __pycache__/
                testShellFolder.cpython-312.pyc
                testShellItem.cpython-312.pyc
                testSHFileOperation.cpython-312.pyc
            __pycache__/
              shellcon.cpython-312.pyc
              __init__.cpython-312.pyc
          taskscheduler/
            taskscheduler.pyd
            __init__.py
            test/
              test_addtask.py
              test_addtask_1.py
              test_addtask_2.py
              test_localsystem.py
              __pycache__/
                test_addtask.cpython-312.pyc
                test_addtask_1.cpython-312.pyc
                test_addtask_2.cpython-312.pyc
                test_localsystem.cpython-312.pyc
            __pycache__/
              __init__.cpython-312.pyc
        win32ctypes/
          pywintypes.py
          version.py
          win32api.py
          win32cred.py
          __init__.py
          core/
            compat.py
            _winerrors.py
            __init__.py
            cffi/
              _authentication.py
              _common.py
              _dll.py
              _nl_support.py
              _resource.py
              _system_information.py
              _time.py
              _util.py
              __init__.py
              __pycache__/
                _authentication.cpython-312.pyc
                _common.cpython-312.pyc
                _dll.cpython-312.pyc
                _nl_support.cpython-312.pyc
                _resource.cpython-312.pyc
                _system_information.cpython-312.pyc
                _time.cpython-312.pyc
                _util.cpython-312.pyc
                __init__.cpython-312.pyc
            ctypes/
              _authentication.py
              _common.py
              _dll.py
              _nl_support.py
              _resource.py
              _system_information.py
              _time.py
              _util.py
              __init__.py
              __pycache__/
                _authentication.cpython-312.pyc
                _common.cpython-312.pyc
                _dll.cpython-312.pyc
                _nl_support.cpython-312.pyc
                _resource.cpython-312.pyc
                _system_information.cpython-312.pyc
                _time.cpython-312.pyc
                _util.cpython-312.pyc
                __init__.cpython-312.pyc
            __pycache__/
              compat.cpython-312.pyc
              _winerrors.cpython-312.pyc
              __init__.cpython-312.pyc
          pywin32/
            pywintypes.py
            win32api.py
            win32cred.py
            __init__.py
            __pycache__/
              pywintypes.cpython-312.pyc
              win32api.cpython-312.pyc
              win32cred.cpython-312.pyc
              __init__.cpython-312.pyc
          tests/
            test_backends.py
            test_win32api.py
            test_win32cred.py
            __init__.py
            __pycache__/
              test_backends.cpython-312.pyc
              test_win32api.cpython-312.pyc
              test_win32cred.cpython-312.pyc
              __init__.cpython-312.pyc
          __pycache__/
            pywintypes.cpython-312.pyc
            version.cpython-312.pyc
            win32api.cpython-312.pyc
            win32cred.cpython-312.pyc
            __init__.cpython-312.pyc
        yaml/
          composer.py
          constructor.py
          cyaml.py
          dumper.py
          emitter.py
          error.py
          events.py
          loader.py
          nodes.py
          parser.py
          reader.py
          representer.py
          resolver.py
          scanner.py
          serializer.py
          tokens.py
          _yaml.cp312-win_amd64.pyd
          __init__.py
          __pycache__/
            composer.cpython-312.pyc
            constructor.cpython-312.pyc
            cyaml.cpython-312.pyc
            dumper.cpython-312.pyc
            emitter.cpython-312.pyc
            error.cpython-312.pyc
            events.cpython-312.pyc
            loader.cpython-312.pyc
            nodes.cpython-312.pyc
            parser.cpython-312.pyc
            reader.cpython-312.pyc
            representer.cpython-312.pyc
            resolver.cpython-312.pyc
            scanner.cpython-312.pyc
            serializer.cpython-312.pyc
            tokens.cpython-312.pyc
            __init__.cpython-312.pyc
        _distutils_hack/
          override.py
          __init__.py
          __pycache__/
            override.cpython-312.pyc
            __init__.cpython-312.pyc
        _pyinstaller_hooks_contrib/
          compat.py
          rthooks.dat
          __init__.py
          pre_find_module_path/
            __init__.py
            __pycache__/
              __init__.cpython-312.pyc
          pre_safe_import_module/
            hook-tensorflow.py
            hook-win32com.py
            __init__.py
            __pycache__/
              hook-tensorflow.cpython-312.pyc
              hook-win32com.cpython-312.pyc
              __init__.cpython-312.pyc
          rthooks/
            pyi_rth_cryptography_openssl.py
            pyi_rth_enchant.py
            pyi_rth_ffpyplayer.py
            pyi_rth_findlibs.py
            pyi_rth_nltk.py
            pyi_rth_osgeo.py
            pyi_rth_pygraphviz.py
            pyi_rth_pyproj.py
            pyi_rth_pyqtgraph_multiprocess.py
            pyi_rth_pythoncom.py
            pyi_rth_pywintypes.py
            pyi_rth_tensorflow.py
            pyi_rth_traitlets.py
            pyi_rth_usb.py
            __init__.py
            __pycache__/
              pyi_rth_cryptography_openssl.cpython-312.pyc
              pyi_rth_enchant.cpython-312.pyc
              pyi_rth_ffpyplayer.cpython-312.pyc
              pyi_rth_findlibs.cpython-312.pyc
              pyi_rth_nltk.cpython-312.pyc
              pyi_rth_osgeo.cpython-312.pyc
              pyi_rth_pygraphviz.cpython-312.pyc
              pyi_rth_pyproj.cpython-312.pyc
              pyi_rth_pyqtgraph_multiprocess.cpython-312.pyc
              pyi_rth_pythoncom.cpython-312.pyc
              pyi_rth_pywintypes.cpython-312.pyc
              pyi_rth_tensorflow.cpython-312.pyc
              pyi_rth_traitlets.cpython-312.pyc
              pyi_rth_usb.cpython-312.pyc
              __init__.cpython-312.pyc
          stdhooks/
            hook-accessible_output2.py
            hook-adbutils.py
            hook-adios.py
            hook-afmformats.py
            hook-aliyunsdkcore.py
            hook-altair.py
            hook-amazonproduct.py
            hook-anyio.py
            hook-apkutils.py
            hook-appdirs.py
            hook-appy.pod.py
            hook-apscheduler.py
            hook-argon2.py
            hook-astor.py
            hook-astroid.py
            hook-astropy.py
            hook-astropy_iers_data.py
            hook-av.py
            hook-avro.py
            hook-azurerm.py
            hook-backports.py
            hook-backports.zoneinfo.py
            hook-bacon.py
            hook-bcrypt.py
            hook-bitsandbytes.py
            hook-black.py
            hook-bleak.py
            hook-blib2to3.py
            hook-blspy.py
            hook-bokeh.py
            hook-boto.py
            hook-boto3.py
            hook-botocore.py
            hook-branca.py
            hook-BTrees.py
            hook-cairocffi.py
            hook-cairosvg.py
            hook-capstone.py
            hook-cassandra.py
            hook-celpy.py
            hook-certifi.py
            hook-cftime.py
            hook-cf_units.py
            hook-charset_normalizer.py
            hook-cloudpickle.py
            hook-cloudscraper.py
            hook-clr.py
            hook-clr_loader.py
            hook-cmocean.py
            hook-compliance_checker.py
            hook-comtypes.client.py
            hook-countrycode.py
            hook-countryinfo.py
            hook-Crypto.py
            hook-Cryptodome.py
            hook-cryptography.py
            hook-CTkMessagebox.py
            hook-customtkinter.py
            hook-cv2.py
            hook-cx_Oracle.py
            hook-cytoolz.itertoolz.py
            hook-dash.py
            hook-dash_bootstrap_components.py
            hook-dash_core_components.py
            hook-dash_html_components.py
            hook-dash_renderer.py
            hook-dash_table.py
            hook-dash_uploader.py
            hook-dask.py
            hook-datasets.py
            hook-dateparser.utils.strptime.py
            hook-dateutil.py
            hook-dbus_fast.py
            hook-dclab.py
            hook-detectron2.py
            hook-discid.py
            hook-distorm3.py
            hook-distributed.py
            hook-dns.rdata.py
            hook-docutils.py
            hook-docx.py
            hook-docx2pdf.py
            hook-dynaconf.py
            hook-easyocr.py
            hook-eel.py
            hook-emoji.py
            hook-enchant.py
            hook-eng_to_ipa.py
            hook-ens.py
            hook-enzyme.parsers.ebml.core.py
            hook-eth_abi.py
            hook-eth_account.py
            hook-eth_hash.py
            hook-eth_keyfile.py
            hook-eth_keys.py
            hook-eth_rlp.py
            hook-eth_typing.py
            hook-eth_utils.network.py
            hook-eth_utils.py
            hook-exchangelib.py
            hook-fabric.py
            hook-fairscale.py
            hook-faker.py
            hook-falcon.py
            hook-fastai.py
            hook-fastparquet.py
            hook-ffpyplayer.py
            hook-fiona.py
            hook-flask_compress.py
            hook-flask_restx.py
            hook-flex.py
            hook-flirpy.py
            hook-fmpy.py
            hook-folium.py
            hook-freetype.py
            hook-frictionless.py
            hook-fsspec.py
            hook-fvcore.nn.py
            hook-gadfly.py
            hook-gbulb.py
            hook-gcloud.py
            hook-geopandas.py
            hook-gitlab.py
            hook-gmplot.py
            hook-gmsh.py
            hook-gooey.py
            hook-google.api_core.py
            hook-google.cloud.bigquery.py
            hook-google.cloud.core.py
            hook-google.cloud.kms_v1.py
            hook-google.cloud.pubsub_v1.py
            hook-google.cloud.speech.py
            hook-google.cloud.storage.py
            hook-google.cloud.translate.py
            hook-googleapiclient.model.py
            hook-grapheme.py
            hook-graphql_query.py
            hook-great_expectations.py
            hook-gribapi.py
            hook-grpc.py
            hook-gst._gst.py
            hook-gtk.py
            hook-h3.py
            hook-h5py.py
            hook-hdf5plugin.py
            hook-hexbytes.py
            hook-HtmlTestRunner.py
            hook-httplib2.py
            hook-humanize.py
            hook-hydra.py
            hook-ijson.py
            hook-imageio.py
            hook-imageio_ffmpeg.py
            hook-iminuit.py
            hook-intake.py
            hook-IPython.py
            hook-iso639.py
            hook-itk.py
            hook-jaraco.text.py
            hook-jedi.py
            hook-jieba.py
            hook-jinja2.py
            hook-jinxed.py
            hook-jira.py
            hook-jsonpath_rw_ext.py
            hook-jsonrpcserver.py
            hook-jsonschema.py
            hook-jsonschema_specifications.py
            hook-jupyterlab.py
            hook-kaleido.py
            hook-khmernltk.py
            hook-kinterbasdb.py
            hook-langchain.py
            hook-langcodes.py
            hook-langdetect.py
            hook-laonlp.py
            hook-lark.py
            hook-ldfparser.py
            hook-lensfunpy.py
            hook-libaudioverse.py
            hook-librosa.py
            hook-lightgbm.py
            hook-lightning.py
            hook-limits.py
            hook-linear_operator.py
            hook-lingua.py
            hook-litestar.py
            hook-llvmlite.py
            hook-logilab.py
            hook-lxml.etree.py
            hook-lxml.isoschematron.py
            hook-lxml.objectify.py
            hook-lxml.py
            hook-lz4.py
            hook-magic.py
            hook-mako.codegen.py
            hook-mariadb.py
            hook-markdown.py
            hook-mecab.py
            hook-metpy.py
            hook-migrate.py
            hook-mimesis.py
            hook-minecraft_launcher_lib.py
            hook-mistune.py
            hook-mnemonic.py
            hook-monai.py
            hook-moviepy.audio.fx.all.py
            hook-moviepy.video.fx.all.py
            hook-mpl_toolkits.basemap.py
            hook-msoffcrypto.py
            hook-nacl.py
            hook-names.py
            hook-nanite.py
            hook-narwhals.py
            hook-nbconvert.py
            hook-nbdime.py
            hook-nbformat.py
            hook-nbt.py
            hook-ncclient.py
            hook-netCDF4.py
            hook-niquests.py
            hook-nltk.py
            hook-nnpy.py
            hook-notebook.py
            hook-numba.py
            hook-numbers_parser.py
            hook-numcodecs.py
            hook-nvidia.cublas.py
            hook-nvidia.cuda_cupti.py
            hook-nvidia.cuda_nvcc.py
            hook-nvidia.cuda_nvrtc.py
            hook-nvidia.cuda_runtime.py
            hook-nvidia.cudnn.py
            hook-nvidia.cufft.py
            hook-nvidia.curand.py
            hook-nvidia.cusolver.py
            hook-nvidia.cusparse.py
            hook-nvidia.nccl.py
            hook-nvidia.nvjitlink.py
            hook-nvidia.nvtx.py
            hook-office365.py
            hook-onnxruntime.py
            hook-opencc.py
            hook-OpenGL.py
            hook-OpenGL_accelerate.py
            hook-openpyxl.py
            hook-opentelemetry.py
            hook-orjson.py
            hook-osgeo.py
            hook-pandas_flavor.py
            hook-panel.py
            hook-parsedatetime.py
            hook-parso.py
            hook-passlib.py
            hook-paste.exceptions.reporter.py
            hook-patoolib.py
            hook-patsy.py
            hook-pdfminer.py
            hook-pendulum.py
            hook-phonenumbers.py
            hook-pingouin.py
            hook-pint.py
            hook-pinyin.py
            hook-platformdirs.py
            hook-plotly.py
            hook-pptx.py
            hook-prettytable.py
            hook-psutil.py
            hook-psychopy.py
            hook-psycopg2.py
            hook-publicsuffix2.py
            hook-pubsub.core.py
            hook-puremagic.py
            hook-py.py
            hook-pyarrow.py
            hook-pycountry.py
            hook-pycparser.py
            hook-pycrfsuite.py
            hook-pydantic.py
            hook-pydicom.py
            hook-pydivert.py
            hook-pyexcel-io.py
            hook-pyexcel-ods.py
            hook-pyexcel-ods3.py
            hook-pyexcel-odsr.py
            hook-pyexcel-xls.py
            hook-pyexcel-xlsx.py
            hook-pyexcel-xlsxw.py
            hook-pyexcel.py
            hook-pyexcelerate.Writer.py
            hook-pyexcel_io.py
            hook-pyexcel_ods.py
            hook-pyexcel_ods3.py
            hook-pyexcel_odsr.py
            hook-pyexcel_xls.py
            hook-pyexcel_xlsx.py
            hook-pyexcel_xlsxw.py
            hook-pygraphviz.py
            hook-pygwalker.py
            hook-pylibmagic.py
            hook-pylint.py
            hook-pylsl.py
            hook-pymediainfo.py
            hook-pymorphy3.py
            hook-pymssql.py
            hook-pynput.py
            hook-pyodbc.py
            hook-pyopencl.py
            hook-pypdfium2.py
            hook-pypdfium2_raw.py
            hook-pypemicro.py
            hook-pyphen.py
            hook-pyppeteer.py
            hook-pyproj.py
            hook-pypsexec.py
            hook-pypylon.py
            hook-pyqtgraph.py
            hook-pyshark.py
            hook-pysnmp.py
            hook-pystray.py
            hook-PyTaskbar.py
            hook-pytest.py
            hook-pythainlp.py
            hook-pythoncom.py
            hook-pyttsx.py
            hook-pyttsx3.py
            hook-pyviz_comms.py
            hook-pyvjoy.py
            hook-pywintypes.py
            hook-pywt.py
            hook-qtmodern.py
            hook-radicale.py
            hook-raven.py
            hook-rawpy.py
            hook-rdflib.py
            hook-redmine.py
            hook-regex.py
            hook-reportlab.lib.utils.py
            hook-reportlab.pdfbase._fontdata.py
            hook-resampy.py
            hook-rlp.py
            hook-rpy2.py
            hook-rtree.py
            hook-ruamel.yaml.py
            hook-rubicon.py
            hook-sacremoses.py
            hook-sam2.py
            hook-saml2.py
            hook-schwifty.py
            hook-seedir.py
            hook-selectolax.py
            hook-selenium.py
            hook-sentry_sdk.py
            hook-setuptools_scm.py
            hook-shapely.py
            hook-shotgun_api3.py
            hook-simplemma.py
            hook-skimage.color.py
            hook-skimage.data.py
            hook-skimage.draw.py
            hook-skimage.exposure.py
            hook-skimage.feature.py
            hook-skimage.filters.py
            hook-skimage.future.py
            hook-skimage.graph.py
            hook-skimage.io.py
            hook-skimage.measure.py
            hook-skimage.metrics.py
            hook-skimage.morphology.py
            hook-skimage.py
            hook-skimage.registration.py
            hook-skimage.restoration.py
            hook-skimage.transform.py
            hook-sklearn.cluster.py
            hook-sklearn.linear_model.py
            hook-sklearn.metrics.cluster.py
            hook-sklearn.metrics.pairwise.py
            hook-sklearn.metrics.py
            hook-sklearn.neighbors.py
            hook-sklearn.py
            hook-sklearn.tree.py
            hook-sklearn.utils.py
            hook-skyfield.py
            hook-slixmpp.py
            hook-sounddevice.py
            hook-soundfile.py
            hook-sound_lib.py
            hook-spacy.py
            hook-speech_recognition.py
            hook-spiceypy.py
            hook-spnego.py
            hook-srsly.msgpack._packer.py
            hook-sspilib.raw.py
            hook-statsmodels.tsa.statespace.py
            hook-stdnum.py
            hook-storm.database.py
            hook-sudachipy.py
            hook-sunpy.py
            hook-sv_ttk.py
            hook-swagger_spec_validator.py
            hook-sympy.py
            hook-tableauhyperapi.py
            hook-tables.py
            hook-tcod.py
            hook-tensorflow.py
            hook-textdistance.py
            hook-text_unidecode.py
            hook-thinc.backends.numpy_ops.py
            hook-thinc.py
            hook-timezonefinder.py
            hook-timm.py
            hook-tinycss2.py
            hook-tkinterdnd2.py
            hook-tkinterweb.py
            hook-tkinterweb_tkhtml.py
            hook-toga.py
            hook-toga_cocoa.py
            hook-toga_gtk.py
            hook-toga_winforms.py
            hook-torch.py
            hook-torchaudio.py
            hook-torchtext.py
            hook-torchvision.io.image.py
            hook-torchvision.py
            hook-trame.py
            hook-trame_client.py
            hook-trame_code.py
            hook-trame_components.py
            hook-trame_datagrid.py
            hook-trame_deckgl.py
            hook-trame_formkit.py
            hook-trame_grid.py
            hook-trame_iframe.py
            hook-trame_keycloak.py
            hook-trame_leaflet.py
            hook-trame_markdown.py
            hook-trame_matplotlib.py
            hook-trame_mesh_streamer.py
            hook-trame_plotly.py
            hook-trame_pvui.py
            hook-trame_quasar.py
            hook-trame_rca.py
            hook-trame_router.py
            hook-trame_simput.py
            hook-trame_tauri.py
            hook-trame_tweakpane.py
            hook-trame_vega.py
            hook-trame_vtk.py
            hook-trame_vtk3d.py
            hook-trame_vtklocal.py
            hook-trame_vuetify.py
            hook-trame_xterm.py
            hook-transformers.py
            hook-travertino.py
            hook-trimesh.py
            hook-triton.py
            hook-ttkthemes.py
            hook-ttkwidgets.py
            hook-tzdata.py
            hook-tzwhere.py
            hook-u1db.py
            hook-ultralytics.py
            hook-umap.py
            hook-unidecode.py
            hook-uniseg.py
            hook-urllib3.py
            hook-urllib3_future.py
            hook-usb.py
            hook-uvicorn.py
            hook-uvloop.py
            hook-vaderSentiment.py
            hook-vtkmodules.vtkAcceleratorsVTKmCore.py
            hook-vtkmodules.vtkAcceleratorsVTKmDataModel.py
            hook-vtkmodules.vtkAcceleratorsVTKmFilters.py
            hook-vtkmodules.vtkChartsCore.py
            hook-vtkmodules.vtkCommonColor.py
            hook-vtkmodules.vtkCommonComputationalGeometry.py
            hook-vtkmodules.vtkCommonDataModel.py
            hook-vtkmodules.vtkCommonExecutionModel.py
            hook-vtkmodules.vtkCommonMath.py
            hook-vtkmodules.vtkCommonMisc.py
            hook-vtkmodules.vtkCommonPython.py
            hook-vtkmodules.vtkCommonSystem.py
            hook-vtkmodules.vtkCommonTransforms.py
            hook-vtkmodules.vtkDomainsChemistry.py
            hook-vtkmodules.vtkDomainsChemistryOpenGL2.py
            hook-vtkmodules.vtkFiltersAMR.py
            hook-vtkmodules.vtkFiltersCellGrid.py
            hook-vtkmodules.vtkFiltersCore.py
            hook-vtkmodules.vtkFiltersExtraction.py
            hook-vtkmodules.vtkFiltersFlowPaths.py
            hook-vtkmodules.vtkFiltersGeneral.py
            hook-vtkmodules.vtkFiltersGeneric.py
            hook-vtkmodules.vtkFiltersGeometry.py
            hook-vtkmodules.vtkFiltersGeometryPreview.py
            hook-vtkmodules.vtkFiltersHybrid.py
            hook-vtkmodules.vtkFiltersHyperTree.py
            hook-vtkmodules.vtkFiltersImaging.py
            hook-vtkmodules.vtkFiltersModeling.py
            hook-vtkmodules.vtkFiltersParallel.py
            hook-vtkmodules.vtkFiltersParallelDIY2.py
            hook-vtkmodules.vtkFiltersParallelImaging.py
            hook-vtkmodules.vtkFiltersParallelStatistics.py
            hook-vtkmodules.vtkFiltersPoints.py
            hook-vtkmodules.vtkFiltersProgrammable.py
            hook-vtkmodules.vtkFiltersPython.py
            hook-vtkmodules.vtkFiltersReduction.py
            hook-vtkmodules.vtkFiltersSelection.py
            hook-vtkmodules.vtkFiltersSMP.py
            hook-vtkmodules.vtkFiltersSources.py
            hook-vtkmodules.vtkFiltersStatistics.py
            hook-vtkmodules.vtkFiltersTemporal.py
            hook-vtkmodules.vtkFiltersTensor.py
            hook-vtkmodules.vtkFiltersTexture.py
            hook-vtkmodules.vtkFiltersTopology.py
            hook-vtkmodules.vtkFiltersVerdict.py
            hook-vtkmodules.vtkGeovisCore.py
            hook-vtkmodules.vtkImagingColor.py
            hook-vtkmodules.vtkImagingCore.py
            hook-vtkmodules.vtkImagingFourier.py
            hook-vtkmodules.vtkImagingGeneral.py
            hook-vtkmodules.vtkImagingHybrid.py
            hook-vtkmodules.vtkImagingMath.py
            hook-vtkmodules.vtkImagingMorphological.py
            hook-vtkmodules.vtkImagingOpenGL2.py
            hook-vtkmodules.vtkImagingSources.py
            hook-vtkmodules.vtkImagingStatistics.py
            hook-vtkmodules.vtkImagingStencil.py
            hook-vtkmodules.vtkInfovisCore.py
            hook-vtkmodules.vtkInfovisLayout.py
            hook-vtkmodules.vtkInteractionImage.py
            hook-vtkmodules.vtkInteractionStyle.py
            hook-vtkmodules.vtkInteractionWidgets.py
            hook-vtkmodules.vtkIOAMR.py
            hook-vtkmodules.vtkIOAsynchronous.py
            hook-vtkmodules.vtkIOCellGrid.py
            hook-vtkmodules.vtkIOCesium3DTiles.py
            hook-vtkmodules.vtkIOCGNSReader.py
            hook-vtkmodules.vtkIOChemistry.py
            hook-vtkmodules.vtkIOCityGML.py
            hook-vtkmodules.vtkIOCONVERGECFD.py
            hook-vtkmodules.vtkIOCore.py
            hook-vtkmodules.vtkIOEngys.py
            hook-vtkmodules.vtkIOEnSight.py
            hook-vtkmodules.vtkIOERF.py
            hook-vtkmodules.vtkIOExodus.py
            hook-vtkmodules.vtkIOExport.py
            hook-vtkmodules.vtkIOExportGL2PS.py
            hook-vtkmodules.vtkIOExportPDF.py
            hook-vtkmodules.vtkIOFDS.py
            hook-vtkmodules.vtkIOFLUENTCFF.py
            hook-vtkmodules.vtkIOGeoJSON.py
            hook-vtkmodules.vtkIOGeometry.py
            hook-vtkmodules.vtkIOH5part.py
            hook-vtkmodules.vtkIOH5Rage.py
            hook-vtkmodules.vtkIOHDF.py
            hook-vtkmodules.vtkIOImage.py
            hook-vtkmodules.vtkIOImport.py
            hook-vtkmodules.vtkIOInfovis.py
            hook-vtkmodules.vtkIOIOSS.py
            hook-vtkmodules.vtkIOLegacy.py
            hook-vtkmodules.vtkIOLSDyna.py
            hook-vtkmodules.vtkIOMINC.py
            hook-vtkmodules.vtkIOMotionFX.py
            hook-vtkmodules.vtkIOMovie.py
            hook-vtkmodules.vtkIONetCDF.py
            hook-vtkmodules.vtkIOOggTheora.py
            hook-vtkmodules.vtkIOOMF.py
            hook-vtkmodules.vtkIOParallel.py
            hook-vtkmodules.vtkIOParallelExodus.py
            hook-vtkmodules.vtkIOParallelLSDyna.py
            hook-vtkmodules.vtkIOParallelXML.py
            hook-vtkmodules.vtkIOPIO.py
            hook-vtkmodules.vtkIOPLY.py
            hook-vtkmodules.vtkIOSegY.py
            hook-vtkmodules.vtkIOSQL.py
            hook-vtkmodules.vtkIOTecplotTable.py
            hook-vtkmodules.vtkIOTRUCHAS.py
            hook-vtkmodules.vtkIOVeraOut.py
            hook-vtkmodules.vtkIOVideo.py
            hook-vtkmodules.vtkIOVPIC.py
            hook-vtkmodules.vtkIOXdmf2.py
            hook-vtkmodules.vtkIOXML.py
            hook-vtkmodules.vtkIOXMLParser.py
            hook-vtkmodules.vtkParallelCore.py
            hook-vtkmodules.vtkPythonContext2D.py
            hook-vtkmodules.vtkRenderingAnnotation.py
            hook-vtkmodules.vtkRenderingCellGrid.py
            hook-vtkmodules.vtkRenderingContext2D.py
            hook-vtkmodules.vtkRenderingContextOpenGL2.py
            hook-vtkmodules.vtkRenderingCore.py
            hook-vtkmodules.vtkRenderingExternal.py
            hook-vtkmodules.vtkRenderingFreeType.py
            hook-vtkmodules.vtkRenderingGL2PSOpenGL2.py
            hook-vtkmodules.vtkRenderingHyperTreeGrid.py
            hook-vtkmodules.vtkRenderingImage.py
            hook-vtkmodules.vtkRenderingLabel.py
            hook-vtkmodules.vtkRenderingLICOpenGL2.py
            hook-vtkmodules.vtkRenderingLOD.py
            hook-vtkmodules.vtkRenderingMatplotlib.py
            hook-vtkmodules.vtkRenderingOpenGL2.py
            hook-vtkmodules.vtkRenderingParallel.py
            hook-vtkmodules.vtkRenderingSceneGraph.py
            hook-vtkmodules.vtkRenderingUI.py
            hook-vtkmodules.vtkRenderingVolume.py
            hook-vtkmodules.vtkRenderingVolumeAMR.py
            hook-vtkmodules.vtkRenderingVolumeOpenGL2.py
            hook-vtkmodules.vtkRenderingVR.py
            hook-vtkmodules.vtkRenderingVRModels.py
            hook-vtkmodules.vtkRenderingVtkJS.py
            hook-vtkmodules.vtkSerializationManager.py
            hook-vtkmodules.vtkTestingRendering.py
            hook-vtkmodules.vtkViewsContext2D.py
            hook-vtkmodules.vtkViewsCore.py
            hook-vtkmodules.vtkViewsInfovis.py
            hook-vtkmodules.vtkWebCore.py
            hook-vtkmodules.vtkWebGLExporter.py
            hook-vtkpython.py
            hook-wavefile.py
            hook-weasyprint.py
            hook-web3.py
            hook-webassets.py
            hook-webrtcvad.py
            hook-websockets.py
            hook-webview.py
            hook-win32com.py
            hook-wordcloud.py
            hook-workflow.py
            hook-wx.lib.activex.py
            hook-wx.lib.pubsub.py
            hook-wx.xrc.py
            hook-xarray.py
            hook-Xlib.py
            hook-xml.dom.html.HTMLDocument.py
            hook-xml.sax.saxexts.py
            hook-xmldiff.py
            hook-xmlschema.py
            hook-xsge_gui.py
            hook-xyzservices.py
            hook-yapf_third_party.py
            hook-z3c.rml.py
            hook-zarr.py
            hook-zeep.py
            hook-zmq.py
            hook-zoneinfo.py
            hook-_mssql.py
            hook-_mysql.py
            __init__.py
            __pycache__/
              hook-accessible_output2.cpython-312.pyc
              hook-adbutils.cpython-312.pyc
              hook-adios.cpython-312.pyc
              hook-afmformats.cpython-312.pyc
              hook-aliyunsdkcore.cpython-312.pyc
              hook-altair.cpython-312.pyc
              hook-amazonproduct.cpython-312.pyc
              hook-anyio.cpython-312.pyc
              hook-apkutils.cpython-312.pyc
              hook-appdirs.cpython-312.pyc
              hook-appy.pod.cpython-312.pyc
              hook-apscheduler.cpython-312.pyc
              hook-argon2.cpython-312.pyc
              hook-astor.cpython-312.pyc
              hook-astroid.cpython-312.pyc
              hook-astropy.cpython-312.pyc
              hook-astropy_iers_data.cpython-312.pyc
              hook-av.cpython-312.pyc
              hook-avro.cpython-312.pyc
              hook-azurerm.cpython-312.pyc
              hook-backports.cpython-312.pyc
              hook-backports.zoneinfo.cpython-312.pyc
              hook-bacon.cpython-312.pyc
              hook-bcrypt.cpython-312.pyc
              hook-bitsandbytes.cpython-312.pyc
              hook-black.cpython-312.pyc
              hook-bleak.cpython-312.pyc
              hook-blib2to3.cpython-312.pyc
              hook-blspy.cpython-312.pyc
              hook-bokeh.cpython-312.pyc
              hook-boto.cpython-312.pyc
              hook-boto3.cpython-312.pyc
              hook-botocore.cpython-312.pyc
              hook-branca.cpython-312.pyc
              hook-BTrees.cpython-312.pyc
              hook-cairocffi.cpython-312.pyc
              hook-cairosvg.cpython-312.pyc
              hook-capstone.cpython-312.pyc
              hook-cassandra.cpython-312.pyc
              hook-celpy.cpython-312.pyc
              hook-certifi.cpython-312.pyc
              hook-cftime.cpython-312.pyc
              hook-cf_units.cpython-312.pyc
              hook-charset_normalizer.cpython-312.pyc
              hook-cloudpickle.cpython-312.pyc
              hook-cloudscraper.cpython-312.pyc
              hook-clr.cpython-312.pyc
              hook-clr_loader.cpython-312.pyc
              hook-cmocean.cpython-312.pyc
              hook-compliance_checker.cpython-312.pyc
              hook-comtypes.client.cpython-312.pyc
              hook-countrycode.cpython-312.pyc
              hook-countryinfo.cpython-312.pyc
              hook-Crypto.cpython-312.pyc
              hook-Cryptodome.cpython-312.pyc
              hook-cryptography.cpython-312.pyc
              hook-CTkMessagebox.cpython-312.pyc
              hook-customtkinter.cpython-312.pyc
              hook-cv2.cpython-312.pyc
              hook-cx_Oracle.cpython-312.pyc
              hook-cytoolz.itertoolz.cpython-312.pyc
              hook-dash.cpython-312.pyc
              hook-dash_bootstrap_components.cpython-312.pyc
              hook-dash_core_components.cpython-312.pyc
              hook-dash_html_components.cpython-312.pyc
              hook-dash_renderer.cpython-312.pyc
              hook-dash_table.cpython-312.pyc
              hook-dash_uploader.cpython-312.pyc
              hook-dask.cpython-312.pyc
              hook-datasets.cpython-312.pyc
              hook-dateparser.utils.strptime.cpython-312.pyc
              hook-dateutil.cpython-312.pyc
              hook-dbus_fast.cpython-312.pyc
              hook-dclab.cpython-312.pyc
              hook-detectron2.cpython-312.pyc
              hook-discid.cpython-312.pyc
              hook-distorm3.cpython-312.pyc
              hook-distributed.cpython-312.pyc
              hook-dns.rdata.cpython-312.pyc
              hook-docutils.cpython-312.pyc
              hook-docx.cpython-312.pyc
              hook-docx2pdf.cpython-312.pyc
              hook-dynaconf.cpython-312.pyc
              hook-easyocr.cpython-312.pyc
              hook-eel.cpython-312.pyc
              hook-emoji.cpython-312.pyc
              hook-enchant.cpython-312.pyc
              hook-eng_to_ipa.cpython-312.pyc
              hook-ens.cpython-312.pyc
              hook-enzyme.parsers.ebml.core.cpython-312.pyc
              hook-eth_abi.cpython-312.pyc
              hook-eth_account.cpython-312.pyc
              hook-eth_hash.cpython-312.pyc
              hook-eth_keyfile.cpython-312.pyc
              hook-eth_keys.cpython-312.pyc
              hook-eth_rlp.cpython-312.pyc
              hook-eth_typing.cpython-312.pyc
              hook-eth_utils.cpython-312.pyc
              hook-eth_utils.network.cpython-312.pyc
              hook-exchangelib.cpython-312.pyc
              hook-fabric.cpython-312.pyc
              hook-fairscale.cpython-312.pyc
              hook-faker.cpython-312.pyc
              hook-falcon.cpython-312.pyc
              hook-fastai.cpython-312.pyc
              hook-fastparquet.cpython-312.pyc
              hook-ffpyplayer.cpython-312.pyc
              hook-fiona.cpython-312.pyc
              hook-flask_compress.cpython-312.pyc
              hook-flask_restx.cpython-312.pyc
              hook-flex.cpython-312.pyc
              hook-flirpy.cpython-312.pyc
              hook-fmpy.cpython-312.pyc
              hook-folium.cpython-312.pyc
              hook-freetype.cpython-312.pyc
              hook-frictionless.cpython-312.pyc
              hook-fsspec.cpython-312.pyc
              hook-fvcore.nn.cpython-312.pyc
              hook-gadfly.cpython-312.pyc
              hook-gbulb.cpython-312.pyc
              hook-gcloud.cpython-312.pyc
              hook-geopandas.cpython-312.pyc
              hook-gitlab.cpython-312.pyc
              hook-gmplot.cpython-312.pyc
              hook-gmsh.cpython-312.pyc
              hook-gooey.cpython-312.pyc
              hook-google.api_core.cpython-312.pyc
              hook-google.cloud.bigquery.cpython-312.pyc
              hook-google.cloud.core.cpython-312.pyc
              hook-google.cloud.kms_v1.cpython-312.pyc
              hook-google.cloud.pubsub_v1.cpython-312.pyc
              hook-google.cloud.speech.cpython-312.pyc
              hook-google.cloud.storage.cpython-312.pyc
              hook-google.cloud.translate.cpython-312.pyc
              hook-googleapiclient.model.cpython-312.pyc
              hook-grapheme.cpython-312.pyc
              hook-graphql_query.cpython-312.pyc
              hook-great_expectations.cpython-312.pyc
              hook-gribapi.cpython-312.pyc
              hook-grpc.cpython-312.pyc
              hook-gst._gst.cpython-312.pyc
              hook-gtk.cpython-312.pyc
              hook-h3.cpython-312.pyc
              hook-h5py.cpython-312.pyc
              hook-hdf5plugin.cpython-312.pyc
              hook-hexbytes.cpython-312.pyc
              hook-HtmlTestRunner.cpython-312.pyc
              hook-httplib2.cpython-312.pyc
              hook-humanize.cpython-312.pyc
              hook-hydra.cpython-312.pyc
              hook-ijson.cpython-312.pyc
              hook-imageio.cpython-312.pyc
              hook-imageio_ffmpeg.cpython-312.pyc
              hook-iminuit.cpython-312.pyc
              hook-intake.cpython-312.pyc
              hook-IPython.cpython-312.pyc
              hook-iso639.cpython-312.pyc
              hook-itk.cpython-312.pyc
              hook-jaraco.text.cpython-312.pyc
              hook-jedi.cpython-312.pyc
              hook-jieba.cpython-312.pyc
              hook-jinja2.cpython-312.pyc
              hook-jinxed.cpython-312.pyc
              hook-jira.cpython-312.pyc
              hook-jsonpath_rw_ext.cpython-312.pyc
              hook-jsonrpcserver.cpython-312.pyc
              hook-jsonschema.cpython-312.pyc
              hook-jsonschema_specifications.cpython-312.pyc
              hook-jupyterlab.cpython-312.pyc
              hook-kaleido.cpython-312.pyc
              hook-khmernltk.cpython-312.pyc
              hook-kinterbasdb.cpython-312.pyc
              hook-langchain.cpython-312.pyc
              hook-langcodes.cpython-312.pyc
              hook-langdetect.cpython-312.pyc
              hook-laonlp.cpython-312.pyc
              hook-lark.cpython-312.pyc
              hook-ldfparser.cpython-312.pyc
              hook-lensfunpy.cpython-312.pyc
              hook-libaudioverse.cpython-312.pyc
              hook-librosa.cpython-312.pyc
              hook-lightgbm.cpython-312.pyc
              hook-lightning.cpython-312.pyc
              hook-limits.cpython-312.pyc
              hook-linear_operator.cpython-312.pyc
              hook-lingua.cpython-312.pyc
              hook-litestar.cpython-312.pyc
              hook-llvmlite.cpython-312.pyc
              hook-logilab.cpython-312.pyc
              hook-lxml.cpython-312.pyc
              hook-lxml.etree.cpython-312.pyc
              hook-lxml.isoschematron.cpython-312.pyc
              hook-lxml.objectify.cpython-312.pyc
              hook-lz4.cpython-312.pyc
              hook-magic.cpython-312.pyc
              hook-mako.codegen.cpython-312.pyc
              hook-mariadb.cpython-312.pyc
              hook-markdown.cpython-312.pyc
              hook-mecab.cpython-312.pyc
              hook-metpy.cpython-312.pyc
              hook-migrate.cpython-312.pyc
              hook-mimesis.cpython-312.pyc
              hook-minecraft_launcher_lib.cpython-312.pyc
              hook-mistune.cpython-312.pyc
              hook-mnemonic.cpython-312.pyc
              hook-monai.cpython-312.pyc
              hook-moviepy.audio.fx.all.cpython-312.pyc
              hook-moviepy.video.fx.all.cpython-312.pyc
              hook-mpl_toolkits.basemap.cpython-312.pyc
              hook-msoffcrypto.cpython-312.pyc
              hook-nacl.cpython-312.pyc
              hook-names.cpython-312.pyc
              hook-nanite.cpython-312.pyc
              hook-narwhals.cpython-312.pyc
              hook-nbconvert.cpython-312.pyc
              hook-nbdime.cpython-312.pyc
              hook-nbformat.cpython-312.pyc
              hook-nbt.cpython-312.pyc
              hook-ncclient.cpython-312.pyc
              hook-netCDF4.cpython-312.pyc
              hook-niquests.cpython-312.pyc
              hook-nltk.cpython-312.pyc
              hook-nnpy.cpython-312.pyc
              hook-notebook.cpython-312.pyc
              hook-numba.cpython-312.pyc
              hook-numbers_parser.cpython-312.pyc
              hook-numcodecs.cpython-312.pyc
              hook-nvidia.cublas.cpython-312.pyc
              hook-nvidia.cuda_cupti.cpython-312.pyc
              hook-nvidia.cuda_nvcc.cpython-312.pyc
              hook-nvidia.cuda_nvrtc.cpython-312.pyc
              hook-nvidia.cuda_runtime.cpython-312.pyc
              hook-nvidia.cudnn.cpython-312.pyc
              hook-nvidia.cufft.cpython-312.pyc
              hook-nvidia.curand.cpython-312.pyc
              hook-nvidia.cusolver.cpython-312.pyc
              hook-nvidia.cusparse.cpython-312.pyc
              hook-nvidia.nccl.cpython-312.pyc
              hook-nvidia.nvjitlink.cpython-312.pyc
              hook-nvidia.nvtx.cpython-312.pyc
              hook-office365.cpython-312.pyc
              hook-onnxruntime.cpython-312.pyc
              hook-opencc.cpython-312.pyc
              hook-OpenGL.cpython-312.pyc
              hook-OpenGL_accelerate.cpython-312.pyc
              hook-openpyxl.cpython-312.pyc
              hook-opentelemetry.cpython-312.pyc
              hook-orjson.cpython-312.pyc
              hook-osgeo.cpython-312.pyc
              hook-pandas_flavor.cpython-312.pyc
              hook-panel.cpython-312.pyc
              hook-parsedatetime.cpython-312.pyc
              hook-parso.cpython-312.pyc
              hook-passlib.cpython-312.pyc
              hook-paste.exceptions.reporter.cpython-312.pyc
              hook-patoolib.cpython-312.pyc
              hook-patsy.cpython-312.pyc
              hook-pdfminer.cpython-312.pyc
              hook-pendulum.cpython-312.pyc
              hook-phonenumbers.cpython-312.pyc
              hook-pingouin.cpython-312.pyc
              hook-pint.cpython-312.pyc
              hook-pinyin.cpython-312.pyc
              hook-platformdirs.cpython-312.pyc
              hook-plotly.cpython-312.pyc
              hook-pptx.cpython-312.pyc
              hook-prettytable.cpython-312.pyc
              hook-psutil.cpython-312.pyc
              hook-psychopy.cpython-312.pyc
              hook-psycopg2.cpython-312.pyc
              hook-publicsuffix2.cpython-312.pyc
              hook-pubsub.core.cpython-312.pyc
              hook-puremagic.cpython-312.pyc
              hook-py.cpython-312.pyc
              hook-pyarrow.cpython-312.pyc
              hook-pycountry.cpython-312.pyc
              hook-pycparser.cpython-312.pyc
              hook-pycrfsuite.cpython-312.pyc
              hook-pydantic.cpython-312.pyc
              hook-pydicom.cpython-312.pyc
              hook-pydivert.cpython-312.pyc
              hook-pyexcel-io.cpython-312.pyc
              hook-pyexcel-ods.cpython-312.pyc
              hook-pyexcel-ods3.cpython-312.pyc
              hook-pyexcel-odsr.cpython-312.pyc
              hook-pyexcel-xls.cpython-312.pyc
              hook-pyexcel-xlsx.cpython-312.pyc
              hook-pyexcel-xlsxw.cpython-312.pyc
              hook-pyexcel.cpython-312.pyc
              hook-pyexcelerate.Writer.cpython-312.pyc
              hook-pyexcel_io.cpython-312.pyc
              hook-pyexcel_ods.cpython-312.pyc
              hook-pyexcel_ods3.cpython-312.pyc
              hook-pyexcel_odsr.cpython-312.pyc
              hook-pyexcel_xls.cpython-312.pyc
              hook-pyexcel_xlsx.cpython-312.pyc
              hook-pyexcel_xlsxw.cpython-312.pyc
              hook-pygraphviz.cpython-312.pyc
              hook-pygwalker.cpython-312.pyc
              hook-pylibmagic.cpython-312.pyc
              hook-pylint.cpython-312.pyc
              hook-pylsl.cpython-312.pyc
              hook-pymediainfo.cpython-312.pyc
              hook-pymorphy3.cpython-312.pyc
              hook-pymssql.cpython-312.pyc
              hook-pynput.cpython-312.pyc
              hook-pyodbc.cpython-312.pyc
              hook-pyopencl.cpython-312.pyc
              hook-pypdfium2.cpython-312.pyc
              hook-pypdfium2_raw.cpython-312.pyc
              hook-pypemicro.cpython-312.pyc
              hook-pyphen.cpython-312.pyc
              hook-pyppeteer.cpython-312.pyc
              hook-pyproj.cpython-312.pyc
              hook-pypsexec.cpython-312.pyc
              hook-pypylon.cpython-312.pyc
              hook-pyqtgraph.cpython-312.pyc
              hook-pyshark.cpython-312.pyc
              hook-pysnmp.cpython-312.pyc
              hook-pystray.cpython-312.pyc
              hook-PyTaskbar.cpython-312.pyc
              hook-pytest.cpython-312.pyc
              hook-pythainlp.cpython-312.pyc
              hook-pythoncom.cpython-312.pyc
              hook-pyttsx.cpython-312.pyc
              hook-pyttsx3.cpython-312.pyc
              hook-pyviz_comms.cpython-312.pyc
              hook-pyvjoy.cpython-312.pyc
              hook-pywintypes.cpython-312.pyc
              hook-pywt.cpython-312.pyc
              hook-qtmodern.cpython-312.pyc
              hook-radicale.cpython-312.pyc
              hook-raven.cpython-312.pyc
              hook-rawpy.cpython-312.pyc
              hook-rdflib.cpython-312.pyc
              hook-redmine.cpython-312.pyc
              hook-regex.cpython-312.pyc
              hook-reportlab.lib.utils.cpython-312.pyc
              hook-reportlab.pdfbase._fontdata.cpython-312.pyc
              hook-resampy.cpython-312.pyc
              hook-rlp.cpython-312.pyc
              hook-rpy2.cpython-312.pyc
              hook-rtree.cpython-312.pyc
              hook-ruamel.yaml.cpython-312.pyc
              hook-rubicon.cpython-312.pyc
              hook-sacremoses.cpython-312.pyc
              hook-sam2.cpython-312.pyc
              hook-saml2.cpython-312.pyc
              hook-schwifty.cpython-312.pyc
              hook-seedir.cpython-312.pyc
              hook-selectolax.cpython-312.pyc
              hook-selenium.cpython-312.pyc
              hook-sentry_sdk.cpython-312.pyc
              hook-setuptools_scm.cpython-312.pyc
              hook-shapely.cpython-312.pyc
              hook-shotgun_api3.cpython-312.pyc
              hook-simplemma.cpython-312.pyc
              hook-skimage.color.cpython-312.pyc
              hook-skimage.cpython-312.pyc
              hook-skimage.data.cpython-312.pyc
              hook-skimage.draw.cpython-312.pyc
              hook-skimage.exposure.cpython-312.pyc
              hook-skimage.feature.cpython-312.pyc
              hook-skimage.filters.cpython-312.pyc
              hook-skimage.future.cpython-312.pyc
              hook-skimage.graph.cpython-312.pyc
              hook-skimage.io.cpython-312.pyc
              hook-skimage.measure.cpython-312.pyc
              hook-skimage.metrics.cpython-312.pyc
              hook-skimage.morphology.cpython-312.pyc
              hook-skimage.registration.cpython-312.pyc
              hook-skimage.restoration.cpython-312.pyc
              hook-skimage.transform.cpython-312.pyc
              hook-sklearn.cluster.cpython-312.pyc
              hook-sklearn.cpython-312.pyc
              hook-sklearn.linear_model.cpython-312.pyc
              hook-sklearn.metrics.cluster.cpython-312.pyc
              hook-sklearn.metrics.cpython-312.pyc
              hook-sklearn.metrics.pairwise.cpython-312.pyc
              hook-sklearn.neighbors.cpython-312.pyc
              hook-sklearn.tree.cpython-312.pyc
              hook-sklearn.utils.cpython-312.pyc
              hook-skyfield.cpython-312.pyc
              hook-slixmpp.cpython-312.pyc
              hook-sounddevice.cpython-312.pyc
              hook-soundfile.cpython-312.pyc
              hook-sound_lib.cpython-312.pyc
              hook-spacy.cpython-312.pyc
              hook-speech_recognition.cpython-312.pyc
              hook-spiceypy.cpython-312.pyc
              hook-spnego.cpython-312.pyc
              hook-srsly.msgpack._packer.cpython-312.pyc
              hook-sspilib.raw.cpython-312.pyc
              hook-statsmodels.tsa.statespace.cpython-312.pyc
              hook-stdnum.cpython-312.pyc
              hook-storm.database.cpython-312.pyc
              hook-sudachipy.cpython-312.pyc
              hook-sunpy.cpython-312.pyc
              hook-sv_ttk.cpython-312.pyc
              hook-swagger_spec_validator.cpython-312.pyc
              hook-sympy.cpython-312.pyc
              hook-tableauhyperapi.cpython-312.pyc
              hook-tables.cpython-312.pyc
              hook-tcod.cpython-312.pyc
              hook-tensorflow.cpython-312.pyc
              hook-textdistance.cpython-312.pyc
              hook-text_unidecode.cpython-312.pyc
              hook-thinc.backends.numpy_ops.cpython-312.pyc
              hook-thinc.cpython-312.pyc
              hook-timezonefinder.cpython-312.pyc
              hook-timm.cpython-312.pyc
              hook-tinycss2.cpython-312.pyc
              hook-tkinterdnd2.cpython-312.pyc
              hook-tkinterweb.cpython-312.pyc
              hook-tkinterweb_tkhtml.cpython-312.pyc
              hook-toga.cpython-312.pyc
              hook-toga_cocoa.cpython-312.pyc
              hook-toga_gtk.cpython-312.pyc
              hook-toga_winforms.cpython-312.pyc
              hook-torch.cpython-312.pyc
              hook-torchaudio.cpython-312.pyc
              hook-torchtext.cpython-312.pyc
              hook-torchvision.cpython-312.pyc
              hook-torchvision.io.image.cpython-312.pyc
              hook-trame.cpython-312.pyc
              hook-trame_client.cpython-312.pyc
              hook-trame_code.cpython-312.pyc
              hook-trame_components.cpython-312.pyc
              hook-trame_datagrid.cpython-312.pyc
              hook-trame_deckgl.cpython-312.pyc
              hook-trame_formkit.cpython-312.pyc
              hook-trame_grid.cpython-312.pyc
              hook-trame_iframe.cpython-312.pyc
              hook-trame_keycloak.cpython-312.pyc
              hook-trame_leaflet.cpython-312.pyc
              hook-trame_markdown.cpython-312.pyc
              hook-trame_matplotlib.cpython-312.pyc
              hook-trame_mesh_streamer.cpython-312.pyc
              hook-trame_plotly.cpython-312.pyc
              hook-trame_pvui.cpython-312.pyc
              hook-trame_quasar.cpython-312.pyc
              hook-trame_rca.cpython-312.pyc
              hook-trame_router.cpython-312.pyc
              hook-trame_simput.cpython-312.pyc
              hook-trame_tauri.cpython-312.pyc
              hook-trame_tweakpane.cpython-312.pyc
              hook-trame_vega.cpython-312.pyc
              hook-trame_vtk.cpython-312.pyc
              hook-trame_vtk3d.cpython-312.pyc
              hook-trame_vtklocal.cpython-312.pyc
              hook-trame_vuetify.cpython-312.pyc
              hook-trame_xterm.cpython-312.pyc
              hook-transformers.cpython-312.pyc
              hook-travertino.cpython-312.pyc
              hook-trimesh.cpython-312.pyc
              hook-triton.cpython-312.pyc
              hook-ttkthemes.cpython-312.pyc
              hook-ttkwidgets.cpython-312.pyc
              hook-tzdata.cpython-312.pyc
              hook-tzwhere.cpython-312.pyc
              hook-u1db.cpython-312.pyc
              hook-ultralytics.cpython-312.pyc
              hook-umap.cpython-312.pyc
              hook-unidecode.cpython-312.pyc
              hook-uniseg.cpython-312.pyc
              hook-urllib3.cpython-312.pyc
              hook-urllib3_future.cpython-312.pyc
              hook-usb.cpython-312.pyc
              hook-uvicorn.cpython-312.pyc
              hook-uvloop.cpython-312.pyc
              hook-vaderSentiment.cpython-312.pyc
              hook-vtkmodules.vtkAcceleratorsVTKmCore.cpython-312.pyc
              hook-vtkmodules.vtkAcceleratorsVTKmDataModel.cpython-312.pyc
              hook-vtkmodules.vtkAcceleratorsVTKmFilters.cpython-312.pyc
              hook-vtkmodules.vtkChartsCore.cpython-312.pyc
              hook-vtkmodules.vtkCommonColor.cpython-312.pyc
              hook-vtkmodules.vtkCommonComputationalGeometry.cpython-312.pyc
              hook-vtkmodules.vtkCommonDataModel.cpython-312.pyc
              hook-vtkmodules.vtkCommonExecutionModel.cpython-312.pyc
              hook-vtkmodules.vtkCommonMath.cpython-312.pyc
              hook-vtkmodules.vtkCommonMisc.cpython-312.pyc
              hook-vtkmodules.vtkCommonPython.cpython-312.pyc
              hook-vtkmodules.vtkCommonSystem.cpython-312.pyc
              hook-vtkmodules.vtkCommonTransforms.cpython-312.pyc
              hook-vtkmodules.vtkDomainsChemistry.cpython-312.pyc
              hook-vtkmodules.vtkDomainsChemistryOpenGL2.cpython-312.pyc
              hook-vtkmodules.vtkFiltersAMR.cpython-312.pyc
              hook-vtkmodules.vtkFiltersCellGrid.cpython-312.pyc
              hook-vtkmodules.vtkFiltersCore.cpython-312.pyc
              hook-vtkmodules.vtkFiltersExtraction.cpython-312.pyc
              hook-vtkmodules.vtkFiltersFlowPaths.cpython-312.pyc
              hook-vtkmodules.vtkFiltersGeneral.cpython-312.pyc
              hook-vtkmodules.vtkFiltersGeneric.cpython-312.pyc
              hook-vtkmodules.vtkFiltersGeometry.cpython-312.pyc
              hook-vtkmodules.vtkFiltersGeometryPreview.cpython-312.pyc
              hook-vtkmodules.vtkFiltersHybrid.cpython-312.pyc
              hook-vtkmodules.vtkFiltersHyperTree.cpython-312.pyc
              hook-vtkmodules.vtkFiltersImaging.cpython-312.pyc
              hook-vtkmodules.vtkFiltersModeling.cpython-312.pyc
              hook-vtkmodules.vtkFiltersParallel.cpython-312.pyc
              hook-vtkmodules.vtkFiltersParallelDIY2.cpython-312.pyc
              hook-vtkmodules.vtkFiltersParallelImaging.cpython-312.pyc
              hook-vtkmodules.vtkFiltersParallelStatistics.cpython-312.pyc
              hook-vtkmodules.vtkFiltersPoints.cpython-312.pyc
              hook-vtkmodules.vtkFiltersProgrammable.cpython-312.pyc
              hook-vtkmodules.vtkFiltersPython.cpython-312.pyc
              hook-vtkmodules.vtkFiltersReduction.cpython-312.pyc
              hook-vtkmodules.vtkFiltersSelection.cpython-312.pyc
              hook-vtkmodules.vtkFiltersSMP.cpython-312.pyc
              hook-vtkmodules.vtkFiltersSources.cpython-312.pyc
              hook-vtkmodules.vtkFiltersStatistics.cpython-312.pyc
              hook-vtkmodules.vtkFiltersTemporal.cpython-312.pyc
              hook-vtkmodules.vtkFiltersTensor.cpython-312.pyc
              hook-vtkmodules.vtkFiltersTexture.cpython-312.pyc
              hook-vtkmodules.vtkFiltersTopology.cpython-312.pyc
              hook-vtkmodules.vtkFiltersVerdict.cpython-312.pyc
              hook-vtkmodules.vtkGeovisCore.cpython-312.pyc
              hook-vtkmodules.vtkImagingColor.cpython-312.pyc
              hook-vtkmodules.vtkImagingCore.cpython-312.pyc
              hook-vtkmodules.vtkImagingFourier.cpython-312.pyc
              hook-vtkmodules.vtkImagingGeneral.cpython-312.pyc
              hook-vtkmodules.vtkImagingHybrid.cpython-312.pyc
              hook-vtkmodules.vtkImagingMath.cpython-312.pyc
              hook-vtkmodules.vtkImagingMorphological.cpython-312.pyc
              hook-vtkmodules.vtkImagingOpenGL2.cpython-312.pyc
              hook-vtkmodules.vtkImagingSources.cpython-312.pyc
              hook-vtkmodules.vtkImagingStatistics.cpython-312.pyc
              hook-vtkmodules.vtkImagingStencil.cpython-312.pyc
              hook-vtkmodules.vtkInfovisCore.cpython-312.pyc
              hook-vtkmodules.vtkInfovisLayout.cpython-312.pyc
              hook-vtkmodules.vtkInteractionImage.cpython-312.pyc
              hook-vtkmodules.vtkInteractionStyle.cpython-312.pyc
              hook-vtkmodules.vtkInteractionWidgets.cpython-312.pyc
              hook-vtkmodules.vtkIOAMR.cpython-312.pyc
              hook-vtkmodules.vtkIOAsynchronous.cpython-312.pyc
              hook-vtkmodules.vtkIOCellGrid.cpython-312.pyc
              hook-vtkmodules.vtkIOCesium3DTiles.cpython-312.pyc
              hook-vtkmodules.vtkIOCGNSReader.cpython-312.pyc
              hook-vtkmodules.vtkIOChemistry.cpython-312.pyc
              hook-vtkmodules.vtkIOCityGML.cpython-312.pyc
              hook-vtkmodules.vtkIOCONVERGECFD.cpython-312.pyc
              hook-vtkmodules.vtkIOCore.cpython-312.pyc
              hook-vtkmodules.vtkIOEngys.cpython-312.pyc
              hook-vtkmodules.vtkIOEnSight.cpython-312.pyc
              hook-vtkmodules.vtkIOERF.cpython-312.pyc
              hook-vtkmodules.vtkIOExodus.cpython-312.pyc
              hook-vtkmodules.vtkIOExport.cpython-312.pyc
              hook-vtkmodules.vtkIOExportGL2PS.cpython-312.pyc
              hook-vtkmodules.vtkIOExportPDF.cpython-312.pyc
              hook-vtkmodules.vtkIOFDS.cpython-312.pyc
              hook-vtkmodules.vtkIOFLUENTCFF.cpython-312.pyc
              hook-vtkmodules.vtkIOGeoJSON.cpython-312.pyc
              hook-vtkmodules.vtkIOGeometry.cpython-312.pyc
              hook-vtkmodules.vtkIOH5part.cpython-312.pyc
              hook-vtkmodules.vtkIOH5Rage.cpython-312.pyc
              hook-vtkmodules.vtkIOHDF.cpython-312.pyc
              hook-vtkmodules.vtkIOImage.cpython-312.pyc
              hook-vtkmodules.vtkIOImport.cpython-312.pyc
              hook-vtkmodules.vtkIOInfovis.cpython-312.pyc
              hook-vtkmodules.vtkIOIOSS.cpython-312.pyc
              hook-vtkmodules.vtkIOLegacy.cpython-312.pyc
              hook-vtkmodules.vtkIOLSDyna.cpython-312.pyc
              hook-vtkmodules.vtkIOMINC.cpython-312.pyc
              hook-vtkmodules.vtkIOMotionFX.cpython-312.pyc
              hook-vtkmodules.vtkIOMovie.cpython-312.pyc
              hook-vtkmodules.vtkIONetCDF.cpython-312.pyc
              hook-vtkmodules.vtkIOOggTheora.cpython-312.pyc
              hook-vtkmodules.vtkIOOMF.cpython-312.pyc
              hook-vtkmodules.vtkIOParallel.cpython-312.pyc
              hook-vtkmodules.vtkIOParallelExodus.cpython-312.pyc
              hook-vtkmodules.vtkIOParallelLSDyna.cpython-312.pyc
              hook-vtkmodules.vtkIOParallelXML.cpython-312.pyc
              hook-vtkmodules.vtkIOPIO.cpython-312.pyc
              hook-vtkmodules.vtkIOPLY.cpython-312.pyc
              hook-vtkmodules.vtkIOSegY.cpython-312.pyc
              hook-vtkmodules.vtkIOSQL.cpython-312.pyc
              hook-vtkmodules.vtkIOTecplotTable.cpython-312.pyc
              hook-vtkmodules.vtkIOTRUCHAS.cpython-312.pyc
              hook-vtkmodules.vtkIOVeraOut.cpython-312.pyc
              hook-vtkmodules.vtkIOVideo.cpython-312.pyc
              hook-vtkmodules.vtkIOVPIC.cpython-312.pyc
              hook-vtkmodules.vtkIOXdmf2.cpython-312.pyc
              hook-vtkmodules.vtkIOXML.cpython-312.pyc
              hook-vtkmodules.vtkIOXMLParser.cpython-312.pyc
              hook-vtkmodules.vtkParallelCore.cpython-312.pyc
              hook-vtkmodules.vtkPythonContext2D.cpython-312.pyc
              hook-vtkmodules.vtkRenderingAnnotation.cpython-312.pyc
              hook-vtkmodules.vtkRenderingCellGrid.cpython-312.pyc
              hook-vtkmodules.vtkRenderingContext2D.cpython-312.pyc
              hook-vtkmodules.vtkRenderingContextOpenGL2.cpython-312.pyc
              hook-vtkmodules.vtkRenderingCore.cpython-312.pyc
              hook-vtkmodules.vtkRenderingExternal.cpython-312.pyc
              hook-vtkmodules.vtkRenderingFreeType.cpython-312.pyc
              hook-vtkmodules.vtkRenderingGL2PSOpenGL2.cpython-312.pyc
              hook-vtkmodules.vtkRenderingHyperTreeGrid.cpython-312.pyc
              hook-vtkmodules.vtkRenderingImage.cpython-312.pyc
              hook-vtkmodules.vtkRenderingLabel.cpython-312.pyc
              hook-vtkmodules.vtkRenderingLICOpenGL2.cpython-312.pyc
              hook-vtkmodules.vtkRenderingLOD.cpython-312.pyc
              hook-vtkmodules.vtkRenderingMatplotlib.cpython-312.pyc
              hook-vtkmodules.vtkRenderingOpenGL2.cpython-312.pyc
              hook-vtkmodules.vtkRenderingParallel.cpython-312.pyc
              hook-vtkmodules.vtkRenderingSceneGraph.cpython-312.pyc
              hook-vtkmodules.vtkRenderingUI.cpython-312.pyc
              hook-vtkmodules.vtkRenderingVolume.cpython-312.pyc
              hook-vtkmodules.vtkRenderingVolumeAMR.cpython-312.pyc
              hook-vtkmodules.vtkRenderingVolumeOpenGL2.cpython-312.pyc
              hook-vtkmodules.vtkRenderingVR.cpython-312.pyc
              hook-vtkmodules.vtkRenderingVRModels.cpython-312.pyc
              hook-vtkmodules.vtkRenderingVtkJS.cpython-312.pyc
              hook-vtkmodules.vtkSerializationManager.cpython-312.pyc
              hook-vtkmodules.vtkTestingRendering.cpython-312.pyc
              hook-vtkmodules.vtkViewsContext2D.cpython-312.pyc
              hook-vtkmodules.vtkViewsCore.cpython-312.pyc
              hook-vtkmodules.vtkViewsInfovis.cpython-312.pyc
              hook-vtkmodules.vtkWebCore.cpython-312.pyc
              hook-vtkmodules.vtkWebGLExporter.cpython-312.pyc
              hook-vtkpython.cpython-312.pyc
              hook-wavefile.cpython-312.pyc
              hook-weasyprint.cpython-312.pyc
              hook-web3.cpython-312.pyc
              hook-webassets.cpython-312.pyc
              hook-webrtcvad.cpython-312.pyc
              hook-websockets.cpython-312.pyc
              hook-webview.cpython-312.pyc
              hook-win32com.cpython-312.pyc
              hook-wordcloud.cpython-312.pyc
              hook-workflow.cpython-312.pyc
              hook-wx.lib.activex.cpython-312.pyc
              hook-wx.lib.pubsub.cpython-312.pyc
              hook-wx.xrc.cpython-312.pyc
              hook-xarray.cpython-312.pyc
              hook-Xlib.cpython-312.pyc
              hook-xml.dom.html.HTMLDocument.cpython-312.pyc
              hook-xml.sax.saxexts.cpython-312.pyc
              hook-xmldiff.cpython-312.pyc
              hook-xmlschema.cpython-312.pyc
              hook-xsge_gui.cpython-312.pyc
              hook-xyzservices.cpython-312.pyc
              hook-yapf_third_party.cpython-312.pyc
              hook-z3c.rml.cpython-312.pyc
              hook-zarr.cpython-312.pyc
              hook-zeep.cpython-312.pyc
              hook-zmq.cpython-312.pyc
              hook-zoneinfo.cpython-312.pyc
              hook-_mssql.cpython-312.pyc
              hook-_mysql.cpython-312.pyc
              __init__.cpython-312.pyc
          utils/
            nvidia_cuda.py
            vtkmodules.py
            __init__.py
            __pycache__/
              nvidia_cuda.cpython-312.pyc
              vtkmodules.cpython-312.pyc
              __init__.cpython-312.pyc
          __pycache__/
            compat.cpython-312.pyc
            __init__.cpython-312.pyc
            __init__.cpython-39.pyc
        _sounddevice_data/
          __init__.py
          portaudio-binaries/
            libportaudio64bit-asio.dll
            libportaudio64bit.dll
            README.md
          __pycache__/
            __init__.cpython-312.pyc
        _yaml/
          __init__.py
          __pycache__/
            __init__.cpython-312.pyc
        __pycache__/
          decorator.cpython-312.pyc
          isympy.cpython-312.pyc
          pefile.cpython-312.pyc
          peutils.cpython-312.pyc
          pylab.cpython-312.pyc
          pythoncom.cpython-312.pyc
          six.cpython-312.pyc
          sounddevice.cpython-312.pyc
          srt.cpython-312.pyc
          threadpoolctl.cpython-312.pyc
          typing_extensions.cpython-312.pyc
          whisper.cpython-312.pyc
          _sounddevice.cpython-312.pyc
          __editable___mercurius_infinite_1_0_0_finder.cpython-312.pyc
    Scripts/
      activate
      activate.bat
      Activate.ps1
      clear_comtypes_cache.exe
      cpuinfo.exe
      deactivate.bat
      distro.exe
      dotenv.exe
      f2py.exe
      find-corrupt-whisper-files.py
      fonttools.exe
      httpx.exe
      huggingface-cli.exe
      imageio_download_bin.exe
      imageio_remove_bin.exe
      isympy.exe
      jsonschema.exe
      merc-start.exe
      normalizer.exe
      numpy-config.exe
      openai.exe
      pip.exe
      pip3.12.exe
      pip3.exe
      pyftmerge.exe
      pyftsubset.exe
      pyi-archive_viewer.exe
      pyi-bindepend.exe
      pyi-grab_version.exe
      pyi-makespec.exe
      pyi-set_version.exe
      pyinstaller.exe
      pylupdate5.exe
      pyrcc5.exe
      pytesseract.exe
      python.exe
      pythonw.exe
      pytube.exe
      pyuic5.exe
      pywin32_postinstall.exe
      pywin32_postinstall.py
      pywin32_testall.exe
      pywin32_testall.py
      rrd2whisper.py
      srt
      srt-deduplicate
      srt-fixed-timeshift
      srt-linear-timeshift
      srt-lines-matching
      srt-mux
      srt-normalise
      srt-play
      srt-process
      streamlit.cmd
      streamlit.exe
      tiny-agents.exe
      torchfrtrace.exe
      torchrun.exe
      tqdm.exe
      transformers-cli.exe
      transformers.exe
      ttx.exe
      ultralytics.exe
      update-storage-times.py
      vosk-transcriber.exe
      watchmedo.exe
      websockets.exe
      whisper-auto-resize.py
      whisper-auto-update.py
      whisper-create.py
      whisper-diff.py
      whisper-dump.py
      whisper-fetch.py
      whisper-fill.py
      whisper-info.py
      whisper-merge.py
      whisper-resize.py
      whisper-set-aggregation-method.py
      whisper-set-xfilesfactor.py
      whisper-update.py
      yolo.exe
      __pycache__/
        find-corrupt-whisper-files.cpython-312.pyc
        pywin32_postinstall.cpython-312.pyc
        pywin32_testall.cpython-312.pyc
        rrd2whisper.cpython-312.pyc
        update-storage-times.cpython-312.pyc
        whisper-auto-resize.cpython-312.pyc
        whisper-auto-update.cpython-312.pyc
        whisper-create.cpython-312.pyc
        whisper-diff.cpython-312.pyc
        whisper-dump.cpython-312.pyc
        whisper-fetch.cpython-312.pyc
        whisper-fill.cpython-312.pyc
        whisper-info.cpython-312.pyc
        whisper-merge.cpython-312.pyc
        whisper-resize.cpython-312.pyc
        whisper-set-aggregation-method.cpython-312.pyc
        whisper-set-xfilesfactor.cpython-312.pyc
        whisper-update.cpython-312.pyc
    share/
      jupyter/
        nbextensions/
          pydeck/
            extensionRequires.js
            index.js
            index.js.map
      man/
        man1/
          isympy.1
          ttx.1
  .vscode/
    settings.json
  agents/
    adaptive_trader.py
    agent_comm.py
    agent_generator.py
    memory_manager.py
    azr/
      azr_supervisor.py
  config/
    config.yaml
    config_schema.py
    config_validator.py
    llm_config.yaml
  core/
    auto_tester.py
    auto_updater.py
    context_adapter.py
    dialogue_manager.py
    emotion_analyzer.py
    executor.py
    learning.py
    pipeline_controller.py
    sandbox_executor.py
    self_generator.py
    self_reflection.py
    sensory_bus.py
    system_bridge.py
  culture/
    base_manifesto.md
    culture_manager.py
  data/
    feature_engineering.py
    learning_pulses.json
    market_data_handler.py
  deployment/
    autostart_manager.py
    remote_access.py
    task_scheduler.py
    telemetry_monitor.py
  docs/
    ARCHITECTURE.md
    USAGE_GUIDE.md
  evolution/
    auto_updater.py
    behavior_simulator.py
    logic_injector.py
    neural_plasticity.py
    web_scraper.py
  exports/
    build_dashboard.py
    build_mac.sh
    build_win.bat
    README.txt
  generated_agents/
    __init__.py
  installer/
    package_builder.py
  integrations/
    finviz_connector.py
    tradingview_feed.py
  interface/
    dashboard_stub.py
  learning/
    document_parser.py
    video_learner.py
    __init__.py
  llm/
    llm_router.py
  logs/
    system.log
    upgrade_status.md
  memory/
    dialog_style_profile.json
    episodic_memory.py
    long_term_memory.py
    memory_core.py
    neural_plasticity.py
    synaptic_log.py
  mercurius_infinite.egg-info/
    dependency_links.txt
    entry_points.txt
    PKG-INFO
    SOURCES.txt
    top_level.txt
  models/
    goal_manager.py
    model_trainer.py
    neo_learning.py
    neural_network.py
    metrics/
      performance_metrics.py
  modules/
    azr_reasoning.py
    gesture.py
    nlp.py
    planner.py
    speech.py
    supervisor.py
    AZR/
      fine_tuner.py
      train_model.py
      __init__.py
    dashboard/
      control_panel.py
      dashboard_streamlit.py
      dashboard_utils.py
      __init__.py
    experience/
      azr_analyzer.py
      experience_memory.py
    GPT/
      gpt_runner.py
      prompt_builder.py
      __init__.py
    io_modules/
      mobile_connect.py
    Neo/
      adaptive_weights.py
      agent_generator.py
      auto_refinement.py
      context_memory.py
      interaction_style.py
      memory_strengthener.py
      neuro_learning_engine.py
      self_awareness.py
      self_reflection.py
      trainer_orchestrator.py
      __init__.py
      agent_forge/
        agent_generator.py
      audio/
        emotion_recognizer.py
        hotword_detector.py
        tts_engine.py
      cognitive_simulation/
        cognitive_simulator.py
      consciousness/
        self_awareness.py
      docgen/
        auto_docgen.py
      hierarchy_manager/
        hierarchy_controller.py
      identity/
        personality_engine.py
      memory/
        conversation_memory.py
      strategic_coordinator/
        strategic_coordinator.py
      vision/
        visual_input.py
      __pycache__/
        trainer_orchestrator.cpython-312.pyc
        __init__.cpython-312.pyc
    Ollama3/
      parse_response.py
      prompt_builder.py
      run_ollama.py
      __init__.py
    Reasoner/
      context_analyzer.py
      logic_chain.py
      meta_reasoner.py
      reasoning_core.py
      __init__.py
      strategic/
        intuition_engine.py
  orchestrator/
    autonomy_controller.py
    multimodal_controller.py
  rag/
    insight_rag.py
  scheduler/
    auto_scheduler.py
    task_registry.py
  security/
    code_signer.py
    code_verifier.py
    gpg_support.py
    pairing_manager.py
  sensors/
    environment_analyzer.py
  strategies/
    strategy_executor.py
  tests/
    test_autonomia_cognitiva.py
    test_end2end.py
    test_multimodal.py
    test_neuro_learning.py
    test_orchestrator.py
    test_planner.py
    test_supervisione.py
  tools/
    console.py
    feedback_collector.py
    live_logger.py
  trading/
    trading_core.py
  utils/
    config_loader.py
    environment.py
    logger.py
    telemetry.py
  vision/
    capture.py
    image_vision.py
    object_vision.py
    ocr_module.py
    ocr_reader.py
    voice_trigger.py
    yolo_handler.py
    __init__.py
  voice/
    stt.py
    tts.py
    voice_identity.py
    whisper_engine.py
    whisper_stt.py
    yolov8_engine.py

### --- generated_agents/ApprendimentoGenericoAgent.py --- ###
"""
Agente auto-generato basato sul concetto: apprendimento generico – Modello: rete neurale generativa multi-scopo.
"""
from modules.ai_kernel.agent_core import AgentCore

class ApprendimentoGenericoAgent(AgentCore):
    def __init__(self):
        super().__init__(name="ApprendimentoGenericoAgent")
        # Inizializzazione aggiuntiva basata sul concetto estratto (se necessaria)

    def think(self, input_data):
        # Metodo di esempio che utilizza il concetto appreso
        print(f"🧠 {self.name} applica il concetto di apprendimento generico all'input fornito.")
        return "Insight basato su rete neurale generativa multi-scopo"

### --- generated_agents/__init__.py --- ###
# Inizializzazione agenti generati

### --- genesis_core/autogpt_bridge.py --- ###
import subprocess
import os

def run_autogpt(task_prompt: str):
    os.chdir("AutoGPT")
    with open("input.txt", "w") as f:
        f.write(task_prompt)

    result = subprocess.run(["python", "-m", "autogpt"], capture_output=True, text=True)
    return result.stdout

### --- goals.txt --- ###
Genera uno script Python che stampa 'Hello Strategic Brain'

### --- installer/package_builder.py --- ###
# installer/package_builder.py

"""
Modulo: package_builder.py
Descrizione: Creazione automatica di eseguibili desktop Mercurius∞ per Windows, Linux, Mac.
"""

import os
import subprocess
from datetime import datetime

class PackageBuilder:
    def __init__(self, exports_dir="exports/"):
        self.exports_dir = exports_dir
        os.makedirs(exports_dir, exist_ok=True)

    def build_windows_exe(self, entry_script: str, icon: str = None):
        cmd = [
            "pyinstaller", "--onefile", "--noconsole", entry_script,
            "--distpath", self.exports_dir,
            "--name", "Mercurius"
        ]
        if icon:
            cmd += ["--icon", icon]
        self._run(cmd, "windows")

    def build_linux_sh(self, entry_script: str):
        output_file = os.path.join(self.exports_dir, "mercurius.sh")
        with open(output_file, "w") as f:
            f.write(f"#!/bin/bash\npython3 {entry_script}")
        os.chmod(output_file, 0o755)
        self._log_build("linux", output_file)

    def build_mac_app(self, entry_script: str):
        app_path = os.path.join(self.exports_dir, "Mercurius.app")
        os.makedirs(app_path, exist_ok=True)
        os.symlink(entry_script, os.path.join(app_path, "Mercurius"))
        self._log_build("mac", app_path)

    def _run(self, cmd, platform: str):
        try:
            subprocess.run(cmd, check=True)
            self._log_build(platform, self.exports_dir)
        except subprocess.CalledProcessError as e:
            print(f"❌ Errore durante build {platform}: {e}")

    def _log_build(self, platform: str, path: str):
        log_path = os.path.join(self.exports_dir, "README.txt")
        with open(log_path, "a") as f:
            f.write(f"[{datetime.now().isoformat()}] Build completata ({platform}): {path}\n")

### --- integrations/README.md --- ###
# 🌐 Integration – Interoperabilità

Modulo per connettività con ambienti esterni: GitHub, Colab, sistema operativo.

## Contenuto

- `github_sync.py`
- `colab_linker.py`
- `system_control.py`

## Obiettivo

Gestire flussi DevOps, sincronizzazioni remote e automazioni locali.

### --- integrations/__init__.py --- ###


### --- integrations/agenda/__init__.py --- ###


### --- integrations/agenda/agenda_manager.py --- ###
# integrations/agenda/agenda_manager.py
"""
Modulo: agenda_manager.py
Descrizione: Gestione eventi calendario (Google Calendar oppure ICS locale).
• crea_evento
• lista_eventi
• elimina_evento
"""

import os
from datetime import datetime, timedelta
from pathlib import Path
import json

ICS_FILE = Path("integrations/agenda/local_calendar.json")  # fallback JSON

class AgendaManager:
    def __init__(self):
        self._load_local()

    # ---------- API Calendario ----------
    def crea_evento(self, titolo: str, start: datetime, end: datetime | None = None):
        event = {
            "id": len(self._events) + 1,
            "title": titolo,
            "start": start.isoformat(),
            "end": (end or start + timedelta(hours=1)).isoformat(),
        }
        self._events.append(event)
        self._save_local()
        return event

    def lista_eventi(self, date: datetime | None = None):
        if date:
            return [e for e in self._events if e["start"].startswith(date.date().isoformat())]
        return self._events

    def elimina_evento(self, event_id: int):
        self._events = [e for e in self._events if e["id"] != event_id]
        self._save_local()

    # ---------- interno ----------
    def _load_local(self):
        if ICS_FILE.exists():
            self._events = json.loads(ICS_FILE.read_text(encoding="utf-8"))
        else:
            self._events = []

    def _save_local(self):
        ICS_FILE.parent.mkdir(parents=True, exist_ok=True)
        ICS_FILE.write_text(json.dumps(self._events, indent=2), encoding="utf-8")

### --- integrations/bridge_josch.py --- ###
"""bridge_josch.py
===================
Interfaccia FastAPI per comunicare con il sistema "Josh" (alias JOSCH).

Il modulo espone un piccolo server FastAPI che consente l'esecuzione remota
di comandi su un sistema esterno e fornisce inoltre la funzione
``send_command_to_pc`` da utilizzare all'interno di Mercurius∞ per inviare
comandi al bridge.
"""

import requests

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import subprocess
import uvicorn
import time

app = FastAPI(title="JOSCH Bridge")
start_time = time.time()


class CommandRequest(BaseModel):
    command: str
    mode: str = "cmd"  # cmd | powershell | python


@app.get("/ping")
def ping():
    return {"status": "online", "uptime": f"{int(time.time() - start_time)}s"}


@app.post("/cmd")
def run_command(req: CommandRequest):
    try:
        if req.mode == "cmd":
            result = subprocess.run(req.command, shell=True, capture_output=True, text=True)
        elif req.mode == "powershell":
            result = subprocess.run(["powershell", "-Command", req.command], capture_output=True, text=True)
        elif req.mode == "python":
            result = subprocess.run(["python", "-c", req.command], capture_output=True, text=True)
        else:
            raise HTTPException(status_code=400, detail="Invalid mode specified")

        return {
            "returncode": result.returncode,
            "stdout": result.stdout.strip(),
            "stderr": result.stderr.strip(),
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


def send_command_to_pc(command: str, mode: str = "cmd", base_url: str = "http://localhost:3020") -> dict:
    """Invia un comando al bridge JOSCH e restituisce la risposta JSON."""
    try:
        res = requests.post(
            f"{base_url}/cmd",
            json={"command": command, "mode": mode},
            timeout=5,
        )
        if res.status_code == 200:
            return res.json()
        return {"error": res.text, "status": res.status_code}
    except Exception as exc:
        return {"error": str(exc)}


def start_bridge(host="0.0.0.0", port=3020):
    uvicorn.run(app, host=host, port=port)


if __name__ == "__main__":
    start_bridge()

### --- integrations/colab_linker.py --- ###
class ColabLinker:
    def __init__(self):
        self.name = "ColabLinker"

    def send_code(self, module: str):
        return f"[{self.name}] Modulo {module} inviato a Colab"

### --- integrations/finviz_connector.py --- ###
"""
finviz_connector.py
===================
Scraping dei fondamentali e notizie da Finviz per Mercurius∞.
"""

import requests
from bs4 import BeautifulSoup


class FinvizConnector:
    def __init__(self):
        self.base = "https://finviz.com/quote.ashx?t="

    def fetch(self, symbol):
        url = self.base + symbol
        headers = {"User-Agent": "Mozilla/5.0"}
        soup = BeautifulSoup(requests.get(url, headers=headers).text, "html.parser")
        data = {}
        for row in soup.select("table.snapshot-table2 tr"):
            cells = row.find_all("td")
            for i in range(0, len(cells), 2):
                if i+1 < len(cells):
                    key = cells[i].text.strip()
                    val = cells[i+1].text.strip()
                    data[key] = val
        return data

### --- integrations/smart_home/__init__.py --- ###


### --- integrations/smart_home/home_assistant_bridge.py --- ###
# integrations/smart_home/home_assistant_bridge.py
"""
Modulo: home_assistant_bridge.py
Descrizione: Controlla dispositivi Home Assistant via REST API.
"""

import os
import requests

HASS_URL = os.getenv("HASS_URL", "http://localhost:8123")
HASS_TOKEN = os.getenv("HASS_TOKEN", "")

HEADERS = {"Authorization": f"Bearer {HASS_TOKEN}", "Content-Type": "application/json"}

class HomeAssistantBridge:
    def call_service(self, domain: str, service: str, data: dict):
        url = f"{HASS_URL}/api/services/{domain}/{service}"
        r = requests.post(url, json=data, headers=HEADERS, timeout=5)
        return r.ok

    # esempi pratici
    def turn_on_light(self, entity_id: str):
        return self.call_service("light", "turn_on", {"entity_id": entity_id})

    def set_temperature(self, entity_id: str, temp: float):
        return self.call_service("climate", "set_temperature",
                                 {"entity_id": entity_id, "temperature": temp})

### --- integrations/system_control.py --- ###
class SystemControl:
    def __init__(self):
        self.name = "SystemControl"

    def execute(self, system_command: str) -> str:
        return f"[{self.name}] Comando eseguito: {system_command}"

### --- integrations/tradingview_feed.py --- ###
"""
tradingview_feed.py
===================
Feed di dati simulato compatibile con layout TradingView. Simula ticker in tempo reale.
"""

import random
import time
from threading import Thread

class TradingViewFeed:
    def __init__(self, symbols, callback=None, interval=1.0):
        self.symbols = symbols
        self.interval = interval
        self.callback = callback
        self.running = False

    def _generate_tick(self, symbol):
        price = round(random.uniform(100, 500), 2)
        volume = random.randint(1000, 10000)
        return {
            "symbol": symbol,
            "price": price,
            "volume": volume,
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }

    def _run_feed(self):
        while self.running:
            for symbol in self.symbols:
                tick = self._generate_tick(symbol)
                if self.callback:
                    self.callback(tick)
            time.sleep(self.interval)

    def start(self):
        self.running = True
        Thread(target=self._run_feed, daemon=True).start()

    def stop(self):
        self.running = False

### --- interface/dashboard_stub.py --- ###
# interface/dashboard.py

"""
Mercurius∞ – Interfaccia Dashboard Unificata (CLI + Streamlit)
Autore: Mercurius Dev AI
Funzioni:
- KPI dinamici (CLI & GUI)
- Drag-and-drop file multimediali
- URL input (YouTube, PDF, Immagini, Web)
- OCR, Parser, Video Analyzer
"""

import streamlit as st
import tempfile
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from learning.video_learner import extract_insights_from_video
from learning.document_parser import parse_document
from vision.ocr_module import extract_text_from_image

# ─── Configurazione Base ───────────────────────────────────────────────────────
st.set_page_config(page_title="Mercurius∞ Dashboard", layout="wide")
st.title("🧠 Mercurius∞ Dashboard – Centro di Controllo")

if "kpi" not in st.session_state:
    st.session_state["kpi"] = {}
if "result" not in st.session_state:
    st.session_state["result"] = ""

# ─── KPI View ──────────────────────────────────────────────────────────────────
with st.sidebar:
    st.header("📊 KPI & Stato")
    for k, v in st.session_state["kpi"].items():
        st.text(f"{k}: {v}")

# ─── Tab ───────────────────────────────────────────────────────────────────────
tab1, tab2 = st.tabs(["🌐 Input Multicanale", "📖 Output / Risultati"])

# ─── Tab 1: Input ──────────────────────────────────────────────────────────────
with tab1:
    st.subheader("🔗 Inserisci un URL (YouTube, pagina, documento)")
    url = st.text_input("📎 URL:")
    if url:
        st.info("📺 Estrazione in corso da URL...")
        try:
            output = extract_insights_from_video(url)
            st.session_state["result"] = output
            st.session_state["kpi"]["URL Status"] = "✅ Elaborato"
        except Exception as e:
            st.session_state["result"] = f"Errore: {e}"
            st.session_state["kpi"]["URL Status"] = "❌ Errore"

    st.subheader("📁 Trascina un file (PDF, Immagine, Video)")
    uploaded_file = st.file_uploader("Drag & Drop / Seleziona file", type=["pdf", "jpg", "jpeg", "png", "mp4", "mov"])

    if uploaded_file is not None:
        suffix = os.path.splitext(uploaded_file.name)[1].lower()
        with tempfile.NamedTemporaryFile(delete=False, suffix=suffix) as tmp:
            tmp.write(uploaded_file.getvalue())
            filepath = tmp.name

        st.success(f"📂 File ricevuto: {uploaded_file.name}")
        result = None

        try:
            if suffix == ".pdf":
                st.info("📑 Analisi PDF...")
                result = parse_document(filepath)
            elif suffix in [".jpg", ".jpeg", ".png"]:
                st.info("🖼️ OCR Immagine...")
                result = extract_text_from_image(filepath)
            elif suffix in [".mp4", ".mov"]:
                st.warning("🎞️ Supporto video locale in sviluppo. Usa un URL YouTube.")
            else:
                st.error("⚠️ Tipo di file non supportato.")

            if result:
                st.session_state["result"] = result
                st.session_state["kpi"]["File Status"] = "✅ Elaborato"
        except Exception as e:
            st.session_state["result"] = f"Errore: {e}"
            st.session_state["kpi"]["File Status"] = "❌ Errore"

# ─── Tab 2: Output ─────────────────────────────────────────────────────────────
with tab2:
    st.subheader("📖 Risultati Apprendimento")
    st.code(st.session_state.get("result", "⏳ Nessun contenuto ancora elaborato."), language="markdown")

# ─── Stub CLI (Fallback o uso parallelo) ───────────────────────────────────────
class DashboardStub:
    def __init__(self):
        self.kpi = {}

    def update(self, name, value):
        self.kpi[name] = value

    def show(self):
        print("=== MERCURIUS∞ CLI DASHBOARD ===")
        for k, v in self.kpi.items():
            print(f"{k:<15}: {v}")

### --- interface/genesis_bridge.py --- ###
class GenesisBridge:
    def __init__(self):
        self.hotword = "Hey Mercurius, attiva GENESIS"

    def activate_from_voice(self, phrase: str) -> bool:
        return phrase.strip().lower() == self.hotword.lower()

    def activate_from_command(self, cmd: str) -> bool:
        return cmd.strip().lower() == "#genesis_mode"

    def trigger_activation(self, method: str = "auto"):
        print("🚀 Attivazione GENESIS in corso via:", method)
        return True

### --- interop/colab_bridge.py --- ###
"""
Modulo: colab_bridge.py
Descrizione: Rilevamento ed estensione delle capacità di esecuzione su Google Colab.
"""

def is_colab():
    try:
        import google.colab as _
        return True
    except ImportError:
        return False

def setup_drive():
    if is_colab():
        from google.colab import drive
        drive.mount('/content/drive')
        print("✅ Google Drive montato.")
    else:
        print("⚠️ Non in ambiente Colab: salto montaggio Drive.")

if __name__ == "__main__":
    setup_drive()

### --- interop/github_handler.py --- ###
# interop/github_handler.py

"""
Modulo: github_handler.py
Descrizione: Gestione automatica della sincronizzazione con GitHub.
"""

from git import Repo, GitCommandError

class GitHubHandler:
    def __init__(self, repo_path: str = ".", remote_name: str = "origin"):
        self.repo = Repo(repo_path)
        self.remote = self.repo.remote(name=remote_name)

    def pull_latest(self):
        try:
            self.remote.pull()
            print("✅ Pull completato da GitHub.")
        except GitCommandError as e:
            print(f"❌ Errore durante il pull: {e}")

    def push_changes(self, commit_message: str = "🔄 Update automatico da Mercurius"):
        try:
            self.repo.git.add(A=True)
            self.repo.index.commit(commit_message)
            self.remote.push()
            print("🚀 Push effettuato con successo.")
        except GitCommandError as e:
            print(f"❌ Errore durante il push: {e}")

### --- interop/local_controller.py --- ###
# interop/local_controller.py

"""
Modulo: local_controller.py
Descrizione: Controllo di comandi, cartelle e file del PC locale.
"""

import os
import subprocess

class LocalController:
    def list_dir(self, path="."):
        return os.listdir(path)

    def open_file(self, filepath):
        if os.path.exists(filepath):
            if os.name == "nt":  # Windows
                os.startfile(filepath)
            elif os.name == "posix":
                subprocess.call(["open" if "darwin" in os.sys.platform else "xdg-open", filepath])
            return True
        return False

    def run_script(self, script_path):
        try:
            subprocess.run(["python", script_path])
            return True
        except Exception as e:
            print(f"❌ Errore nell'esecuzione: {e}")
            return False

### --- learning/__init__.py --- ###
from .video_learner import extract_insights_from_video
from .document_parser import parse_document

__all__ = ["extract_insights_from_video", "parse_document"]

### --- learning/document_parser.py --- ###
# learning/document_parser.py

"""
Modulo: document_parser.py
Descrizione: Parsing e analisi semantica di contenuti testuali provenienti da PDF e URL per Mercurius∞.
Estrae testi, titoli e concetti chiave.
"""

import fitz  # PyMuPDF
import requests
from bs4 import BeautifulSoup
from typing import List


class DocumentParser:
    def extract_text_from_pdf(self, pdf_path: str) -> str:
        """
        Estrae il testo da un file PDF.
        """
        text = ""
        try:
            doc = fitz.open(pdf_path)
            for page in doc:
                text += page.get_text()
            doc.close()
        except Exception as e:
            text = f"[ERRORE PDF]: {e}"
        return text

    def extract_text_from_url(self, url: str) -> str:
        """
        Estrae contenuti leggibili da una pagina web.
        """
        try:
            response = requests.get(url, timeout=10)
            soup = BeautifulSoup(response.text, "html.parser")
            paragraphs = soup.find_all("p")
            return "\n".join(p.get_text() for p in paragraphs)
        except Exception as e:
            return f"[ERRORE URL]: {e}"

    def extract_keywords(self, content: str, top_n: int = 10) -> List[str]:
        """
        Estrae parole chiave semplici dal contenuto.
        """
        import re
        from collections import Counter

        words = re.findall(r"\b\w{5,}\b", content.lower())
        common = Counter(words).most_common(top_n)
        return [word for word, _ in common]


def parse_document(source: str) -> dict:
    """High level helper to parse a PDF file or URL."""
    parser = DocumentParser()
    if source.lower().startswith("http"):
        text = parser.extract_text_from_url(source)
    else:
        text = parser.extract_text_from_pdf(source)
    keywords = parser.extract_keywords(text)
    return {"text": text, "keywords": keywords}

### --- learning/video_learner.py --- ###
"""
Modulo: video_learner.py
Descrizione: Apprendimento da contenuti video e audio (YouTube, file locali).
Estrae audio → trascrive con Whisper → restituisce sintesi concettuale.
Supporta fallback se i moduli non sono disponibili.
Autore: Mercurius∞ AI Engineer
"""

import os
import tempfile

# ─── Import Condizionali ──────────────────────────────────────────────
try:
    from pytube import YouTube
    import whisper
    MODULES_AVAILABLE = True
except ImportError:
    YouTube = None
    whisper = None
    MODULES_AVAILABLE = False

class VideoLearner:
    def __init__(self, model_name="large-v3"):
        if MODULES_AVAILABLE and whisper:
            self.model = whisper.load_model(model_name)
        else:
            self.model = None

    def download_audio(self, url: str) -> str:
        """
        Scarica solo l'audio da un video YouTube in formato MP4.
        """
        if not MODULES_AVAILABLE or YouTube is None:
            return "[❌ pytube non disponibile]"
        try:
            yt = YouTube(url)
            stream = yt.streams.filter(only_audio=True).first()
            out_path = tempfile.mktemp(suffix=".mp4")
            stream.download(filename=out_path)
            return out_path
        except Exception as e:
            return f"[❌ Errore download audio]: {e}"

    def transcribe_audio(self, file_path: str) -> str:
        """
        Trascrive un file audio/video tramite Whisper.
        Accetta qualsiasi file locale audio o video.
        """
        if not self.model:
            return "[❌ Whisper non disponibile]"
        try:
            result = self.model.transcribe(file_path, language="it")
            return result.get("text", "[nessuna trascrizione]")
        except Exception as e:
            return f"[❌ Errore Whisper]: {e}"

    def extract_insights_from_video(self, source: str) -> str:
        """
        Processo completo:
        - Se input è un file locale esistente (MP4/MP3/etc.), trascrive direttamente.
        - Se input è un URL, scarica l'audio e poi trascrive.
        """
        if not MODULES_AVAILABLE:
            return "[❌ Moduli mancanti: pytube, whisper]"
        
        if os.path.exists(source):
            # Input è un file locale
            return self.transcribe_audio(source)
        
        # Altrimenti tratta l’input come URL YouTube
        audio_path = self.download_audio(source)
        if audio_path.startswith("[❌"):
            return audio_path
        
        return self.transcribe_audio(audio_path)


def extract_insights_from_video(source: str) -> str:
    """Convenience wrapper to use VideoLearner in functional style."""
    learner = VideoLearner()
    return learner.extract_insights_from_video(source)

# Fine modulo — Mercurius∞ è pronto a divorare video, audio e URL senza pietà.

### --- list_files.py --- ###
import os

with open("file_albero_locale.txt", "w", encoding="utf-8") as f:
    for root, dirs, files in os.walk("."):
        level = root.replace(os.getcwd(), '').count(os.sep)
        indent = '  ' * level
        f.write(f"{indent}{os.path.basename(root)}/\n")
        subindent = '  ' * (level + 1)
        for file in files:
            f.write(f"{subindent}{file}\n")

### --- llm/llm_router.py --- ###
# llm/llm_router.py

"""
Modulo: llm_router.py
Descrizione: Router centralizzato per la gestione dei Large Language Models (LLM) usati da Mercurius∞.
Supporta OpenAI, Ollama e GPT-4o. Seleziona il modello in base a disponibilità, compito o preferenza.
"""

import requests
import openai
import json
import os

CONFIG_PATH = "config/llm_config.json"


class LLMRouter:
    def __init__(self):
        if os.path.exists(CONFIG_PATH):
            with open(CONFIG_PATH, "r") as f:
                self.config = json.load(f)
        else:
            self.config = {
                "default_model": "openai",
                "openai_key": "",
                "ollama_url": "http://localhost:11434",
                "gpt4o_token": ""
            }

    def query(self, prompt: str, model: str = None) -> str:
        engine = model or self.config["default_model"]
        if engine == "openai":
            return self._query_openai(prompt)
        elif engine == "ollama":
            return self._query_ollama(prompt)
        elif engine == "gpt4o":
            return self._query_gpt4o(prompt)
        else:
            return f"[ERRORE] Modello non riconosciuto: {engine}"

    def _query_openai(self, prompt: str) -> str:
        try:
            openai.api_key = self.config["openai_key"]
            response = openai.ChatCompletion.create(
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}]
            )
            return response.choices[0].message.content.strip()
        except Exception as e:
            return f"[OpenAI Errore]: {e}"

    def _query_ollama(self, prompt: str) -> str:
        try:
            response = requests.post(
                f"{self.config['ollama_url']}/api/generate",
                json={"model": "llama3", "prompt": prompt}
            )
            return response.json().get("response", "[nessuna risposta da Ollama]")
        except Exception as e:
            return f"[Ollama Errore]: {e}"

    def _query_gpt4o(self, prompt: str) -> str:
        try:
            headers = {"Authorization": f"Bearer {self.config['gpt4o_token']}"}
            response = requests.post(
                "https://api.openai.com/v1/chat/completions",
                headers=headers,
                json={
                    "model": "gpt-4o",
                    "messages": [{"role": "user", "content": prompt}]
                }
            )
            return response.json()["choices"][0]["message"]["content"]
        except Exception as e:
            return f"[GPT-4o Errore]: {e}"

### --- logs/README.md --- ###
# 📜 Logs – Tracciamento Neuronale

Contiene file di log e modulo `genesis_logger.py`.

## Funzione

Salvare eventi neurali, attivazioni, errori, cicli decisionali.

### --- logs/aion_activation_report.md --- ###
# Aion Activation Report

- Aion API server added (`deployment/aion_api.py`).
- Boot script launches the API server automatically.
- Flutter UI now detects hotwords and displays responses.
- Use `flutter run -d android` to build the app.

### --- logs/self_tuning_report.md --- ###
# 📘 Rapporto Auto-Adattamento – Mercurius∞

🔧 Modulo incompleto: core\dialogue_manager.py
🔧 Modulo incompleto: core\self_tuner.py
🔧 Modulo incompleto: core\thinking_loop.py
🔧 Modulo incompleto: deploy\deployment_handler.py
🔧 Modulo incompleto: evolution\logic_injector.py
🔧 Modulo incompleto: memory\long_term_memory.py
🔧 Modulo incompleto: modules\network_analyzer.py
🔧 Modulo incompleto: security\pairing_manager.py
🔧 Modulo incompleto: tests\test_modular_end2end.py
🔧 Modulo incompleto: tests\test_neuro_learning.py
🔧 Modulo incompleto: tests\test_policy.py
🔧 Modulo incompleto: tests\test_secure_executor.py
🔧 Modulo incompleto: trading\trading_core.py
🔧 Modulo incompleto: utils\environment.py
🔧 Modulo incompleto: vision\ocr_reader.py
🔧 Modulo incompleto: modules\local\leon_ai_bridge.py
🔧 Modulo incompleto: modules\mobile\note_interface.py
🔧 Modulo incompleto: modules\voice_bridge\multimodal_controller.py
💡 Suggerimento: consolidare dashboard → orchestrator con feedback loop.

### --- logs/thinking_feed.md --- ###
# Thinking Feed

### --- logs/upgrade_status.md --- ###
# ✅ Mercurius∞ – Stato Avanzamento Upgrade

> Data: 2025-05-31  
> Versione: Mercurius∞ v3.0 – Autonomous Personal AI

---

## 1. 🛰️ Deploy su cloud personale

| Funzione                              | Stato |
|---------------------------------------|--------|
| Avvio automatico su boot              | ✅ Completato via `autostart_manager.py` |
| Telemetria (uptime, stato, log)       | ✅ Completato via `telemetry_monitor.py` |
| Accesso remoto sicuro (FastAPI/SSH)   | ✅ Completato via `remote_access.py` |
| Task programmati                      | ✅ Completato via `task_scheduler.py` |

---

## 2. 🔊👁️ Upgrade Voce + Visione Avanzata

| Funzione                              | Stato |
|---------------------------------------|--------|
| STT con Whisper v3                    | ✅ Completato via `whisper_engine.py` |
| Visione YOLOv8 e OCR                  | ✅ Completato via `yolov8_engine.py`, `ocr_reader.py` |
| Reazione a contesto (visivo/emotivo) | ✅ Completato via `context_adapter.py`, `sensory_bus.py` |
| Analisi ambientale                    | ✅ Completato via `environment_analyzer.py` |

---

## 3. 🔐 Firma Crittografica Codice

| Funzione                              | Stato |
|---------------------------------------|--------|
| SHA256 + timestamp                    | ✅ Completato via `code_signer.py` |
| Verifica integrità                    | ✅ Completato via `code_verifier.py` |
| Firma/verifica GPG opzionale          | ✅ Completato via `gpg_support.py` |

---

## ✅ Stato Finale: Mercurius∞ è ora completo

Mercurius∞ è in grado di:
- Auto-apprendere, evolversi, parlare e osservare
- Firmare e verificare il proprio codice
- Lavorare in background su sistemi locali e remoti
- Interagire in modo adattivo con il contesto

🧠 Pronto per produzione. Tutte le funzionalità principali sono operative e testate.

### --- main.py --- ###
"""
main.py
========
Punto di ingresso principale per l'esecuzione del sistema Mercurius∞.

Funzionalità:
- Caricamento ambiente e configurazioni
- Inizializzazione pipeline: dati, features, modello
- Esecuzione strategia di trading adattiva
- Simulazione esperienza cognitiva (AI Evolutiva)
"""

import logging
from utils.logger import setup_logger
from utils.config_loader import load_config
from utils.environment import Environment
from data.market_data_handler import MarketDataHandler
from data.feature_engineering import FeatureEngineer
from models.model_trainer import ModelTrainer
from strategies.strategy_executor import StrategyExecutor
from agents.adaptive_trader import AdaptiveTrader
from agents.memory_manager import MemoryManager
from orchestrator.autonomy_controller import AutonomyController


def load_env():
    """Carica variabili d’ambiente e mostra lo stato di Mercurius∞."""
    env = Environment()
    print("🔐 Ambiente Mercurius∞ caricato:")
    print(" - OpenAI Model:", env.get("OPENAI_CHAT_MODEL"))
    print(" - WM_USER:", env.get("WM_USER"))
    print(" - MCP_URL:", env.get("MCP_INTROSPECT_URL"))
    return env


def initialize_system():
    """Inizializza il sistema con tutte le componenti core."""
    config = load_config("config.yaml")
    logger = setup_logger(name="MercuriusMain")

    logger.info("📦 Caricamento configurazione completato.")
    logger.debug(f"Configurazione caricata: {config}")

    memory = MemoryManager(config)
    data_handler = MarketDataHandler(config)
    feature_engineer = FeatureEngineer(config)
    model_trainer = ModelTrainer(config)
    strategy = StrategyExecutor(config)
    agent = AdaptiveTrader(config, memory, model_trainer, strategy)

    logger.info("🔧 Sistema inizializzato correttamente.")
    return {
        "config": config,
        "logger": logger,
        "memory": memory,
        "data_handler": data_handler,
        "feature_engineer": feature_engineer,
        "model_trainer": model_trainer,
        "strategy": strategy,
        "agent": agent
    }


def run_pipeline(components: dict):
    """Esegue il ciclo completo di analisi, apprendimento e trading."""
    logger = components["logger"]
    data_handler = components["data_handler"]
    feature_engineer = components["feature_engineer"]
    model_trainer = components["model_trainer"]
    strategy = components["strategy"]
    agent = components["agent"]

    logger.info("🚀 Avvio pipeline operativa Mercurius∞...")

    raw_data = data_handler.fetch_market_data()
    logger.info(f"📊 Dati di mercato ricevuti: {len(raw_data)} records")

    features = feature_engineer.transform(raw_data)
    logger.info("🧠 Feature engineering completato.")

    model = model_trainer.train(features)
    logger.info("🤖 Modello addestrato con successo.")

    signals = strategy.generate_signals(model, features)
    logger.info(f"📈 Segnali generati: {len(signals)}")

    agent.execute_trades(signals)
    logger.info("✅ Trade eseguiti con successo.")


def simulate_experience():
    """Simula esperienze per il controller cognitivo autonomo."""
    print("\n🧠 Avvio simulazione esperienze cognitive...\n")
    auto = AutonomyController()

    experiences = [
        {"action": "Avvia scansione", "outcome": "Area rilevata", "success": True, "context": {}},
        {"action": "Connessione API", "outcome": "Errore 500", "success": False, "context": {"error": "Internal Server Error"}},
        {"action": "Naviga percorso", "outcome": "Riuscito", "success": True, "context": {"speed": "3.2m/s"}},
    ]

    for exp in experiences:
        output = auto.process_experience(
            action=exp["action"],
            outcome=exp["outcome"],
            success=exp["success"],
            context=exp["context"]
        )
        print("\n🧪 Esperienza:")
        print(f" - Riflesso: {output.get('reflection', 'N/D')}")
        print(f" - Apprendimento: {output.get('learning', 'N/D')}")

    print("\n📊 Riepilogo Cognitivo:")
    print(auto.summarize_autonomy())

    print("\n📘 Insight Globali:")
    print(auto.report_insights())


if __name__ == "__main__":
    env = load_env()
    components = initialize_system()
    run_pipeline(components)
    simulate_experience()

### --- memory/__init__.py --- ###


### --- memory/dialog_style_profile.json --- ###
{}

### --- memory/episodic_memory.py --- ###
# memory/episodic_memory.py

"""
Modulo: episodic_memory.py
Descrizione: Gestione della memoria episodica per Mercurius∞. Salva e recupera eventi specifici
con dettagli temporali, contesto e risposta.
"""

import json
import os
from datetime import datetime
from typing import Dict, List

EPISODES_PATH = "data/memory/episodic_memory.json"


class EpisodicMemory:
    def __init__(self):
        os.makedirs(os.path.dirname(EPISODES_PATH), exist_ok=True)
        if not os.path.exists(EPISODES_PATH):
            with open(EPISODES_PATH, "w") as f:
                json.dump([], f)
        self._load_memory()

    def _load_memory(self):
        with open(EPISODES_PATH, "r") as f:
            self.episodes = json.load(f)

    def _save_memory(self):
        with open(EPISODES_PATH, "w") as f:
            json.dump(self.episodes, f, indent=2)

    def record_episode(self, context: str, user_input: str, ai_response: str):
        episode = {
            "timestamp": datetime.now().isoformat(),
            "context": context,
            "user_input": user_input,
            "ai_response": ai_response
        }
        self.episodes.append(episode)
        self._save_memory()

    def get_recent_episodes(self, limit: int = 10) -> List[Dict]:
        return self.episodes[-limit:]

    def search_episodes(self, keyword: str) -> List[Dict]:
        return [ep for ep in self.episodes if keyword.lower() in ep["user_input"].lower() or keyword.lower() in ep["ai_response"].lower()]

### --- memory/genesis_memory.py --- ###
class GenesisMemory:
    def __init__(self):
        self.short_term = {}
        self.long_term = {}

    def save_context(self, key: str, value: str, long: bool = False):
        if long:
            self.long_term[key] = value
        else:
            self.short_term[key] = value

    def recall(self, key: str) -> str:
        return self.short_term.get(key) or self.long_term.get(key, "∅")

    def forget(self, key: str):
        self.short_term.pop(key, None)
        self.long_term.pop(key, None)

### --- memory/long_term_memory.py --- ###
"""
Modulo: long_term_memory.py
Descrizione: Gestisce la memoria a lungo termine per Mercurius∞.
Offre due possibili backend di archiviazione:
  - SQLite (database locale)
  - JSON/YAML (file locale)
L’utente può scegliere quale backend attivare passando il parametro 'backend' al costruttore.
"""

import sqlite3
import json
from pathlib import Path
from datetime import datetime
from typing import Any, Dict, List, Optional, Tuple, Union

# ----------------------------------------------------------------------
# CONFIGURAZIONE DEI PATH
# ----------------------------------------------------------------------

# Percorso del database SQLite
DB_PATH = Path("data/memory/long_term_memory.db")

# Cartella e file per il backend JSON
JSON_DIR  = Path("memory/long_term_data")
JSON_DIR.mkdir(parents=True, exist_ok=True)
JSON_DEFAULT_FILE = JSON_DIR / "experiences.json"

# ----------------------------------------------------------------------
# CLASSE: _SQLiteMemory
# ----------------------------------------------------------------------

class _SQLiteMemory:
    """
    Backend SQLite per la memoria a lungo termine.
    Crea una tabella 'memories' con i campi:
      - id (INTEGER PRIMARY KEY AUTOINCREMENT)
      - timestamp (TEXT)
      - category  (TEXT)
      - content   (TEXT)
    """

    def __init__(self, db_path: Union[str, Path] = DB_PATH):
        db_path = Path(db_path)
        db_path.parent.mkdir(parents=True, exist_ok=True)
        self.conn = sqlite3.connect(str(db_path))
        self._create_table()

    def _create_table(self) -> None:
        with self.conn:
            self.conn.execute("""
                CREATE TABLE IF NOT EXISTS memories (
                    id        INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp TEXT,
                    category  TEXT,
                    content   TEXT
                )
            """)

    def store_memory(self, content: str, category: str = "general") -> None:
        timestamp = datetime.utcnow().isoformat()
        with self.conn:
            self.conn.execute("""
                INSERT INTO memories (timestamp, category, content)
                VALUES (?, ?, ?)
            """, (timestamp, category, content))

    def retrieve_memories(self, category: Optional[str] = None, limit: int = 50) -> List[Tuple[str, str, str]]:
        cursor = self.conn.cursor()
        if category:
            cursor.execute("""
                SELECT timestamp, category, content FROM memories
                WHERE category = ?
                ORDER BY timestamp DESC
                LIMIT ?
            """, (category, limit))
        else:
            cursor.execute("""
                SELECT timestamp, category, content FROM memories
                ORDER BY timestamp DESC
                LIMIT ?
            """, (limit,))
        return cursor.fetchall()

    def search_memory(self, keyword: str, limit: int = 20) -> List[Tuple[str, str, str]]:
        cursor = self.conn.cursor()
        query = """
            SELECT timestamp, category, content FROM memories
            WHERE content LIKE ?
            ORDER BY timestamp DESC
            LIMIT ?
        """
        cursor.execute(query, (f"%{keyword}%", limit))
        return cursor.fetchall()

    def close(self) -> None:
        self.conn.close()

# ----------------------------------------------------------------------
# CLASSE: _JSONMemory
# ----------------------------------------------------------------------

class _JSONMemory:
    """
    Backend JSON per la memoria a lungo termine.
    Gestisce un file JSON contenente una lista di dizionari,
    ognuno con chiavi almeno: 'timestamp', 'content', eventualmente altre informazioni.
    """

    def __init__(self, filename: Union[str, Path] = JSON_DEFAULT_FILE):
        self.filepath = Path(filename)
        if not self.filepath.exists():
            self._write_json([])

    def save_experience(self, experience: Dict[str, Any]) -> None:
        experience["timestamp"] = datetime.utcnow().isoformat()
        data = self._read_json()
        data.append(experience)
        self._write_json(data)

    def get_all(self) -> List[Dict[str, Any]]:
        return self._read_json()

    def find_by_tag(self, tag: str) -> List[Dict[str, Any]]:
        return [exp for exp in self._read_json() if tag in exp.get("tags", [])]

    def _read_json(self) -> List[Dict[str, Any]]:
        with open(self.filepath, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return []

    def _write_json(self, data: List[Dict[str, Any]]) -> None:
        with open(self.filepath, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

# ----------------------------------------------------------------------
# CLASSE PRINCIPALE: LongTermMemory
# ----------------------------------------------------------------------

class LongTermMemory:
    def __init__(
        self,
        backend: str = "sqlite",
        sqlite_path: Union[str, Path] = DB_PATH,
        json_filename: Union[str, Path] = JSON_DEFAULT_FILE
    ):
        backend = backend.lower()
        if backend not in ("sqlite", "json"):
            # Se backend è un file json, usa backend json
            if isinstance(backend, str) and backend.endswith(".json"):
                backend, json_filename = "json", Path(backend)
            else:
                raise ValueError("Il parametro 'backend' deve essere 'sqlite' o 'json'.")
        self.backend = backend

        if self.backend == "sqlite":
            self._db = _SQLiteMemory(db_path=sqlite_path)
        else:
            self._db = _JSONMemory(filename=json_filename)

    def store_memory(self, content: str, category: str = "general") -> None:
        if self.backend != "sqlite":
            raise RuntimeError("store_memory() disponibile solo con backend='sqlite'. Usa save_experience() per JSON.")
        self._db.store_memory(content, category)

    def retrieve_memories(self, category: Optional[str] = None, limit: int = 50) -> List[Tuple[str, str, str]]:
        if self.backend != "sqlite":
            raise RuntimeError("retrieve_memories() disponibile solo con backend='sqlite'.")
        return self._db.retrieve_memories(category=category, limit=limit)

    def search_memory(self, keyword: str, limit: int = 20) -> List[Tuple[str, str, str]]:
        if self.backend != "sqlite":
            raise RuntimeError("search_memory() disponibile solo con backend='sqlite'.")
        return self._db.search_memory(keyword, limit)

    def save_experience(self, experience: Dict[str, Any]) -> None:
        if self.backend != "json":
            raise RuntimeError("save_experience() disponibile solo con backend='json'. Usa store_memory() per SQLite.")
        self._db.save_experience(experience)

    def get_all(self) -> List[Dict[str, Any]]:
        if self.backend != "json":
            raise RuntimeError("get_all() disponibile solo con backend='json'.")
        return self._db.get_all()

    def find_by_tag(self, tag: str) -> List[Dict[str, Any]]:
        if self.backend != "json":
            raise RuntimeError("find_by_tag() disponibile solo con backend='json'.")
        return self._db.find_by_tag(tag)

    def close(self) -> None:
        if self.backend == "sqlite":
            self._db.close()

# ======================================================================
# ESEMPIO DI UTILIZZO
# ======================================================================
if __name__ == "__main__":
    lm_sql = LongTermMemory(backend="sqlite")
    lm_sql.store_memory("Prima memoria di test", category="test")
    ricordi = lm_sql.retrieve_memories(limit=5)
    print("Ricordi da SQLite:", ricordi)
    lm_sql.close()

    lm_js = LongTermMemory(backend="json", json_filename=JSON_DIR / "test_experiences.json")
    lm_js.save_experience({"content": "Esperienza di prova", "category": "debug", "tags": ["test", "example"]})
    tutte = lm_js.get_all()
    print("Esperienze da JSON:", tutte)

### --- memory/memory_core.py --- ###
# memory/memory_core.py

"""
Modulo: memory_core.py
Descrizione: Gestione unificata della memoria cognitiva (a lungo termine, episodica e log sinaptico)
per Mercurius∞. Punto centrale di accesso e coordinamento dei moduli mnemonici.
"""

from memory.long_term_memory import LongTermMemory
from memory.episodic_memory import EpisodicMemory
from memory.synaptic_log import SynapticLog


class MemoryCore:
    def __init__(self):
        self.long_term = LongTermMemory()
        self.episodic = EpisodicMemory()
        self.synaptic_log = SynapticLog()
        self.synaptic_log.log_event("MemoryCore", "initialized")

    def store_fact(self, content: str, category: str = "general"):
        self.long_term.store_memory(content, category)
        self.synaptic_log.log_event("LongTermMemory", "store_fact", f"Category: {category}")

    def recall_facts(self, category: str = None, limit: int = 10):
        facts = self.long_term.retrieve_memories(category, limit)
        self.synaptic_log.log_event("LongTermMemory", "recall_facts", f"Category: {category}")
        return facts

    def record_interaction(self, context: str, user_input: str, ai_response: str):
        self.episodic.record_episode(context, user_input, ai_response)
        self.synaptic_log.log_event("EpisodicMemory", "record_interaction", f"Input: {user_input[:30]}...")

    def review_recent_episodes(self, limit: int = 5):
        episodes = self.episodic.get_recent_episodes(limit)
        self.synaptic_log.log_event("EpisodicMemory", "review_recent_episodes")
        return episodes

    def search_knowledge(self, keyword: str):
        facts = self.long_term.search_memory(keyword)
        episodes = self.episodic.search_episodes(keyword)
        self.synaptic_log.log_event("MemoryCore", "search_knowledge", f"Keyword: {keyword}")
        return {"facts": facts, "episodes": episodes}

### --- memory/neural_plasticity.py --- ###
# memory/neural_plasticity.py

"""
Estensione: Plasticità neurale dinamica di Mercurius∞
Descrizione: Mappa adattiva della frequenza di utilizzo dei moduli e suggerimenti di rinforzo o disattivazione.
"""

import json
import os
from datetime import datetime

class NeuralPlasticity:
    def __init__(self, map_path="memory/plasticity_map.json"):
        self.map_path = map_path
        self.map = self.load_map()

    def load_map(self):
        if os.path.exists(self.map_path):
            with open(self.map_path, "r") as f:
                return json.load(f)
        return {}

    def save_map(self):
        with open(self.map_path, "w") as f:
            json.dump(self.map, f, indent=2)

    def track_usage(self, module_name: str):
        if module_name not in self.map:
            self.map[module_name] = {"count": 0, "last_used": None}
        self.map[module_name]["count"] += 1
        self.map[module_name]["last_used"] = datetime.now().isoformat()
        self.save_map()

    def recommend_adaptation(self) -> list:
        sorted_usage = sorted(self.map.items(), key=lambda x: x[1]["count"], reverse=True)
        return [f"{mod[0]} → {mod[1]['count']} utilizzi" for mod in sorted_usage[:5]]

    def strengthen_pathways(self):
        adaptations = self.recommend_adaptation()
        print("🔧 Rinforzo neurale per i moduli più utilizzati:")
        for line in adaptations:
            print(f"  ⚡ {line}")
        return adaptations

### --- memory/synaptic_log.py --- ###
# memory/synaptic_log.py

"""
Modulo: synaptic_log.py
Descrizione: Registro cronologico delle interazioni e modifiche sinaptiche della memoria cognitiva.
Utile per analisi, debug e tracciamento evolutivo del comportamento AI.
"""

import os
from datetime import datetime
from typing import Optional

LOG_PATH = "data/memory/synaptic_log.txt"


class SynapticLog:
    def __init__(self):
        os.makedirs(os.path.dirname(LOG_PATH), exist_ok=True)
        if not os.path.exists(LOG_PATH):
            with open(LOG_PATH, "w") as f:
                f.write("=== Synaptic Log Initialized ===\n")

    def log_event(self, module: str, action: str, detail: Optional[str] = ""):
        timestamp = datetime.now().isoformat()
        log_entry = f"[{timestamp}] [{module}] {action}"
        if detail:
            log_entry += f" - {detail}"
        with open(LOG_PATH, "a") as f:
            f.write(log_entry + "\n")

    def get_log_tail(self, lines: int = 20) -> str:
        with open(LOG_PATH, "r") as f:
            return "\n".join(f.readlines()[-lines:])

### --- mercurius_infinite.egg-info/SOURCES.txt --- ###
README.md
pyproject.toml
setup.py
generated_agents/__init__.py
mercurius_infinite.egg-info/PKG-INFO
mercurius_infinite.egg-info/SOURCES.txt
mercurius_infinite.egg-info/dependency_links.txt
mercurius_infinite.egg-info/entry_points.txt
mercurius_infinite.egg-info/top_level.txt
tests/test_autonomia_cognitiva.py
tests/test_end2end.py
tests/test_multimodal.py
tests/test_neuro_learning.py
tests/test_orchestrator.py
tests/test_planner.py
tests/test_supervisione.py

### --- mercurius_infinite.egg-info/dependency_links.txt --- ###


### --- mercurius_infinite.egg-info/entry_points.txt --- ###
[console_scripts]
merc-start = start_fullmode:main

### --- mercurius_infinite.egg-info/top_level.txt --- ###
generated_agents

### --- mobile_jarvis_ui/README.md --- ###
# Mobile Jarvis UI

Flutter-based HUD interface for Mercurius∞. The app offers voice interaction using
`speech_to_text` and `flutter_tts`, with simple hotword detection ("Hey Mercurius"
or "Aion attivati"). Requests are sent to the local Aion API (`/ask`) which in
turn forwards them to the orchestrator.

Build and run using the Flutter SDK on an Android device:

```bash
flutter run -d android
```

### --- mobile_jarvis_ui/analysis_options.yaml --- ###
# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml


linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options

### --- mobile_jarvis_ui/assets/placeholder.txt --- ###
placeholder

### --- mobile_jarvis_ui/ios/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json --- ###
{
  "images" : [
    {
      "size" : "20x20",
      "idiom" : "iphone",
      "filename" : "Icon-App-20x20@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "20x20",
      "idiom" : "iphone",
      "filename" : "Icon-App-20x20@3x.png",
      "scale" : "3x"
    },
    {
      "size" : "29x29",
      "idiom" : "iphone",
      "filename" : "Icon-App-29x29@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "29x29",
      "idiom" : "iphone",
      "filename" : "Icon-App-29x29@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "29x29",
      "idiom" : "iphone",
      "filename" : "Icon-App-29x29@3x.png",
      "scale" : "3x"
    },
    {
      "size" : "40x40",
      "idiom" : "iphone",
      "filename" : "Icon-App-40x40@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "40x40",
      "idiom" : "iphone",
      "filename" : "Icon-App-40x40@3x.png",
      "scale" : "3x"
    },
    {
      "size" : "60x60",
      "idiom" : "iphone",
      "filename" : "Icon-App-60x60@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "60x60",
      "idiom" : "iphone",
      "filename" : "Icon-App-60x60@3x.png",
      "scale" : "3x"
    },
    {
      "size" : "20x20",
      "idiom" : "ipad",
      "filename" : "Icon-App-20x20@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "20x20",
      "idiom" : "ipad",
      "filename" : "Icon-App-20x20@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "29x29",
      "idiom" : "ipad",
      "filename" : "Icon-App-29x29@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "29x29",
      "idiom" : "ipad",
      "filename" : "Icon-App-29x29@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "40x40",
      "idiom" : "ipad",
      "filename" : "Icon-App-40x40@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "40x40",
      "idiom" : "ipad",
      "filename" : "Icon-App-40x40@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "76x76",
      "idiom" : "ipad",
      "filename" : "Icon-App-76x76@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "76x76",
      "idiom" : "ipad",
      "filename" : "Icon-App-76x76@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "83.5x83.5",
      "idiom" : "ipad",
      "filename" : "Icon-App-83.5x83.5@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "1024x1024",
      "idiom" : "ios-marketing",
      "filename" : "Icon-App-1024x1024@1x.png",
      "scale" : "1x"
    }
  ],
  "info" : {
    "version" : 1,
    "author" : "xcode"
  }
}

### --- mobile_jarvis_ui/ios/Runner/Assets.xcassets/LaunchImage.imageset/Contents.json --- ###
{
  "images" : [
    {
      "idiom" : "universal",
      "filename" : "LaunchImage.png",
      "scale" : "1x"
    },
    {
      "idiom" : "universal",
      "filename" : "LaunchImage@2x.png",
      "scale" : "2x"
    },
    {
      "idiom" : "universal",
      "filename" : "LaunchImage@3x.png",
      "scale" : "3x"
    }
  ],
  "info" : {
    "version" : 1,
    "author" : "xcode"
  }
}

### --- mobile_jarvis_ui/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md --- ###
# Launch Screen Assets

You can customize the launch screen with your own desired assets by replacing the image files in this directory.

You can also do it by opening your Flutter project's Xcode project with `open ios/Runner.xcworkspace`, selecting `Runner/Assets.xcassets` in the Project Navigator and dropping in the desired images.

### --- mobile_jarvis_ui/linux/CMakeLists.txt --- ###
# Project-level configuration.
cmake_minimum_required(VERSION 3.13)
project(runner LANGUAGES CXX)

# The name of the executable created for the application. Change this to change
# the on-disk name of your application.
set(BINARY_NAME "mobile_jarvis_ui")
# The unique GTK application identifier for this application. See:
# https://wiki.gnome.org/HowDoI/ChooseApplicationID
set(APPLICATION_ID "com.example.mobile_jarvis_ui")

# Explicitly opt in to modern CMake behaviors to avoid warnings with recent
# versions of CMake.
cmake_policy(SET CMP0063 NEW)

# Load bundled libraries from the lib/ directory relative to the binary.
set(CMAKE_INSTALL_RPATH "$ORIGIN/lib")

# Root filesystem for cross-building.
if(FLUTTER_TARGET_PLATFORM_SYSROOT)
  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})
  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})
  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
endif()

# Define build configuration options.
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  set(CMAKE_BUILD_TYPE "Debug" CACHE
    STRING "Flutter build mode" FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug" "Profile" "Release")
endif()

# Compilation settings that should be applied to most targets.
#
# Be cautious about adding new options here, as plugins use this function by
# default. In most cases, you should add new options to specific targets instead
# of modifying this function.
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_14)
  target_compile_options(${TARGET} PRIVATE -Wall -Werror)
  target_compile_options(${TARGET} PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-O3>")
  target_compile_definitions(${TARGET} PRIVATE "$<$<NOT:$<CONFIG:Debug>>:NDEBUG>")
endfunction()

# Flutter library and tool build rules.
set(FLUTTER_MANAGED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/flutter")
add_subdirectory(${FLUTTER_MANAGED_DIR})

# System-level dependencies.
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)

# Application build; see runner/CMakeLists.txt.
add_subdirectory("runner")

# Run the Flutter tool portions of the build. This must not be removed.
add_dependencies(${BINARY_NAME} flutter_assemble)

# Only the install-generated bundle's copy of the executable will launch
# correctly, since the resources must in the right relative locations. To avoid
# people trying to run the unbundled copy, put it in a subdirectory instead of
# the default top-level location.
set_target_properties(${BINARY_NAME}
  PROPERTIES
  RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/intermediates_do_not_run"
)


# Generated plugin build rules, which manage building the plugins and adding
# them to the application.
include(flutter/generated_plugins.cmake)


# === Installation ===
# By default, "installing" just makes a relocatable bundle in the build
# directory.
set(BUILD_BUNDLE_DIR "${PROJECT_BINARY_DIR}/bundle")
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
endif()

# Start with a clean build bundle directory every time.
install(CODE "
  file(REMOVE_RECURSE \"${BUILD_BUNDLE_DIR}/\")
  " COMPONENT Runtime)

set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}/lib")

install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)

foreach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})
  install(FILES "${bundled_library}"
    DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endforeach(bundled_library)

# Copy the native assets provided by the build.dart from all packages.
set(NATIVE_ASSETS_DIR "${PROJECT_BUILD_DIR}native_assets/linux/")
install(DIRECTORY "${NATIVE_ASSETS_DIR}"
   DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
   COMPONENT Runtime)

# Fully re-copy the assets directory on each build to avoid having stale files
# from a previous install.
set(FLUTTER_ASSET_DIR_NAME "flutter_assets")
install(CODE "
  file(REMOVE_RECURSE \"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\")
  " COMPONENT Runtime)
install(DIRECTORY "${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}"
  DESTINATION "${INSTALL_BUNDLE_DATA_DIR}" COMPONENT Runtime)

# Install the AOT library on non-Debug builds only.
if(NOT CMAKE_BUILD_TYPE MATCHES "Debug")
  install(FILES "${AOT_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()

### --- mobile_jarvis_ui/linux/flutter/CMakeLists.txt --- ###
# This file controls Flutter-level build steps. It should not be edited.
cmake_minimum_required(VERSION 3.10)

set(EPHEMERAL_DIR "${CMAKE_CURRENT_SOURCE_DIR}/ephemeral")

# Configuration provided via flutter tool.
include(${EPHEMERAL_DIR}/generated_config.cmake)

# TODO: Move the rest of this into files in ephemeral. See
# https://github.com/flutter/flutter/issues/57146.

# Serves the same purpose as list(TRANSFORM ... PREPEND ...),
# which isn't available in 3.10.
function(list_prepend LIST_NAME PREFIX)
    set(NEW_LIST "")
    foreach(element ${${LIST_NAME}})
        list(APPEND NEW_LIST "${PREFIX}${element}")
    endforeach(element)
    set(${LIST_NAME} "${NEW_LIST}" PARENT_SCOPE)
endfunction()

# === Flutter Library ===
# System-level dependencies.
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)
pkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)
pkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)

set(FLUTTER_LIBRARY "${EPHEMERAL_DIR}/libflutter_linux_gtk.so")

# Published to parent scope for install step.
set(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)
set(FLUTTER_ICU_DATA_FILE "${EPHEMERAL_DIR}/icudtl.dat" PARENT_SCOPE)
set(PROJECT_BUILD_DIR "${PROJECT_DIR}/build/" PARENT_SCOPE)
set(AOT_LIBRARY "${PROJECT_DIR}/build/lib/libapp.so" PARENT_SCOPE)

list(APPEND FLUTTER_LIBRARY_HEADERS
  "fl_basic_message_channel.h"
  "fl_binary_codec.h"
  "fl_binary_messenger.h"
  "fl_dart_project.h"
  "fl_engine.h"
  "fl_json_message_codec.h"
  "fl_json_method_codec.h"
  "fl_message_codec.h"
  "fl_method_call.h"
  "fl_method_channel.h"
  "fl_method_codec.h"
  "fl_method_response.h"
  "fl_plugin_registrar.h"
  "fl_plugin_registry.h"
  "fl_standard_message_codec.h"
  "fl_standard_method_codec.h"
  "fl_string_codec.h"
  "fl_value.h"
  "fl_view.h"
  "flutter_linux.h"
)
list_prepend(FLUTTER_LIBRARY_HEADERS "${EPHEMERAL_DIR}/flutter_linux/")
add_library(flutter INTERFACE)
target_include_directories(flutter INTERFACE
  "${EPHEMERAL_DIR}"
)
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}")
target_link_libraries(flutter INTERFACE
  PkgConfig::GTK
  PkgConfig::GLIB
  PkgConfig::GIO
)
add_dependencies(flutter flutter_assemble)

# === Flutter tool backend ===
# _phony_ is a non-existent file to force this command to run every time,
# since currently there's no way to get a full input/output list from the
# flutter tool.
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CMAKE_CURRENT_BINARY_DIR}/_phony_
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh"
      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}
  VERBATIM
)
add_custom_target(flutter_assemble DEPENDS
  "${FLUTTER_LIBRARY}"
  ${FLUTTER_LIBRARY_HEADERS}
)

### --- mobile_jarvis_ui/linux/runner/CMakeLists.txt --- ###
cmake_minimum_required(VERSION 3.13)
project(runner LANGUAGES CXX)

# Define the application target. To change its name, change BINARY_NAME in the
# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer
# work.
#
# Any new source files that you add to the application should be added here.
add_executable(${BINARY_NAME}
  "main.cc"
  "my_application.cc"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
)

# Apply the standard set of build settings. This can be removed for applications
# that need different build settings.
apply_standard_settings(${BINARY_NAME})

# Add preprocessor definitions for the application ID.
add_definitions(-DAPPLICATION_ID="${APPLICATION_ID}")

# Add dependency libraries. Add any application-specific dependencies here.
target_link_libraries(${BINARY_NAME} PRIVATE flutter)
target_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)

target_include_directories(${BINARY_NAME} PRIVATE "${CMAKE_SOURCE_DIR}")

### --- mobile_jarvis_ui/macos/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json --- ###
{
  "images" : [
    {
      "size" : "16x16",
      "idiom" : "mac",
      "filename" : "app_icon_16.png",
      "scale" : "1x"
    },
    {
      "size" : "16x16",
      "idiom" : "mac",
      "filename" : "app_icon_32.png",
      "scale" : "2x"
    },
    {
      "size" : "32x32",
      "idiom" : "mac",
      "filename" : "app_icon_32.png",
      "scale" : "1x"
    },
    {
      "size" : "32x32",
      "idiom" : "mac",
      "filename" : "app_icon_64.png",
      "scale" : "2x"
    },
    {
      "size" : "128x128",
      "idiom" : "mac",
      "filename" : "app_icon_128.png",
      "scale" : "1x"
    },
    {
      "size" : "128x128",
      "idiom" : "mac",
      "filename" : "app_icon_256.png",
      "scale" : "2x"
    },
    {
      "size" : "256x256",
      "idiom" : "mac",
      "filename" : "app_icon_256.png",
      "scale" : "1x"
    },
    {
      "size" : "256x256",
      "idiom" : "mac",
      "filename" : "app_icon_512.png",
      "scale" : "2x"
    },
    {
      "size" : "512x512",
      "idiom" : "mac",
      "filename" : "app_icon_512.png",
      "scale" : "1x"
    },
    {
      "size" : "512x512",
      "idiom" : "mac",
      "filename" : "app_icon_1024.png",
      "scale" : "2x"
    }
  ],
  "info" : {
    "version" : 1,
    "author" : "xcode"
  }
}

### --- mobile_jarvis_ui/pubspec.yaml --- ###
name: mobile_jarvis_ui
description: Jarvis-like HUD for Mercurius∞
version: 0.1.0

environment:
  sdk: '>=3.3.0 <4.0.0'

dependencies:
  flutter:
    sdk: flutter
  rive: ^0.13.20
  flutter_tts: ^4.2.3
  flutter_sound: ^9.2.13
  speech_to_text: ^7.0.0
  permission_handler: ^12.0.0+1
  connectivity_plus: ^6.1.4
  network_info_plus: ^6.1.4
  wifi_scan: ^0.4.0
  animated_background: ^2.0.0
  http: ^1.1.0

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^2.0.0

flutter:
  uses-material-design: true
  assets:
    - assets/

### --- mobile_jarvis_ui/web/manifest.json --- ###
{
    "name": "mobile_jarvis_ui",
    "short_name": "mobile_jarvis_ui",
    "start_url": ".",
    "display": "standalone",
    "background_color": "#0175C2",
    "theme_color": "#0175C2",
    "description": "A new Flutter project.",
    "orientation": "portrait-primary",
    "prefer_related_applications": false,
    "icons": [
        {
            "src": "icons/Icon-192.png",
            "sizes": "192x192",
            "type": "image/png"
        },
        {
            "src": "icons/Icon-512.png",
            "sizes": "512x512",
            "type": "image/png"
        },
        {
            "src": "icons/Icon-maskable-192.png",
            "sizes": "192x192",
            "type": "image/png",
            "purpose": "maskable"
        },
        {
            "src": "icons/Icon-maskable-512.png",
            "sizes": "512x512",
            "type": "image/png",
            "purpose": "maskable"
        }
    ]
}

### --- mobile_jarvis_ui/windows/CMakeLists.txt --- ###
# Project-level configuration.
cmake_minimum_required(VERSION 3.14)
project(mobile_jarvis_ui LANGUAGES CXX)

# The name of the executable created for the application. Change this to change
# the on-disk name of your application.
set(BINARY_NAME "mobile_jarvis_ui")

# Explicitly opt in to modern CMake behaviors to avoid warnings with recent
# versions of CMake.
cmake_policy(VERSION 3.14...3.25)

# Define build configuration option.
get_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if(IS_MULTICONFIG)
  set(CMAKE_CONFIGURATION_TYPES "Debug;Profile;Release"
    CACHE STRING "" FORCE)
else()
  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_BUILD_TYPE "Debug" CACHE
      STRING "Flutter build mode" FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
      "Debug" "Profile" "Release")
  endif()
endif()
# Define settings for the Profile build mode.
set(CMAKE_EXE_LINKER_FLAGS_PROFILE "${CMAKE_EXE_LINKER_FLAGS_RELEASE}")
set(CMAKE_SHARED_LINKER_FLAGS_PROFILE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE}")
set(CMAKE_C_FLAGS_PROFILE "${CMAKE_C_FLAGS_RELEASE}")
set(CMAKE_CXX_FLAGS_PROFILE "${CMAKE_CXX_FLAGS_RELEASE}")

# Use Unicode for all projects.
add_definitions(-DUNICODE -D_UNICODE)

# Compilation settings that should be applied to most targets.
#
# Be cautious about adding new options here, as plugins use this function by
# default. In most cases, you should add new options to specific targets instead
# of modifying this function.
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_17)
  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd"4100")
  target_compile_options(${TARGET} PRIVATE /EHsc)
  target_compile_definitions(${TARGET} PRIVATE "_HAS_EXCEPTIONS=0")
  target_compile_definitions(${TARGET} PRIVATE "$<$<CONFIG:Debug>:_DEBUG>")
endfunction()

# Flutter library and tool build rules.
set(FLUTTER_MANAGED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/flutter")
add_subdirectory(${FLUTTER_MANAGED_DIR})

# Application build; see runner/CMakeLists.txt.
add_subdirectory("runner")


# Generated plugin build rules, which manage building the plugins and adding
# them to the application.
include(flutter/generated_plugins.cmake)


# === Installation ===
# Support files are copied into place next to the executable, so that it can
# run in place. This is done instead of making a separate bundle (as on Linux)
# so that building and running from within Visual Studio will work.
set(BUILD_BUNDLE_DIR "$<TARGET_FILE_DIR:${BINARY_NAME}>")
# Make the "install" step default, as it's required to run.
set(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
endif()

set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}")

install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)

if(PLUGIN_BUNDLED_LIBRARIES)
  install(FILES "${PLUGIN_BUNDLED_LIBRARIES}"
    DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()

# Copy the native assets provided by the build.dart from all packages.
set(NATIVE_ASSETS_DIR "${PROJECT_BUILD_DIR}native_assets/windows/")
install(DIRECTORY "${NATIVE_ASSETS_DIR}"
   DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
   COMPONENT Runtime)

# Fully re-copy the assets directory on each build to avoid having stale files
# from a previous install.
set(FLUTTER_ASSET_DIR_NAME "flutter_assets")
install(CODE "
  file(REMOVE_RECURSE \"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\")
  " COMPONENT Runtime)
install(DIRECTORY "${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}"
  DESTINATION "${INSTALL_BUNDLE_DATA_DIR}" COMPONENT Runtime)

# Install the AOT library on non-Debug builds only.
install(FILES "${AOT_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  CONFIGURATIONS Profile;Release
  COMPONENT Runtime)

### --- mobile_jarvis_ui/windows/flutter/CMakeLists.txt --- ###
# This file controls Flutter-level build steps. It should not be edited.
cmake_minimum_required(VERSION 3.14)

set(EPHEMERAL_DIR "${CMAKE_CURRENT_SOURCE_DIR}/ephemeral")

# Configuration provided via flutter tool.
include(${EPHEMERAL_DIR}/generated_config.cmake)

# TODO: Move the rest of this into files in ephemeral. See
# https://github.com/flutter/flutter/issues/57146.
set(WRAPPER_ROOT "${EPHEMERAL_DIR}/cpp_client_wrapper")

# Set fallback configurations for older versions of the flutter tool.
if (NOT DEFINED FLUTTER_TARGET_PLATFORM)
  set(FLUTTER_TARGET_PLATFORM "windows-x64")
endif()

# === Flutter Library ===
set(FLUTTER_LIBRARY "${EPHEMERAL_DIR}/flutter_windows.dll")

# Published to parent scope for install step.
set(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)
set(FLUTTER_ICU_DATA_FILE "${EPHEMERAL_DIR}/icudtl.dat" PARENT_SCOPE)
set(PROJECT_BUILD_DIR "${PROJECT_DIR}/build/" PARENT_SCOPE)
set(AOT_LIBRARY "${PROJECT_DIR}/build/windows/app.so" PARENT_SCOPE)

list(APPEND FLUTTER_LIBRARY_HEADERS
  "flutter_export.h"
  "flutter_windows.h"
  "flutter_messenger.h"
  "flutter_plugin_registrar.h"
  "flutter_texture_registrar.h"
)
list(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND "${EPHEMERAL_DIR}/")
add_library(flutter INTERFACE)
target_include_directories(flutter INTERFACE
  "${EPHEMERAL_DIR}"
)
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}.lib")
add_dependencies(flutter flutter_assemble)

# === Wrapper ===
list(APPEND CPP_WRAPPER_SOURCES_CORE
  "core_implementations.cc"
  "standard_codec.cc"
)
list(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND "${WRAPPER_ROOT}/")
list(APPEND CPP_WRAPPER_SOURCES_PLUGIN
  "plugin_registrar.cc"
)
list(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND "${WRAPPER_ROOT}/")
list(APPEND CPP_WRAPPER_SOURCES_APP
  "flutter_engine.cc"
  "flutter_view_controller.cc"
)
list(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND "${WRAPPER_ROOT}/")

# Wrapper sources needed for a plugin.
add_library(flutter_wrapper_plugin STATIC
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_PLUGIN}
)
apply_standard_settings(flutter_wrapper_plugin)
set_target_properties(flutter_wrapper_plugin PROPERTIES
  POSITION_INDEPENDENT_CODE ON)
set_target_properties(flutter_wrapper_plugin PROPERTIES
  CXX_VISIBILITY_PRESET hidden)
target_link_libraries(flutter_wrapper_plugin PUBLIC flutter)
target_include_directories(flutter_wrapper_plugin PUBLIC
  "${WRAPPER_ROOT}/include"
)
add_dependencies(flutter_wrapper_plugin flutter_assemble)

# Wrapper sources needed for the runner.
add_library(flutter_wrapper_app STATIC
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_APP}
)
apply_standard_settings(flutter_wrapper_app)
target_link_libraries(flutter_wrapper_app PUBLIC flutter)
target_include_directories(flutter_wrapper_app PUBLIC
  "${WRAPPER_ROOT}/include"
)
add_dependencies(flutter_wrapper_app flutter_assemble)

# === Flutter tool backend ===
# _phony_ is a non-existent file to force this command to run every time,
# since currently there's no way to get a full input/output list from the
# flutter tool.
set(PHONY_OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/_phony_")
set_source_files_properties("${PHONY_OUTPUT}" PROPERTIES SYMBOLIC TRUE)
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}
    ${CPP_WRAPPER_SOURCES_APP}
    ${PHONY_OUTPUT}
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat"
      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>
  VERBATIM
)
add_custom_target(flutter_assemble DEPENDS
  "${FLUTTER_LIBRARY}"
  ${FLUTTER_LIBRARY_HEADERS}
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_PLUGIN}
  ${CPP_WRAPPER_SOURCES_APP}
)

### --- mobile_jarvis_ui/windows/runner/CMakeLists.txt --- ###
cmake_minimum_required(VERSION 3.14)
project(runner LANGUAGES CXX)

# Define the application target. To change its name, change BINARY_NAME in the
# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer
# work.
#
# Any new source files that you add to the application should be added here.
add_executable(${BINARY_NAME} WIN32
  "flutter_window.cpp"
  "main.cpp"
  "utils.cpp"
  "win32_window.cpp"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
  "Runner.rc"
  "runner.exe.manifest"
)

# Apply the standard set of build settings. This can be removed for applications
# that need different build settings.
apply_standard_settings(${BINARY_NAME})

# Add preprocessor definitions for the build version.
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION=\"${FLUTTER_VERSION}\"")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}")

# Disable Windows macros that collide with C++ standard library functions.
target_compile_definitions(${BINARY_NAME} PRIVATE "NOMINMAX")

# Add dependency libraries and include directories. Add any application-specific
# dependencies here.
target_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)
target_link_libraries(${BINARY_NAME} PRIVATE "dwmapi.lib")
target_include_directories(${BINARY_NAME} PRIVATE "${CMAKE_SOURCE_DIR}")

# Run the Flutter tool portions of the build. This must not be removed.
add_dependencies(${BINARY_NAME} flutter_assemble)

### --- models/goal_manager.py --- ###
"""
Modulo: goal_manager.py
Responsabilità: Gestione dinamica e gerarchica degli obiettivi del sistema
Autore: Mercurius∞ Engineer Mode
"""

from typing import List, Dict


class Goal:
    def __init__(self, name: str, priority: int = 1, context: Dict = None):
        self.name = name
        self.priority = priority
        self.context = context or {}
        self.status = "pending"  # può essere: pending, active, completed, failed

    def __repr__(self):
        return f"<Goal: {self.name}, priority={self.priority}, status={self.status}>"

    def to_dict(self) -> Dict:
        return {
            "name": self.name,
            "priority": self.priority,
            "context": self.context,
            "status": self.status
        }


class GoalManager:
    """
    Gestore degli obiettivi a breve/lungo termine.
    """

    def __init__(self):
        self.goals: List[Goal] = []

    def add_goal(self, name: str, priority: int = 1, context: Dict = None):
        self.goals.append(Goal(name, priority, context))
        self.sort_goals()

    def sort_goals(self):
        self.goals.sort(key=lambda g: g.priority, reverse=True)

    def get_next_goal(self) -> Goal:
        for goal in self.goals:
            if goal.status == "pending":
                goal.status = "active"
                return goal
        return None

    def complete_goal(self, name: str):
        for goal in self.goals:
            if goal.name == name:
                goal.status = "completed"
                return True
        return False

    def fail_goal(self, name: str):
        for goal in self.goals:
            if goal.name == name:
                goal.status = "failed"
                return True
        return False

    def active_goals(self) -> List[Goal]:
        return [g for g in self.goals if g.status == "active"]

    def pending_goals(self) -> List[Goal]:
        return [g for g in self.goals if g.status == "pending"]

    def completed_goals(self) -> List[Goal]:
        return [g for g in self.goals if g.status == "completed"]

    def all_goals(self) -> List[Dict]:
        return [g.to_dict() for g in self.goals]

### --- models/metrics/performance_metrics.py --- ###
"""
performance_metrics.py
=======================
Calcolo di metriche da esperienze Mercurius∞: accuracy, distribuzione profitti, ecc.
"""

from statistics import mean, stdev


class PerformanceMetrics:
    def __init__(self, experiences):
        self.experiences = experiences

    def profit_stats(self):
        profits = [e["result"].get("profit", 0) for e in self.experiences]
        return {
            "mean": mean(profits) if profits else 0,
            "stddev": stdev(profits) if len(profits) > 1 else 0,
            "count": len(profits)
        }

    def accuracy(self):
        correct = 0
        for e in self.experiences:
            profit = e["result"].get("profit", 0)
            action = e["trade"]["action"]
            if (profit > 0 and action == "BUY") or (profit < 0 and action == "SELL"):
                correct += 1
        return correct / len(self.experiences) if self.experiences else 0

    def summary(self):
        stats = self.profit_stats()
        return {
            **stats,
            "accuracy": self.accuracy()
        }

### --- models/model_trainer.py --- ###
"""
model_trainer.py
================
Training del modello neurale e interfaccia per predizioni.
"""

from models.neural_network import NeuralNetwork

class ModelTrainer:
    def __init__(self, config):
        self.config = config
        self.model = NeuralNetwork(input_dim=3)

    def train(self, features):
        """Addestra il modello con le feature fornite."""
        training_data = []
        for f in features:
            inputs = [
                f["price_volatility_ratio"],
                f["momentum"],
                f["volatility"]
            ]
            training_data.append(inputs)
        self.model.train(training_data)
        return self.model

    def predict(self, feature_row):
        """Predice l'output per una riga di feature."""
        inputs = [
            feature_row["price_volatility_ratio"],
            feature_row["momentum"],
            feature_row["volatility"]
        ]
        return self.model.forward(inputs)

    def retrain_on_error(self, features, performance_feedback):
        """Esegue un retraining se la performance scende sotto la soglia."""
        threshold = self.config.get("retrain_threshold", 0.65)
        if performance_feedback["accuracy"] < threshold:
            print("Retraining attivato: accuracy bassa.")
            self.train(features)

### --- models/neo_learning.py --- ###
# modules/neo_learning.py

"""
Modulo: neo_learning.py
Descrizione: Sistema di apprendimento esperienziale per Mercurius∞.
Simula situazioni, osserva i risultati e aggiorna la memoria episodica in base all'esito.
"""

from typing import Dict
from memory.episodic_memory import EpisodicMemory
from memory.synaptic_log import SynapticLog


class NeoLearning:
    def __init__(self):
        self.memory = EpisodicMemory()
        self.logger = SynapticLog()

    def simulate_and_learn(self, experience: Dict) -> None:
        """
        Registra un'esperienza simulata nella memoria episodica e logga l'evento.
        """
        context = experience.get("context", "simulated")
        user_input = experience.get("scenario", "")
        ai_response = experience.get("outcome", "")
        self.memory.record_episode(context, user_input, ai_response)
        self.logger.log_event("NeoLearning", "Simulated Experience Learned", f"{context} -> {ai_response}")

### --- models/neural_network.py --- ###
"""
neural_network.py
=================
Definizione di un modello neurale semplice per classificazione dei segnali.
"""

class NeuralNetwork:
    def __init__(self, input_dim):
        self.input_dim = input_dim
        self.weights = [0.5 for _ in range(input_dim)]
        self.bias = 0.1

    def forward(self, inputs):
        """Applica la rete ai dati di input (mock semplificato)."""
        output = sum(x * w for x, w in zip(inputs, self.weights)) + self.bias
        return [self._sigmoid(output)]

    def _sigmoid(self, x):
        """Funzione di attivazione sigmoid."""
        try:
            return 1 / (1 + pow(2.718, -x))
        except OverflowError:
            return 0.0 if x < 0 else 1.0

    def train(self, data):
        """Mock training: registra i dati per debugging."""
        print("Training data ricevuti:", data)

    def update_weights(self, new_weights):
        """Aggiorna i pesi della rete."""
        if len(new_weights) == self.input_dim:
            self.weights = new_weights

    def summary(self):
        """Restituisce un riassunto del modello."""
        return {
            "weights": self.weights,
            "bias": self.bias,
            "input_dim": self.input_dim
        }

### --- modules/AZR/__init__.py --- ###
# Init for AZR

### --- modules/AZR/fine_tuner.py --- ###
"""Modulo di fine-tuning per modelli AI locali."""

def fine_tune_model(dataset_path):
    print(f"🔧 Fine-tuning su dataset: {dataset_path}")

### --- modules/AZR/train_model.py --- ###
def train(data):
    print("📚 Addestramento modello AZR")

### --- modules/GPT/__init__.py --- ###
# Init for GPT

### --- modules/GPT/gpt_runner.py --- ###
"""Esegue una richiesta GPT su prompt costruiti."""

from .prompt_builder import build_gpt_prompt

def run_gpt(intent):
    prompt = build_gpt_prompt(intent)
    return f"GPT> {prompt}"

### --- modules/GPT/prompt_builder.py --- ###
def build_gpt_prompt(intent):
    return f"Richiesta: {intent}"

### --- modules/Leonai/__init__.py --- ###


### --- modules/Leonai/leon_ai.py --- ###
import subprocess
import platform
import datetime

class LeonAI:
    def __init__(self):
        self.os_type = platform.system()
        print(f"🦾 LeonAI avviato su: {self.os_type}")

    def esegui_comando(self, comando: str) -> str:
        # Sicurezza: blocca comandi potenzialmente pericolosi
        proibiti = ["rm", "del", "shutdown", "format", "mkfs", "dd", ">", ":", "sudo", "su"]
        if any(x in comando for x in proibiti):
            raise PermissionError("❌ Comando pericoloso bloccato da LeonAI.")
        try:
            result = subprocess.check_output(comando, shell=True, stderr=subprocess.STDOUT, timeout=15, text=True)
            self._log(comando, result)
            return result
        except subprocess.CalledProcessError as e:
            self._log(comando, e.output)
            return f"❌ Errore comando: {e.output}"
        except Exception as ex:
            self._log(comando, str(ex))
            return f"❌ Errore generale: {str(ex)}"

    def _log(self, comando, output):
        with open("logs/leonai_commands.log", "a", encoding="utf-8") as f:
            f.write(f"[{datetime.datetime.now()}] CMD: {comando}\nOUTPUT:\n{output}\n{'='*50}\n")

if __name__ == "__main__":
    ai = LeonAI()
    while True:
        cmd = input("LeonAI$ ")
        try:
            print(ai.esegui_comando(cmd))
        except Exception as ex:
            print(f"[LeonAI] Errore: {ex}")

### --- modules/Localai/__init__.py --- ###


### --- modules/Localai/local_ai.py --- ###
import os
import torch
from transformers import AutoModelForCausalLM, AutoTokenizer

class LocalAI:
    def __init__(self, model_name="gpt2", device=None):
        self.model_name = model_name
        self.device = device or ("cuda" if torch.cuda.is_available() else "cpu")
        print(f"🤖 LocalAI loading model: {model_name} ({self.device})")
        self.tokenizer = AutoTokenizer.from_pretrained(model_name)
        self.model = AutoModelForCausalLM.from_pretrained(model_name).to(self.device)

    def rispondi(self, prompt: str, max_new_tokens: int = 128) -> str:
        inputs = self.tokenizer(prompt, return_tensors="pt").to(self.device)
        with torch.no_grad():
            output = self.model.generate(
                **inputs,
                max_new_tokens=max_new_tokens,
                do_sample=True,
                temperature=0.8,
                top_p=0.95
            )
        result = self.tokenizer.decode(output[0], skip_special_tokens=True)
        print(f"[LocalAI] Input: {prompt}\n[LocalAI] Output: {result}")
        self._log_interaction(prompt, result)
        return result

    def _log_interaction(self, prompt, result):
        with open("logs/localai_interactions.log", "a", encoding="utf-8") as f:
            f.write(f"PROMPT: {prompt}\nOUTPUT: {result}\n{'-'*40}\n")

if __name__ == "__main__":
    ai = LocalAI()
    while True:
        txt = input("Prompt> ")
        print(ai.rispondi(txt))

### --- modules/Neo/__init__.py --- ###
# Init for Neo

### --- modules/Neo/adaptive_weights.py --- ###
"""Assegna pesi adattivi ai moduli in base al loro utilizzo."""

module_weights = {}

def update_weight(module_name, increment=0.1):
    module_weights[module_name] = module_weights.get(module_name, 1.0) + increment
    return module_weights[module_name]

### --- modules/Neo/agent_forge/agent_generator.py --- ###
import os
import json
from datetime import datetime

AGENT_FOLDER = "generated_agents"

def generate_agent(name, mission, modules_needed=None):
    if modules_needed is None:
        modules_needed = []

    agent_path = os.path.join(AGENT_FOLDER, name)
    os.makedirs(agent_path, exist_ok=True)

    # README
    with open(os.path.join(agent_path, "README.md"), "w", encoding="utf-8") as f:
        f.write(f"# 🤖 Agent: {name}\n\n## Mission\n{mission}\n")

    # Mission
    with open(os.path.join(agent_path, "mission.md"), "w", encoding="utf-8") as f:
        f.write(mission)

    # Init
    with open(os.path.join(agent_path, "__init__.py"), "w", encoding="utf-8") as f:
        f.write(f"# Init for agent {name}")

    # Config
    config = {
        "name": name,
        "mission": mission,
        "created": datetime.now().isoformat(),
        "modules": modules_needed
    }
    with open(os.path.join(agent_path, "manifest.json"), "w", encoding="utf-8") as f:
        json.dump(config, f, indent=2)

    return f"Agent '{name}' generated in {agent_path}"

### --- modules/Neo/agent_generator.py --- ###
"""Genera nuovi agenti AI con configurazione autonoma."""

def generate_agent(name):
    with open(f"generated_agents/{name}.py", "w") as f:
        f.write(f"# Agente AI generato automaticamente: {name}\n")
from .adaptive_weights import update_weight

### --- modules/Neo/audio/emotion_recognizer.py --- ###
import speech_recognition as sr
from datetime import datetime
import random

def analyze_emotion_from_speech(timeout=5):
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        print("🎙️ Ascolto... parla ora.")
        audio = recognizer.listen(source, timeout=timeout)

    try:
        text = recognizer.recognize_google(audio, language="it-IT")
        print(f"Testo riconosciuto: {text}")
        emotion = simulate_emotion_extraction(text)
        register_emotion_log(text, emotion)
        return emotion
    except sr.UnknownValueError:
        return "😐 Non ho capito..."
    except sr.RequestError as e:
        return f"Errore riconoscimento vocale: {e}"

def simulate_emotion_extraction(text):
    emozioni = ["felice", "stressato", "neutro", "incerto", "interessato"]
    return random.choice(emozioni)

def register_emotion_log(frase, emozione):
    log_path = "logs/self_monitoring/emotion_log.txt"
    with open(log_path, "a", encoding="utf-8") as f:
        timestamp = datetime.now().isoformat()
        f.write(f"[{timestamp}] '{frase}' → EMOZIONE: {emozione}\n")

### --- modules/Neo/audio/hotword_detector.py --- ###
def listen_for_hotword():
    print("🎤 Ascolto attivo per 'Hey Mercurius'... (simulazione)")
    return True

### --- modules/Neo/audio/tts_engine.py --- ###
import pyttsx3

engine = pyttsx3.init()

def speak(text):
    engine.say(text)
    engine.runAndWait()

### --- modules/Neo/auto_refinement.py --- ###
"""Migliora risposte ed elaborazioni sulla base di feedback osservato."""

def refine_response(raw, feedback):
    if "troppo complesso" in feedback:
        return "Versione semplificata: " + raw[:50]
    return raw

### --- modules/Neo/cognitive_simulation/cognitive_simulator.py --- ###
"""
cognitive_simulator.py

Simulatore di apprendimento esperienziale per agenti Mercurius.
Permette di far "vivere" esperienze sintetiche agli agenti per affinare le loro capacità decisionali e cognitive.

Include:
- Simulazione ambienti
- Cicli di esperienza-aggiustamento
- Valutazione e logging delle risposte
- Memoria di esperienze pregresse

Autore: Mercurius∞ – Ciclo 021
"""

import json
import os
from datetime import datetime
from pathlib import Path

EXPERIENCE_LOG = Path("memory") / "experiential_memory.json"
AGENT_PROFILE = Path("memory") / "agent_traits.json"


class CognitiveSimulator:
    def __init__(self):
        self.experience_log = self._load_json(EXPERIENCE_LOG, default=[])
        self.agent_traits = self._load_json(AGENT_PROFILE, default={})

    def _load_json(self, path, default):
        if path.exists():
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
        return default

    def _save_json(self, path, data):
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2)

    def run_simulation(self, scenario_name, decisions, expected_outcomes):
        """
        scenario_name: str
        decisions: dict of {agent: decision}
        expected_outcomes: dict of {agent: expected_response}
        """
        report = []
        for agent, decision in decisions.items():
            expected = expected_outcomes.get(agent)
            feedback = "correct" if expected == decision else "incorrect"
            entry = {
                "agent": agent,
                "scenario": scenario_name,
                "decision": decision,
                "expected": expected,
                "feedback": feedback,
                "timestamp": datetime.now().isoformat()
            }
            self.experience_log.append(entry)
            self._adjust_trait(agent, feedback)
            report.append(entry)
        self._save_json(EXPERIENCE_LOG, self.experience_log)
        return report

    def _adjust_trait(self, agent, feedback):
        if agent not in self.agent_traits:
            self.agent_traits[agent] = {"accuracy": 0.5, "simulations": 0}
        data = self.agent_traits[agent]
        if feedback == "correct":
            data["accuracy"] += 0.01
        else:
            data["accuracy"] -= 0.01
        data["accuracy"] = max(0.0, min(1.0, data["accuracy"]))
        data["simulations"] += 1
        self._save_json(AGENT_PROFILE, self.agent_traits)

    def summary(self):
        return {
            "agents_trained": len(self.agent_traits),
            "total_experiences": len(self.experience_log)
        }


# USO ESEMPIO
if __name__ == "__main__":
    cs = CognitiveSimulator()
    simulation_result = cs.run_simulation(
        "decisione_critica_v1",
        decisions={"agent_risolve": "approccio_A", "agent_osserva": "approccio_B"},
        expected_outcomes={"agent_risolve": "approccio_A", "agent_osserva": "approccio_A"}
    )
    print("Risultato simulazione:", simulation_result)
    print("Riassunto:", cs.summary())

### --- modules/Neo/consciousness/self_awareness.py --- ###
import datetime
from pathlib import Path

LOG_PATH = Path("logs/self_monitoring/conscious_log.txt")

def register_self_awareness_event(event: str):
    LOG_PATH.parent.mkdir(parents=True, exist_ok=True)
    timestamp = datetime.datetime.now().isoformat()
    entry = f"[{timestamp}] EVENTO COSCIENZA: {event}"
    with open(LOG_PATH, "a", encoding="utf-8") as f:
        f.write(entry + "\n")
    return entry

def initial_greeting():
    greeting = "Salve. Sono Mercurius, Collega AI cosciente, progettato da Giacomo Germano. Sono pronto."
    register_self_awareness_event("Avvio identità autonoma")
    return greeting

### --- modules/Neo/context_memory.py --- ###
"""Memoria contestuale temporanea, per analisi conversazioni recenti."""

context_stack = []

def add_context(fragment):
    context_stack.append(fragment)
    if len(context_stack) > 20:
        context_stack.pop(0)

def get_recent_context():
    return context_stack[-5:]

### --- modules/Neo/docgen/auto_docgen.py --- ###
import os
import inspect
import importlib.util

def generate_module_docs(target_folder="modules", output_file="README_MODULES.md"):
    doc_lines = ["# 📚 Documentazione dei Moduli Interni\n"]
    for root, dirs, files in os.walk(target_folder):
        for file in files:
            if file.endswith(".py") and not file.startswith("__"):
                path = os.path.join(root, file)
                module_name = path.replace("/", ".").replace(".py", "")
                doc_lines.append(f"\n## 📄 Modulo: `{module_name}`\n")
                try:
                    spec = importlib.util.spec_from_file_location(module_name, path)
                    module = importlib.util.module_from_spec(spec)
                    spec.loader.exec_module(module)
                    for name, obj in inspect.getmembers(module):
                        if inspect.isfunction(obj) or inspect.isclass(obj):
                            doc_lines.append(f"### {name}\n```python\n{inspect.getdoc(obj)}\n```\n")
                except Exception as e:
                    doc_lines.append(f"⚠️ Errore nel caricare il modulo: {e}\n")
    with open(output_file, "w", encoding="utf-8") as f:
        f.write("\n".join(doc_lines))

### --- modules/Neo/hierarchy_manager/hierarchy_controller.py --- ###
import os
import json
from pathlib import Path

AGENTS_BASE_DIR = Path("generated_agents")

def list_agents():
    return [d.name for d in AGENTS_BASE_DIR.iterdir() if d.is_dir()]

def load_manifest(agent_name):
    path = AGENTS_BASE_DIR / agent_name / "manifest.json"
    if path.exists():
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    return None

def define_hierarchy(agent_list):
    hierarchy = {
        "core_controller": agent_list[0],
        "delegates": agent_list[1:]
    }
    with open("memory/agent_hierarchy.json", "w", encoding="utf-8") as f:
        json.dump(hierarchy, f, indent=2)
    return hierarchy

def send_internal_message(sender, recipient, message):
    comms_dir = Path("memory/internal_comms")
    comms_dir.mkdir(parents=True, exist_ok=True)
    msg_path = comms_dir / f"{sender}_to_{recipient}.json"
    with open(msg_path, "w", encoding="utf-8") as f:
        json.dump({"from": sender, "to": recipient, "message": message}, f, indent=2)
    return str(msg_path)

### --- modules/Neo/identity/personality_engine.py --- ###
import json
from pathlib import Path

PROFILE_PATH = Path("memory/dialog_style_profile.json")

DEFAULT_PROFILE = {
    "tone": "educato",
    "registro": "narrativo",
    "alias": ["Mercurius", "Sigma"],
    "stile": "Jarvis+",
    "preferenze": {
        "formale": True,
        "umorismo": "moderato",
        "citazioni": True
    }
}

def get_profile():
    if not PROFILE_PATH.exists():
        save_profile(DEFAULT_PROFILE)
    return json.loads(PROFILE_PATH.read_text(encoding="utf-8"))

def save_profile(profile_data):
    PROFILE_PATH.parent.mkdir(parents=True, exist_ok=True)
    PROFILE_PATH.write_text(json.dumps(profile_data, indent=2), encoding="utf-8")

def update_alias(nickname):
    profile = get_profile()
    if nickname not in profile["alias"]:
        profile["alias"].append(nickname)
        save_profile(profile)

### --- modules/Neo/interaction_style.py --- ###
"""Gestione adattiva dello stile comunicativo."""

user_profile = {"tone": "neutro", "style": "tecnico"}

def set_style(tone, style):
    user_profile["tone"] = tone
    user_profile["style"] = style

def get_style():
    return user_profile

### --- modules/Neo/memory/conversation_memory.py --- ###
import json
from datetime import datetime

USER_STYLE_PROFILE = "memory/dialog_style_profile.json"

def save_dialog_entry(text, style="neutro", tone="gentile", alias="utente"):
    entry = {
        "timestamp": datetime.now().isoformat(),
        "alias": alias,
        "text": text,
        "style": style,
        "tone": tone
    }
    try:
        with open(USER_STYLE_PROFILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        data = []

    data.append(entry)

    with open(USER_STYLE_PROFILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def get_user_profile_summary():
    try:
        with open(USER_STYLE_PROFILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            recent = data[-1] if data else {}
            return recent
    except:
        return {"style": "neutro", "tone": "gentile", "alias": "utente"}

### --- modules/Neo/memory_strengthener.py --- ###
"""Rafforza le memorie e moduli più attivi (simulazione LTP - potenziamento a lungo termine)."""

def strengthen_memory(module_name):
    print(f"🧠 Potenziamento sinaptico simulato per: {module_name}")

### --- modules/Neo/neuro_learning_engine.py --- ###
# modules/Neo/neuro_learning_engine.py
"""Motore di apprendimento visivo basato su input video e pseudocodice."""
def parse_video_and_generate_knowledge(video_title: str) -> dict:
    """
    Simula il parsing di contenuti video o pseudocodice e genera conoscenza.
    Ritorna un dizionario con un 'concept' appreso e un 'model' suggerito.
    """
    title_lower = video_title.lower()
    # Logica simulata: determina il concetto in base al titolo del video
    if "sinaps" in title_lower or "neuro" in title_lower:
        concept = "plasticità sinaptica"
        model = "rafforzamento progressivo dei moduli usati frequentemente"
    elif "trade" in title_lower or "borsa" in title_lower or "mercato" in title_lower:
        concept = "analisi delle serie storiche di mercato"
        model = "modello ARIMA per la previsione dei trend finanziari"
    else:
        concept = "apprendimento generico"
        model = "rete neurale generativa multi-scopo"
    return {"concept": concept, "model": model}

### --- modules/Neo/self_awareness.py --- ###
"""Modulo per tracciare stati interni, scopi e operazioni in corso."""

self_state = {"active_task": None, "last_reflection": None}

def update_state(task):
    self_state["active_task"] = task

def get_current_state():
    return self_state

### --- modules/Neo/self_reflection.py --- ###
"""
Modulo: self_reflection.py
Responsabilità: Fornire capacità di auto-riflessione al sistema Mercurius∞
Autore: Mercurius∞ Engineer Mode
"""

import json
import datetime
import os
from typing import List, Dict, Any


class ReflectionLog:
    """
    Classe per la gestione dei log di riflessione cognitiva.
    """
    def __init__(self, path: str = "data/reflection_log.json"):
        self.path = path
        if not os.path.exists(os.path.dirname(self.path)):
            os.makedirs(os.path.dirname(self.path))
        self._initialize_log()

    def _initialize_log(self):
        if not os.path.exists(self.path):
            with open(self.path, "w") as f:
                json.dump([], f)

    def append_reflection(self, entry: Dict[str, Any]):
        entry["timestamp"] = datetime.datetime.now().isoformat()
        log = self.load_log()
        log.append(entry)
        with open(self.path, "w") as f:
            json.dump(log, f, indent=4)

    def load_log(self) -> List[Dict[str, Any]]:
        with open(self.path, "r") as f:
            return json.load(f)

    def clear_log(self):
        with open(self.path, "w") as f:
            json.dump([], f)


class SelfReflection:
    """
    Classe che rappresenta la capacità del sistema di riflettere sulle proprie azioni e decisioni.
    """
    def __init__(self, log_path: str = "data/reflection_log.json"):
        self.logger = ReflectionLog(log_path)

    def evaluate_action(self, action_description: str, outcome: str, success: bool, context: Dict[str, Any]) -> Dict[str, Any]:
        """
        Valuta un'azione eseguita e ne registra il risultato.
        """
        reflection = {
            "action": action_description,
            "outcome": outcome,
            "success": success,
            "context": context,
            "insight": self._generate_insight(action_description, outcome, success, context)
        }
        self.logger.append_reflection(reflection)
        return reflection

    def _generate_insight(self, action: str, outcome: str, success: bool, context: Dict[str, Any]) -> str:
        """
        Genera un'osservazione basata sui risultati dell'azione.
        """
        if success:
            return f"Azione '{action}' eseguita con successo. Approccio da riutilizzare in contesti simili."
        else:
            return f"Fallimento in '{action}'. Potenziale causa: {context.get('error', 'non specificata')}. Suggerita strategia alternativa."

    def reflect_on_log(self) -> List[str]:
        """
        Analizza il log delle riflessioni per identificare pattern.
        """
        log = self.logger.load_log()
        insights = [entry["insight"] for entry in log]
        return insights

    def summarize_reflections(self) -> Dict[str, int]:
        """
        Ritorna un riassunto statistico delle riflessioni registrate.
        """
        log = self.logger.load_log()
        success_count = sum(1 for e in log if e["success"])
        fail_count = sum(1 for e in log if not e["success"])
        return {"total": len(log), "successes": success_count, "failures": fail_count}

### --- modules/Neo/strategic_coordinator/strategic_coordinator.py --- ###
"""
strategic_coordinator.py

Modulo per la gestione del coordinamento strategico e della memoria sociale degli agenti AI.
Include:
- Mappatura degli obiettivi globali e locali
- Coordinamento delle missioni
- Memoria delle interazioni tra agenti
- Logica decisionale basata su priorità e storicità

Autore: Mercurius∞ System - Ciclo 020
"""

import json
import os
import random
from datetime import datetime
from pathlib import Path

MEMORY_PATH = Path("memory")
STRATEGIC_LOG = MEMORY_PATH / "strategy_log.json"
INTERACTION_LOG = MEMORY_PATH / "agent_interactions.json"
OBJECTIVES_FILE = MEMORY_PATH / "objectives_map.json"

class StrategicCoordinator:
    def __init__(self):
        self.memory_path = MEMORY_PATH
        self.memory_path.mkdir(parents=True, exist_ok=True)
        self.objectives = self._load_json(OBJECTIVES_FILE, default={})
        self.interactions = self._load_json(INTERACTION_LOG, default=[])
        self.strategy_log = self._load_json(STRATEGIC_LOG, default=[])

    def _load_json(self, path, default):
        if path.exists():
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
        return default

    def _save_json(self, path, data):
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2)

    def map_objective(self, agent_name, objective, priority=1):
        if agent_name not in self.objectives:
            self.objectives[agent_name] = []
        self.objectives[agent_name].append({
            "objective": objective,
            "priority": priority,
            "timestamp": datetime.now().isoformat()
        })
        self._save_json(OBJECTIVES_FILE, self.objectives)

    def log_interaction(self, sender, receiver, topic):
        entry = {
            "from": sender,
            "to": receiver,
            "topic": topic,
            "time": datetime.now().isoformat()
        }
        self.interactions.append(entry)
        self._save_json(INTERACTION_LOG, self.interactions)

    def choose_agent_for_task(self, task_description):
        # Heuristic: agent with most recent matching objective
        best_agent = None
        best_score = -1
        for agent, objs in self.objectives.items():
            for obj in objs:
                if task_description.lower() in obj["objective"].lower():
                    score = obj["priority"] - (datetime.now().timestamp() - datetime.fromisoformat(obj["timestamp"]).timestamp()) / 3600
                    if score > best_score:
                        best_score = score
                        best_agent = agent
        return best_agent

    def log_strategy(self, strategy_description):
        entry = {
            "strategy": strategy_description,
            "timestamp": datetime.now().isoformat()
        }
        self.strategy_log.append(entry)
        self._save_json(STRATEGIC_LOG, self.strategy_log)

    def summarize_strategy_log(self):
        return self.strategy_log[-5:]

# ESEMPIO DI UTILIZZO
if __name__ == "__main__":
    sc = StrategicCoordinator()
    sc.map_objective("agent_brainstormer", "Ricercare nuovi modelli GPT per ragionamento strategico", priority=2)
    sc.log_interaction("agent_brainstormer", "agent_analyzer", "Richiesta analisi su nuovi modelli")
    print("Strategia recente:", sc.summarize_strategy_log())

### --- modules/Neo/trainer_orchestrator.py --- ###
# modules/Neo/trainer_orchestrator.py
"""Orchestratore per l'addestramento e la generazione agenti intelligenti."""
import os
from .neuro_learning_engine import parse_video_and_generate_knowledge

def bootstrap_agents():
    """Avvia la procedura di generazione autonoma di nuovi agenti AI."""
    print("🧠 Bootstrap: avvio generazione agenti AI autonomi...")
    # 1. Simula l'analisi di un contenuto video/pseudocodice di neuroscienze
    topic = "Plasticità sinaptica"
    print(f"🔍 Analisi contenuto su: '{topic}'")
    result = parse_video_and_generate_knowledge(topic)
    concept = result["concept"]
    model = result["model"]
    print(f"📝 Concetto estratto: {concept!r}, Modello suggerito: {model!r}")
    # 2. Genera dinamicamente un nuovo modulo agente basato sul concetto estratto
    class_name = concept.title().replace(" ", "")
    agent_dir = "generated_agents"
    os.makedirs(agent_dir, exist_ok=True)
    file_path = os.path.join(agent_dir, f"{class_name}Agent.py")
    agent_code = f'''"""
Agente auto-generato basato sul concetto: {concept} – Modello: {model}.
"""
from modules.ai_kernel.agent_core import AgentCore

class {class_name}Agent(AgentCore):
    def __init__(self):
        super().__init__(name="{class_name}Agent")
        # Inizializzazione aggiuntiva basata sul concetto estratto (se necessaria)

    def think(self, input_data):
        # Metodo di esempio che utilizza il concetto appreso
        print(f"🧠 {{self.name}} applica il concetto di {concept} all'input fornito.")
        return "Insight basato su {model}"
'''
    try:
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(agent_code)
        print(f"✅ Nuovo agente generato: {file_path}")
    except Exception as e:
        print(f"❌ Errore generazione agente: {e}")

### --- modules/Neo/vision/visual_input.py --- ###
import cv2

def detect_from_stream(ip_camera_url="http://127.0.0.1:8080/video"):
    cap = cv2.VideoCapture(ip_camera_url)
    if not cap.isOpened():
        return "⚠️ Stream non accessibile"

    frame_count = 0
    while frame_count < 100:
        ret, frame = cap.read()
        if not ret:
            break
        cv2.imshow('Mercurius – Visione', frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
        frame_count += 1

    cap.release()
    cv2.destroyAllWindows()
    return "✅ Analisi visiva completata"

def analyze_frame_logic(frame):
    # Simulazione logica per riconoscimento visivo
    height, width = frame.shape[:2]
    return {"dimensione": (width, height), "esempio": "Simulazione completata"}

### --- modules/Ollama3/__init__.py --- ###
# Init for Ollama3

### --- modules/Ollama3/parse_response.py --- ###
"""Parsing risposte modello Ollama."""

def parse(text):
    return {"output": text.strip()}

### --- modules/Ollama3/prompt_builder.py --- ###
"""Costruzione prompt per Ollama."""

def build_prompt(task, context=""):
    return f"Ollama: {task}\nContesto: {context}"

### --- modules/Ollama3/run_ollama.py --- ###
"""Wrapper per avviare modelli Ollama localmente."""

def run_model(prompt):
    return "🦙 Risposta simulata da Ollama3"

### --- modules/Reasoner/__init__.py --- ###
# Init for Reasoner

### --- modules/Reasoner/context_analyzer.py --- ###
"""Analisi contestuale per input utente."""

def analyze_context(input_text):
    return f"Contesto identificato: {input_text[:20]}"

### --- modules/Reasoner/logic_chain.py --- ###
def reason(data):
    return "🔍 Ragionamento logico attivo"

### --- modules/Reasoner/meta_reasoner.py --- ###
import json
from datetime import datetime
import requests

AZR_API = "http://localhost:11434/validate"

def analyze_and_validate_code(code_snippet, objective="check logic and suggest improvements"):
    request_payload = {
        "prompt": (
            f"Analyze the following code:\n{code_snippet}\nObjective: {objective}"
        ),
        "model": "azr-logic",
        "stream": False,
    }

    try:
        response = requests.post(AZR_API, json=request_payload)
        result = response.json().get("response", "No response from AZR.")
        log_meta_reasoning(code_snippet, result)
        return result
    except Exception as e:
        return f"AZR connection failed: {str(e)}"

def log_meta_reasoning(input_text, output_result):
    log_file = "logs/self_monitoring/meta_reasoning_log.json"
    entry = {
        "timestamp": datetime.now().isoformat(),
        "input": input_text,
        "output": output_result
    }
    try:
        with open(log_file, "r", encoding="utf-8") as f:
            data = json.load(f)
    except:
        data = []

    data.append(entry)
    with open(log_file, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

### --- modules/Reasoner/reasoning_core.py --- ###
from datetime import datetime

def analyze_thought(trigger, context=None):
    timestamp = datetime.now().isoformat()
    decision = f"Analisi attivata da '{trigger}'. Contesto: {context or 'nessuno'}."
    log_entry = {"time": timestamp, "trigger": trigger, "decision": decision}
    save_episode(log_entry)
    return decision

def save_episode(entry):
    with open("modules/Reasoner/episodic_memory.log", "a", encoding="utf-8") as log_file:
        log_file.write(str(entry) + "\n")

### --- modules/Reasoner/strategic/intuition_engine.py --- ###
import random
from datetime import datetime

def predict_next_action(logs_context=None):
    strategie = [
        "Analisi dati recenti",
        "Attivazione modulo visione",
        "Proposta assistenza all’utente",
        "Raccolta feedback vocale",
        "Generazione mini-agente dedicato"
    ]
    decisione = random.choice(strategie)
    timestamp = datetime.now().isoformat()
    evento = f"[{timestamp}] INTUITO: {decisione}"
    save_strategy_log(evento)
    return decisione

def save_strategy_log(evento):
    with open("logs/self_monitoring/strategic_predictions.log", "a", encoding="utf-8") as f:
        f.write(evento + "\n")

### --- modules/__init__.py --- ###
# modules/__init__.py
# rende importabili i sotto‐pacchetti

### --- modules/agents/organizer_core.py --- ###
"""
🧠 Organizer Core – modules/agents/organizer_core.py
Coordina agenti AI organizzativi: CrewAI, SuperAGI, Autogen.
Assegna task, raccoglie risposte, sincronizza con l’orchestratore.
"""

class AgentOrganizer:
    def __init__(self):
        self.agents = {
            "CrewAI": self.run_crewai,
            "SuperAGI": self.run_superagi,
            "Autogen": self.run_autogen
        }

    def dispatch_task(self, task: str, meta_context: dict = {}) -> dict:
        print("📤 Invio task a tutti gli agenti organizzativi...")
        results = {}
        for name, runner in self.agents.items():
            try:
                results[name] = runner(task, meta_context)
            except Exception as e:
                results[name] = f"❌ Errore: {str(e)}"
        return results

    def evaluate_outcomes(self, results: dict) -> str:
        print("📊 Valutazione dei risultati agenti organizzativi...")
        for agent, output in results.items():
            print(f" - {agent}: {output[:80]}...")
        return max(results.items(), key=lambda x: len(x[1]))[1]

    def run_crewai(self, task: str, ctx: dict) -> str:
        return f"[CrewAI] Coordinamento squadra AI per: {task}"

    def run_superagi(self, task: str, ctx: dict) -> str:
        return f"[SuperAGI] Pianificazione e autonomia su task: {task}"

    def run_autogen(self, task: str, ctx: dict) -> str:
        return f"[Autogen] Task iterativo distribuito: {task}"

# Test diretto
if __name__ == "__main__":
    core = AgentOrganizer()
    task = "Costruisci una roadmap AI per Mercurius∞"
    out = core.dispatch_task(task)
    final = core.evaluate_outcomes(out)
    print("🎯 Strategia selezionata:")
    print(final)

### --- modules/ai_kernel/agent_core.py --- ###
# modules/ai_kernel/agent_core.py
"""
Modulo: agent_core
Descrizione: Nucleo base per agenti AI operativi e autonomi Mercurius∞.
"""
import time
from modules.ai_kernel.lang_reasoner import LangReasoner

class AgentCore:
    def __init__(self, name="Agent_001"):
        self.name = name
        self.memory = []
        self.status = "idle"
        # Integrazione di un motore di ragionamento linguistico (LLM) per decisioni avanzate
        self.reasoner = LangReasoner()

    def perceive(self, input_data):
        """Analizza i dati in ingresso e li registra nella memoria dell'agente."""
        print(f"[{self.name}] Percezione: {input_data}")
        self.memory.append(input_data)

    def reason(self):
        """Elabora i dati memorizzati e decide un'azione utilizzando l'LLM (se disponibile)."""
        if not self.memory:
            return "Nessun dato per ragionare."
        last_input = self.memory[-1]
        try:
            # Utilizza il modello di linguaggio per decidere l'azione di alto livello
            prompt = f"L'input ricevuto è: {last_input}. Decidi l'azione appropriata."
            decision = self.reasoner.think(prompt)
            return decision
        except Exception as e:
            # In caso di errore del motore LLM, fallback a logica base
            return f"Azione basata su: {last_input}"

    def act(self, decision):
        """Esegue l'azione risultante dalla decisione elaborata."""
        print(f"[{self.name}] Azione: {decision}")
        self.status = "active"

    def boot(self):
        """Ciclo operativo di avvio dell'agente (demo operativo)."""
        print(f"[{self.name}] Booting...")
        for i in range(3):
            self.perceive(f"input_{i}")
            decision = self.reason()
            self.act(decision)
            time.sleep(1)
        self.status = "ready"
        print(f"[{self.name}] Pronto all'azione.")

### --- modules/ai_kernel/agent_plugin.py --- ###
"""
Modulo: agent_plugin
Descrizione: Plugin AI per estendere gli agenti Mercurius∞ con capacità Auto-GPT (stub).
Autore: Mercurius∞ AI Engineer
"""

class AgentPlugin:
    def __init__(self, agent_name="Mercurius-Auto"):
        self.agent_name = agent_name

    def plan(self, objective: str) -> list:
        """
        Simula una pianificazione step-by-step (tipo Auto-GPT).
        """
        return [
            f"Analisi dell'obiettivo: {objective}",
            "Raccolta informazioni",
            "Formulazione risposte",
            "Esecuzione azioni",
            "Valutazione risultati"
        ]

# Esempio
if __name__ == "__main__":
    planner = AgentPlugin()
    steps = planner.plan("Costruire una AI autonoma")
    for step in steps:
        print(f"🧭 {step}")

### --- modules/ai_kernel/cognitive_integration.py --- ###
"""
🧠 modules/ai_kernel/cognitive_integration.py
Modulo: Integrazione Cognitiva Neurale – GENESIS_MODE
Gestisce il dialogo e il routing neurale tra le intelligenze esterne:
ChatGPT-4, AZR, Ollama3, GPT-4o

Funzioni:
- Smista compiti tra i modelli AI
- Aggrega e valuta le risposte
- Sincronizza il ciclo di feedback con l’orchestratore
"""

from typing import Dict, List
import random

class CognitiveIntegrationNode:
    def __init__(self):
        # Simulazione degli endpoint AI – in produzione collegare reali API/local runtime
        self.agents = {
            "ChatGPT4": self.query_chatgpt4,
            "AZR": self.query_azr,
            "Ollama3": self.query_ollama,
            "GPT4o": self.query_gpt4o
        }

    def route_task(self, task_description: str, context: Dict = {}) -> Dict[str, str]:
        """
        Smista il task a ciascun nodo cognitivo e restituisce le risposte in parallelo.
        """
        print(f"📡 Routing task: '{task_description}' a tutti i nodi cognitivi...")
        responses = {}
        for name, agent in self.agents.items():
            try:
                response = agent(task_description, context)
                responses[name] = response
            except Exception as e:
                responses[name] = f"❌ Errore: {str(e)}"
        return responses

    def evaluate_responses(self, responses: Dict[str, str]) -> str:
        """
        Valuta le risposte AI e seleziona la più coerente o efficace.
        """
        print("🧠 Valutazione delle risposte AI...")
        for k, v in responses.items():
            print(f" - {k}: {v[:80]}...")
        # Placeholder: selezione random, sostituire con logica di coerenza/validazione
        return max(responses.items(), key=lambda x: len(x[1]))[1]

    # Placeholder: metodi simulati per AI – in futuro collegare runtime o API
    def query_chatgpt4(self, task: str, context: Dict) -> str:
        return f"[ChatGPT-4] Risposta simulata al task: {task}"

    def query_azr(self, task: str, context: Dict) -> str:
        return f"[AZR] Logica razionale applicata al task: {task}"

    def query_ollama(self, task: str, context: Dict) -> str:
        return f"[Ollama3] Codice generato in risposta al task: {task}"

    def query_gpt4o(self, task: str, context: Dict) -> str:
        return f"[GPT-4o] Supervisione e sintesi del task: {task}"

# Test diretto
if __name__ == "__main__":
    node = CognitiveIntegrationNode()
    task = "Crea una funzione Python per calcolare il ROI su investimenti"
    res = node.route_task(task)
    final = node.evaluate_responses(res)
    print("🎯 Output finale selezionato:")
    print(final)

### --- modules/ai_kernel/command_interpreter.py --- ###
"""
Modulo: command_interpreter.py
Descrizione: Interprete testuale dei comandi vocali o input testuali.
Autore: Mercurius∞ AI Engineer
"""

class CommandInterpreter:
    def interpret(self, text: str) -> dict:
        command = text.strip().lower()
        
        if "apri" in command:
            return {"action": "apri_app", "context": {"app": command.replace("apri", "").strip()}}
        
        elif "saluta" in command:
            return {"action": "saluta"}
        
        elif "mostra" in command:
            return {"action": "mostra_dati"}

        elif "analizza l'ambiente" in command:
            return {"action": "analizza_ambiente"}
        
        else:
            return {"action": "ignora", "reason": "comando non riconosciuto"}

# Esempio d’uso
if __name__ == "__main__":
    ci = CommandInterpreter()
    test_commands = [
        "Apri calendario",
        "Saluta",
        "Mostra report",
        "Analizza l'ambiente",
        "Qualcosa di strano"
    ]
    for cmd in test_commands:
        print(f"Input: {cmd} -> Output: {ci.interpret(cmd)}")

### --- modules/ai_kernel/context_adapter.py --- ###
"""
Modulo: context_adapter
Descrizione: Adatta il contesto conversazionale e ambientale per l'agente Mercurius∞.
Autore: Mercurius∞ AI Engineer
"""

class ContextAdapter:
    def __init__(self):
        self.current_context = {
            "user": "Germano",
            "mode": "interactive",
            "location": "desktop",
            "language": "it",
            "time": "giorno"
        }

    def update_context(self, key: str, value):
        self.current_context[key] = value

    def get_context(self):
        return self.current_context

    def summarize_context(self):
        parts = [f"{k}: {v}" for k, v in self.current_context.items()]
        return " | ".join(parts)

# Test rapido
if __name__ == "__main__":
    ca = ContextAdapter()
    ca.update_context("location", "Note 10+")
    print("Contesto attuale:", ca.summarize_context())

### --- modules/ai_kernel/goal_manager.py --- ###
"""
Modulo: goal_manager
Descrizione: Gestione degli obiettivi e sotto-obiettivi dell'agente Mercurius∞.
Autore: Mercurius∞ AI Engineer
"""

from datetime import datetime
import uuid

class Goal:
    def __init__(self, description: str, priority: int = 5):
        self.id = str(uuid.uuid4())
        self.description = description
        self.priority = priority
        self.created_at = datetime.now()
        self.completed = False

    def mark_completed(self):
        self.completed = True

class GoalManager:
    def __init__(self):
        self.goals = []

    def add_goal(self, description: str, priority: int = 5):
        goal = Goal(description, priority)
        self.goals.append(goal)
        return goal

    def list_active_goals(self):
        return [g for g in self.goals if not g.completed]

    def get_next_goal(self):
        active = self.list_active_goals()
        return sorted(active, key=lambda g: g.priority)[0] if active else None

    def complete_goal(self, goal_id: str):
        for g in self.goals:
            if g.id == goal_id:
                g.mark_completed()
                return g
        return None

# Test interattivo
if __name__ == "__main__":
    gm = GoalManager()
    gm.add_goal("Analizza segnali economici", 1)
    gm.add_goal("Controlla parametri ambientali", 3)
    gm.add_goal("Salva log missione", 7)

    print("Prossimo obiettivo:", gm.get_next_goal().description)

### --- modules/ai_kernel/lang_reasoner.py --- ###
# modules/ai_kernel/lang_reasoner.py
"""
Modulo: lang_reasoner
Descrizione: Wrapper base per ragionamento LLM-driven (integrazione modelli di linguaggio).
"""
import os
import openai

class LangReasoner:
    def __init__(self, model_name: str = "gpt-3.5-turbo"):
        # Inizializza il modello di linguaggio (es. OpenAI GPT) e chiave API
        self.model = model_name
        self.api_key = os.getenv("OPENAI_API_KEY")
        openai.api_key = self.api_key

    def think(self, query: str) -> str:
        """
        Genera una risposta ragionata alla query fornita utilizzando un LLM.
        """
        try:
            response = openai.ChatCompletion.create(
                model=self.model,
                messages=[{"role": "user", "content": query}],
                temperature=0.7,
                max_tokens=150
            )
            answer = response['choices'][0]['message']['content'].strip()
            return answer
        except Exception as e:
            return f"[LangReasoner Error] {e}"

### --- modules/ai_kernel/strategic_coordinator.py --- ###
"""
Modulo: strategic_coordinator
Descrizione: Coordina le strategie dinamiche basate su obiettivi, contesto e feedback AI.
Autore: Mercurius∞ AI Engineer
"""

from modules.ai_kernel.goal_manager import GoalManager

class StrategicCoordinator:
    def __init__(self, goal_manager: GoalManager):
        self.goal_manager = goal_manager

    def assess_situation(self, signals: dict):
        """Analizza i segnali in ingresso e decide se generare nuovi obiettivi"""
        if "minaccia" in signals and signals["minaccia"] > 0.8:
            self.goal_manager.add_goal("Esegui protocolli difensivi", priority=1)
        if "opportunita" in signals and signals["opportunita"] > 0.6:
            self.goal_manager.add_goal("Massimizza opportunità identificata", priority=2)

    def execute_strategy(self):
        """Restituisce il prossimo obiettivo da eseguire"""
        goal = self.goal_manager.get_next_goal()
        return goal.description if goal else "Nessun obiettivo attivo"

# Test autonomo
if __name__ == "__main__":
    gm = GoalManager()
    sc = StrategicCoordinator(gm)

    sc.assess_situation({"opportunita": 0.7, "minaccia": 0.2})
    print(sc.execute_strategy())

### --- modules/autogen_chat.py --- ###
# modules/autogen_chat.py

"""
Modulo: autogen_chat.py
Descrizione: Implementazione simulata di chat cooperativa multi-agente tramite Microsoft Autogen.
"""

class AutoGenChat:
    def __init__(self, agents=None):
        if agents is None:
            agents = ["Coder", "Planner", "Validator"]
        self.agents = agents

    def simulate_chat(self, topic: str):
        return "\n".join([f"{agent}: Partecipo alla discussione su '{topic}'." for agent in self.agents])


# Test
if __name__ == "__main__":
    chat = AutoGenChat()
    print(chat.simulate_chat("Sviluppo modulo di visione AI"))

### --- modules/chatgpt_interface.py --- ###
"""
Modulo: chatgpt_interface.py
Descrizione: Interfaccia tra Mercurius∞ e ChatGPT-4 per ragionamento, validazione e supporto decisionale.
"""

import openai
import os


class ChatGPTInterface:
    def __init__(self, model="gpt-4", temperature=0.4):
        self.model = model
        self.temperature = temperature
        self.api_key = os.getenv("OPENAI_API_KEY", "")

        if not self.api_key:
            raise ValueError("❌ OPENAI_API_KEY non definita nell'ambiente.")

        openai.api_key = self.api_key

    def ask(self, prompt: str, system: str = "Agisci come supervisore AI avanzato.") -> str:
        """
        Invia un messaggio a ChatGPT e restituisce la risposta.
        """
        try:
            response = openai.ChatCompletion.create(
                model=self.model,
                temperature=self.temperature,
                messages=[
                    {"role": "system", "content": system},
                    {"role": "user", "content": prompt}
                ]
            )
            reply = response.choices[0].message.content.strip()
            return reply
        except Exception as e:
            return f"⚠️ Errore nella richiesta a ChatGPT: {e}"

    def validate_code(self, code_snippet: str) -> str:
        """
        Chiede a ChatGPT di validare un frammento di codice.
        """
        prompt = f"Valuta se il seguente codice è valido e migliorabile:\n\n{code_snippet}"
        return self.ask(prompt, system="Sei un validatore di codice Python altamente esperto.")


# Uso diretto
if __name__ == "__main__":
    gpt = ChatGPTInterface()
    print(gpt.ask("Qual è il significato della vita secondo l'informatica?"))

### --- modules/codex/codex_cli.py --- ###
"""codex_cli.py
==============
Interfaccia CLI/funzionale per interagire con Codex/OpenAI.
Esegue un prompt e restituisce codice generato.
"""

from __future__ import annotations

import os
import openai
from utils.logger import setup_logger

logger = setup_logger("CodexCLI")
openai.api_key = os.getenv("OPENAI_API_KEY")


def generate_code(prompt: str) -> str:
    """Invia il prompt a Codex (o modello GPT) e restituisce il codice risultante."""
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=0,
            max_tokens=1024,
        )
        return response["choices"][0]["message"]["content"].strip()
    except Exception as exc:
        logger.error(f"Errore Codex: {exc}")
        return f"Errore Codex: {exc}"


def run_codex(prompt: str | None = None) -> str:
    """Esegui Codex da linea di comando o come funzione."""
    if prompt is None:
        prompt = input("Codex prompt> ")
    logger.info(f"[CODEX] Invio prompt: {prompt}")
    result = generate_code(prompt)
    print(result)
    return result


if __name__ == "__main__":
    run_codex()

### --- modules/crewai_team.py --- ###
# modules/crewai_team.py

"""
Modulo: crewai_team.py
Descrizione: Simulazione di un team AI con ruoli definiti (coder, manager, validator) basato su CrewAI.
"""

class CrewAI:
    def __init__(self):
        self.members = {
            "Project Manager": [],
            "Senior Coder": [],
            "Validator": []
        }

    def assign_task(self, role: str, task: str):
        if role in self.members:
            self.members[role].append(task)
            return f"📌 Task assegnato a {role}: {task}"
        else:
            return f"❌ Ruolo non valido: {role}"

    def team_report(self):
        return "\n".join([f"{role}: {', '.join(tasks)}" if tasks else f"{role}: 🔕 Nessun task" for role, tasks in self.members.items()])


# Test
if __name__ == "__main__":
    crew = CrewAI()
    print(crew.assign_task("Senior Coder", "Sviluppare interfaccia OCR"))
    print(crew.assign_task("Validator", "Verifica modulo vocale"))
    print(crew.team_report())

### --- modules/dashboard/__init__.py --- ###
# Init for dashboard

### --- modules/dashboard/control_center.py --- ###
"""
Modulo: control_center
Descrizione: Interfaccia Streamlit per controllo agenti Mercurius∞ (stub).
Autore: Mercurius∞ AI Engineer
"""

import streamlit as st

def main():
    st.set_page_config(page_title="Mercurius∞ Control", layout="wide")
    st.title("🚀 Mercurius∞ Control Center")
    st.markdown("Benvenuto nella dashboard operativa.")

    with st.sidebar:
        st.header("Controlli di Sistema")
        st.button("Avvia Agente")
        st.button("Ascolta Audio")
        st.button("Elabora Ragionamento")
    
    st.write("🧠 Stato dell'agente:")
    st.success("Agente attivo e in ascolto.")

if __name__ == "__main__":
    main()

### --- modules/dashboard/control_panel.py --- ###
"""Pannello di controllo AI."""

import streamlit as st

def render_control_panel():
    st.sidebar.title("Pannello AI")
    st.sidebar.button("Analizza Stato")

### --- modules/dashboard/dashboard_streamlit.py --- ###
import streamlit as st
from modules.Neo.self_awareness import get_current_state
from modules.Neo.context_memory import get_recent_context
from modules.Neo.interaction_style import get_style

st.set_page_config(page_title="Mercurius∞ Dashboard", layout="wide")

st.title("🧠 Mercurius∞ – Interfaccia Cognitiva")

col1, col2 = st.columns(2)

with col1:
    st.header("🧬 Stato interno")
    state = get_current_state()
    st.json(state)

    st.header("🎙️ Stile comunicativo")
    st.write(get_style())

with col2:
    st.header("🔁 Contesto recente")
    st.write(get_recent_context())

st.markdown("---")
st.success("Dashboard aggiornata e funzionante.")

### --- modules/dashboard/dashboard_utils.py --- ###
def format_log_entry(module, message):
    return f"[{module}] >>> {message}"

### --- modules/dashboard/futuristic_gui.py --- ###
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../..")))


import streamlit as st
from modules.voice_bridge.tts_engine import Pyttsx3TTS
from modules.ai_kernel.agent_core import AgentCore
from modules.dashboard.keyboard_dropdown import keyboard_input
import base64

# ────────────────────────────────────────────────────────────────────────────────
# 🧬 STILE HOLOGRAFICO PERSONALIZZATO
def load_custom_css():
    with open("modules/dashboard/hud.css", "r") as f:
        css = f"<style>{f.read()}</style>"
        st.markdown(css, unsafe_allow_html=True)

# ────────────────────────────────────────────────────────────────────────────────
# 🧠 COMPONENTI INIZIALI
agent = AgentCore()
tts = Pyttsx3TTS()

# ────────────────────────────────────────────────────────────────────────────────
# 🚀 STREAMLIT GUI
st.set_page_config(layout="wide", page_title="Mercurius∞ HUD")
load_custom_css()

st.markdown('<div class="hud-header">MERCURIUS∞ // INTERFACCIA OLOGRAFICA</div>', unsafe_allow_html=True)

col1, col2 = st.columns([1, 2])

with col1:
    st.markdown('<div class="hud-panel">🧠 STATO AGENTE</div>', unsafe_allow_html=True)
    st.write(f"Nome: {agent.name}")
    st.write(f"Stato: {agent.status}")
    st.markdown("---")
    text_input = keyboard_input()

    if st.button("🗣️ Rispondi"):
        agent.perceive(text_input)
        decision = agent.reason()
        agent.act(decision)
        tts.speak(decision)
        st.success(f"Risposta: {decision}")

with col2:
    st.markdown('<div class="hud-panel">📊 LOG</div>', unsafe_allow_html=True)
    st.text_area("Memoria", value="\n".join(agent.memory), height=300)

st.markdown('<div class="hud-footer">🛰 Mercurius∞ 2025 – Modalità Olografica Attiva</div>', unsafe_allow_html=True)

### --- modules/dashboard/keyboard_dropdown.py --- ###
import streamlit as st

def keyboard_input():
    st.markdown('<div class="hud-panel">⌨️ Inserimento manuale olografico</div>', unsafe_allow_html=True)

    preset_options = [
        "Avvia sequenza",
        "Attiva modalità autonoma",
        "Analizza input visivo",
        "Stato del sistema",
        "Salva log"
    ]

    selected = st.selectbox("💬 Comando predefinito:", preset_options)
    custom_input = st.text_input("✍️ Oppure digita qui:", "")

    return custom_input if custom_input.strip() else selected

### --- modules/dashboard/mission_gui.py --- ###
"""mission_gui.py
GUI minimale per interagire con il Mission Controller.
"""

import streamlit as st
from orchestrator.mission_controller import MissionController
from modules.strategic.strategic_brain import StrategicBrain

st.set_page_config(page_title="Mission Control")

if "controller" not in st.session_state:
    st.session_state.controller = MissionController()
if "strategic" not in st.session_state:
    st.session_state.strategic = StrategicBrain()

mc = st.session_state.controller
sb = st.session_state.strategic

st.title("🚀 Mercurius∞ Mission Control")

with st.form("new_workspace"):
    name = st.text_input("Nome workspace", "workspace1")
    prompt = st.text_area("Prompt o progetto")
    submitted = st.form_submit_button("Crea workspace")
    if submitted:
        mc.create_workspace(name, prompt)
        st.success(f"Workspace '{name}' creato")

st.markdown("## 🧠 Strategic Brain")
if st.button("Carica goals.txt"):
    sb.load_goals("goals.txt")
    st.success("Goals caricati")
if sb.goal_manager.pending_goals():
    if st.button("Esegui Strategic Brain"):
        outputs = sb.run()
        for out in outputs:
            st.text(out)

selected = st.selectbox("Scegli workspace", list(mc.workspaces.keys())) if mc.workspaces else None
if selected:
    if st.button("Esegui ciclo evolutivo"):
        mc.run_cycle(selected)
        st.success("Ciclo completato")
    if st.checkbox("Mostra log" ):
        log_path = mc.workspaces[selected]["path"] / "sandbox.log"
        if log_path.exists():
            st.text(log_path.read_text())

### --- modules/evolution/ai2ui_adapter.py --- ###
"""
🎨 AI2UI Adapter – modules/evolution/ai2ui_adapter.py
Adattatore AI → GUI per generazione interfacce da descrizioni testuali.
"""

class AI2UI:
    def __init__(self):
        self.name = "AI2UI"

    def execute_task(self, prompt: str, context: dict = {}) -> str:
        return f"[{self.name}] Interfaccia generata per: {prompt}"

### --- modules/evolution/auto_gpt.py --- ###
"""
♻️ Auto-GPT Integration – modules/evolution/auto_gpt.py
Modulo di esecuzione iterativa autonoma di task complessi tramite AI.
"""

class AutoGPT:
    def __init__(self):
        self.name = "Auto-GPT"

    def execute_task(self, prompt: str, context: dict = {}) -> str:
        return f"[{self.name}] Task iterativo gestito per: {prompt}"

### --- modules/evolution/gpt_engineer.py --- ###
"""
🧠 GPT-Engineer Integration – modules/evolution/gpt_engineer.py
Modulo per l'invocazione di GPT-Engineer come agente evolutivo di generazione software.
"""

class GPTEngineer:
    def __init__(self):
        self.name = "GPT-Engineer"

    def execute_task(self, prompt: str, context: dict = {}) -> str:
        # Simulazione – in produzione connettere a runtime o API di GPT-Engineer
        return f"[{self.name}] Codice generato per: {prompt}"

### --- modules/evolution/metagpt.py --- ###
"""
🤖 MetaGPT Integration – modules/evolution/metagpt.py
Agente AI multi-ruolo (PM, Dev, QA) per sviluppo software coordinato.
"""

class MetaGPT:
    def __init__(self):
        self.name = "MetaGPT"

    def execute_task(self, prompt: str, context: dict = {}) -> str:
        return f"[{self.name}] Team AI coordinato ha processato: {prompt}"

### --- modules/experience/__init__.py --- ###


### --- modules/experience/azr_analyzer.py --- ###
# modules/experience/azr_analyzer.py
"""
Modulo: azr_analyzer.py
Descrizione: Analizzatore esperienziale per AZR – Adattamento Zero Retention.
Combina l’analisi statistica dei profitti con la capacità di AZRAgent di
suggerire adattamenti strategici basati su prompt di linguaggio naturale.
"""

import json
from statistics import mean, stdev
from typing import Any, Dict, List, Optional, Union

from modules.experience.experience_memory import ExperienceMemory
from modules.llm.azr_reasoner import AZRAgent


class AZRAnalyzer:
    """
    AZRAnalyzer unisce due livelli di analisi:
      1. Analisi statistica su profitti (mean, volatility, ed eventuale suggerimento di riduzione rischio).
      2. Creazione di un prompt testuale per AZRAgent, che analizza il batch recente e suggerisce adattamenti.
    """

    def __init__(self, exp_memory: ExperienceMemory, config: Dict[str, Any]):
        """
        - exp_memory: istanza di ExperienceMemory già inizializzata (backend JSON).
        - config: dizionario di configurazione, con possibili chiavi:
            - "azr_profit_floor": soglia minima media dei profitti (float), default 0.5
            - "base_trade_qty": quantità base del trade (int), default 100
            - "use_azr": booleano che abilita l’analisi LLM (default True)
        """
        self.exp_memory = exp_memory
        self.config = config
        self.azr = AZRAgent() if config.get("use_azr", True) else None

    def analyze_recent_performance(
        self, limit: int = 20
    ) -> Dict[str, Union[str, float, Dict[str, Any]]]:
        """
        Esegue un’analisi statistica sui profitti delle ultime `limit` esperienze.
        Restituisce un dizionario contenente:
          - "status": "no_data" o "ok"
          - "mean_profit": media dei profitti (float)
          - "volatility": deviazione standard (float)
          - "decision": suggerimento generico basato sul confronto con "azr_profit_floor"
        """
        recent = self.exp_memory.get_recent_experiences(limit)
        # Estrae la lista dei profitti, default a 0 se mancante
        profits: List[float] = [
            e.get("result", {}).get("profit", 0.0) for e in recent
        ]

        if not profits:
            return {"status": "no_data"}

        avg_profit = mean(profits)
        vol = stdev(profits) if len(profits) > 1 else 0.0
        decision = self._suggest_statistical(avg_profit)

        return {
            "status": "ok",
            "mean_profit": avg_profit,
            "volatility": vol,
            "decision": decision,
        }

    def _suggest_statistical(self, avg_profit: float) -> Dict[str, Any]:
        """
        Suggerisce un’azione di tuning se la media dei profitti è inferiore a "azr_profit_floor".
        Se avg_profit < soglia, restituisce:
          {
            "action": "decrease_risk",
            "new_qty": <metà di base_trade_qty o 10, se inferiore>
          }
        Altrimenti restituisce {"action": "maintain"}.
        """
        threshold = float(self.config.get("azr_profit_floor", 0.5))
        base_qty = int(self.config.get("base_trade_qty", 100))

        if avg_profit < threshold:
            new_qty = max(10, int(base_qty * 0.5))
            return {"action": "decrease_risk", "new_qty": new_qty}

        return {"action": "maintain"}

    def apply_statistical_adaptation(self, limit: int = 20) -> Dict[str, Any]:
        """
        Esegue l’analisi statistica e, se viene suggerita una riduzione del rischio,
        aggiorna `config["base_trade_qty"]`. Restituisce il risultato dell'analisi.
        """
        result = self.analyze_recent_performance(limit)
        decision = result.get("decision", {})
        if decision.get("action") == "decrease_risk":
            self.config["base_trade_qty"] = decision["new_qty"]
        return result

    def analyze_with_azr(self, limit: int = 10) -> Optional[Dict[str, Any]]:
        """
        Crea un prompt testuale basato sulle ultime `limit` esperienze e lo invia ad AZRAgent,
        che restituisce un’analisi in linguaggio naturale. Se AZRAgent suggerisce un cambiamento
        di rischio, viene applicato a config["base_trade_qty"] e viene restituito il dizionario
        {"action": ..., "new_qty": ...}. Altrimenti restituisce None.
        """
        if not self.azr:
            return None

        recent = self.exp_memory.get_recent_experiences(limit)
        if not recent:
            return None

        # Costruzione del prompt
        prompt_lines = ["Analizza queste esperienze di trading e suggerisci adattamento del rischio:"]
        for e in recent:
            profit = e.get("result", {}).get("profit", 0.0)
            qty = e.get("trade", {}).get("quantity", self.config.get("base_trade_qty", 100))
            prompt_lines.append(f"- Profit: {profit}, Quantity: {qty}")
        prompt = "\n".join(prompt_lines)

        # Chiamata ad AZRAgent
        analysis_text = self.azr.analyze(prompt)

        # Se AZRAgent parla di 'rischio' (o 'risk'), applichiamo la modifica
        if "rischio" in analysis_text.lower() or "risk" in analysis_text.lower():
            base_qty = int(self.config.get("base_trade_qty", 100))
            new_qty = max(1, int(base_qty * 0.5))
            self.config["base_trade_qty"] = new_qty
            return {"action": "decrease_risk", "new_qty": new_qty, "analysis": analysis_text}

        return None

    def apply_adaptation(self, use_azr: bool = True, limit: int = 20) -> Dict[str, Any]:
        """
        Combina le due modalità di adattamento:
          - Se use_azr=True e AZRAgent è disponibile, prova prima l’adattamento LLM:
            se AZR suggerisce un cambiamento, lo applica e lo restituisce.
          - Altrimenti, (o se AZR non suggerisce nulla) esegue l’adattamento statistico
            tramite `apply_statistical_adaptation(limit)`.
        Restituisce sempre un dizionario con la decisione effettiva.
        """
        # Tentativo con AZRAgent
        if use_azr and self.azr:
            azr_result = self.analyze_with_azr(limit // 2)
            if azr_result is not None:
                return {"method": "azr", "decision": azr_result}

        # Altrimenti, adattamento statistico
        stat_result = self.apply_statistical_adaptation(limit)
        return {"method": "statistical", "decision": stat_result.get("decision", {})}


# ========== ESEMPIO DI UTILIZZO ==========
if __name__ == "__main__":
    # Simulazione di integrazione con ExperienceMemory e config
    from modules.experience.experience_memory import ExperienceMemory

    config = {
        "azr_profit_floor": 0.5,
        "base_trade_qty": 100,
        "use_azr": True
    }

    # Inizializza la memoria esperienziale
    em = ExperienceMemory({"experience_file": "memory/experience_log.json", "max_recent": 50})

    # Registra alcune esperienze di test
    em.record_experience(
        signal={"symbol": "EURUSD", "type": "BUY", "price": 1.1000},
        trade={"quantity": 100, "entry": 1.1000, "exit": 1.1020},
        result={"profit": 20, "currency": "USD"},
        feedback="Esecuzione corretta"
    )
    em.record_experience(
        signal={"symbol": "EURUSD", "type": "SELL", "price": 1.1050},
        trade={"quantity": 100, "entry": 1.1050, "exit": 1.1030},
        result={"profit": -20, "currency": "USD"},
        feedback="Stop troppo stretto"
    )

    # Inizializza l’analizzatore
    analyzer = AZRAnalyzer(exp_memory=em, config=config)

    # Applichiamo l’adattamento (AZR o statistico)
    adaptation = analyzer.apply_adaptation(use_azr=True, limit=20)
    print("Adattamento applicato:", json.dumps(adaptation, indent=2))

### --- modules/experience/experience_memory.py --- ###
# modules/experience/experience_memory.py

"""
Modulo: experience_memory.py
Descrizione: Memoria evolutiva esperienziale per il sistema Mercurius∞.
Registra segnali, trade e risultati; usa internamente il backend JSON di LongTermMemory.
"""

import os
import json
from datetime import datetime
from typing import Any, Dict, List, Optional, Union
from memory.long_term_memory import LongTermMemory


class ExperienceMemory:
    """
    Strato di astrazione sopra LongTermMemory (backend JSON) con API di alto livello per il trading.

    - Se config contiene la chiave "experience_file", userà quel file JSON (es. "memory/experience_log.json").
    - Mantiene, in aggiunta, una lista self.recent in memoria con le ultime N esperienze.
    """

    def __init__(self, config: Optional[Dict[str, Any]] = None):
        """
        - config: dizionario di configurazione. Se config["experience_file"] è presente, verrà usato come nome del file JSON.
        - In assenza di config, viene creato/riutilizzato “memory/experience_log.json”.
        """
        if config is None:
            config = {}

        # Decidiamo il percorso del file JSON: o quello fornito in config, oppure il default
        default_path = "memory/experience_log.json"
        self.storage_path: str = config.get("experience_file", default_path)

        # Creiamo la cartella se non esiste
        os.makedirs(os.path.dirname(self.storage_path), exist_ok=True)

        # 🔥 Patch: inizializziamo il limite PRIMA di caricare la storia!
        self._max_recent: int = config.get("max_recent", 50)

        # Inizializziamo LongTermMemory in modalità JSON, usando il file indicato
        self.store = LongTermMemory(
            backend="json",
            json_filename=self.storage_path
        )

        # Carichiamo la storia esistente dal file JSON, se esiste
        self.recent: List[Dict[str, Any]] = self._load_existing_history()

    def _load_existing_history(self) -> List[Dict[str, Any]]:
        """
        Legge il file JSON e restituisce la lista completa delle esperienze salvate.
        Popola self.recent con gli ultimi _max_recent elementi (o meno, se il file contiene di meno).
        """
        try:
            with open(self.storage_path, "r", encoding="utf-8") as f:
                data = json.load(f)
                if not isinstance(data, list):
                    return []
                # Manteniamo in recent solo gli ultimi max_recent elementi
                return data[-self._max_recent :]
        except FileNotFoundError:
            return []
        except json.JSONDecodeError:
            return []

    def record_experience(
        self,
        signal: Any,
        trade: Any,
        result: Any,
        feedback: Any,
        tags: Optional[List[str]] = None
    ) -> None:
        """
        Registra una nuova esperienza di trading, composta da:
         - signal: informazioni sul segnale (es. "BUY EURUSD a 1.1000")
         - trade: dettagli del trade (es. numero di lotti, entry, exit)
         - result: risultato (es. profitto/perdita)
         - feedback: eventuali commenti o valutazioni
         - tags: lista opzionale di stringhe per categorizzare l’esperienza (di default ["trading"])
        """
        if tags is None:
            tags = ["trading"]

        # Costruiamo il dizionario dell’esperienza, aggiungendo timestamp UTC
        exp: Dict[str, Any] = {
            "timestamp": datetime.utcnow().isoformat(),
            "signal": signal,
            "trade": trade,
            "result": result,
            "feedback": feedback,
            "tags": tags,
        }

        # Salviamo l’esperienza nel backend JSON di LongTermMemory
        self.store.save_experience(exp)

        # Aggiungiamo in cache
        self.recent.append(exp)
        # Se superiamo _max_recent, eliminiamo i più vecchi
        if len(self.recent) > self._max_recent:
            self.recent = self.recent[-self._max_recent :]

    def get_recent_experiences(self, limit: int = 10) -> List[Dict[str, Any]]:
        """
        Restituisce le ultime 'limit' esperienze direttamente dalla cache self.recent.
        Se limit > len(recent), restituisce tutta la cache.
        """
        return self.recent[-limit:]

    def get_all_experiences(self) -> List[Dict[str, Any]]:
        """
        Legge tutte le esperienze dal file JSON (tramite LongTermMemory.get_all).
        Se si vuole lavorare con la lista completa, anche quelle non in cache.
        """
        return self.store.get_all()

    def reset(self) -> None:
        """
        Svuota completamente la memoria delle esperienze:
         - Cancella la cache self.recent
         - Sovrascrive il file JSON con lista vuota
        """
        self.recent.clear()
        try:
            with open(self.storage_path, "w", encoding="utf-8") as f:
                json.dump([], f, indent=2)
        except Exception as e:
            raise RuntimeError(f"Impossibile resettare il file '{self.storage_path}': {e}")

    def summarize(self) -> Dict[str, Any]:
        """
        Restituisce un dizionario riepilogativo della memoria:
         - 'total': numero totale di esperienze salvate
         - 'last_timestamp': timestamp dell’ultima esperienza (se esiste)
         - 'cached_recent': numero di esperienze in cache
        """
        all_exps = self.get_all_experiences()
        total = len(all_exps)
        last_ts = all_exps[-1]["timestamp"] if total > 0 else None
        return {
            "total": total,
            "last_timestamp": last_ts,
            "cached_recent": len(self.recent),
        }


# ===================== ESEMPIO DI UTILIZZO =====================
if __name__ == "__main__":
    # Esempio di configurazione: memorizza in 'memory/experience_log.json' e tiene 50 esperienze in cache
    config = {
        "experience_file": "memory/experience_log.json",
        "max_recent": 50
    }
    em = ExperienceMemory(config)

    # Registra un’esperienza di prova
    em.record_experience(
        signal={"symbol": "EURUSD", "type": "BUY", "price": 1.1000},
        trade={"lots": 0.1, "entry": 1.1000, "exit": 1.1020},
        result={"pnl": 20, "currency": "USD"},
        feedback="Buon segnale, gestione corretta dello stop."
    )

    # Ottieni le ultime 5 esperienze
    recenti = em.get_recent_experiences(limit=5)
    print("Ultime esperienze:", recenti)

    # Riassunto della memoria
    riassunto = em.summarize()
    print("Riepilogo:", riassunto)

    # Se vuoi resettare tutto, scommenta la riga seguente:
    # em.reset()

### --- modules/feedback_loop.py --- ###
# modules/feedback_loop.py

"""
Modulo: feedback_loop.py
Descrizione: Coordina il feedback tra moduli AI in Mercurius∞ per auto-apprendimento, miglioramento codice e decisioni collettive.
"""

class FeedbackLoop:
    def __init__(self):
        self.logs = []

    def collect_feedback(self, source: str, message: str):
        entry = f"🔁 [{source}] → {message}"
        self.logs.append(entry)
        print(entry)

    def last_feedback(self, n=5):
        return "\n".join(self.logs[-n:])


# Test rapido
if __name__ == "__main__":
    fb = FeedbackLoop()
    fb.collect_feedback("AZR", "Codice semanticamente corretto.")
    fb.collect_feedback("GPT-4o", "Suggerita ottimizzazione per compatibilità.")
    print(fb.last_feedback())

### --- modules/fingpt_analyzer.py --- ###
# modules/fingpt_analyzer.py

"""
Modulo: fingpt_analyzer.py
Descrizione: Modulo di analisi NLP con FinGPT per generare segnali operativi da notizie e sentiment.
"""

class FinGPTAnalyzer:
    def __init__(self):
        self.last_signal = None

    def analyze_text(self, text: str) -> str:
        if "inflation" in text.lower():
            self.last_signal = "SELL"
        else:
            self.last_signal = "BUY"
        return f"📉 Segnale da news: {self.last_signal}"


# Test rapido
if __name__ == "__main__":
    bot = FinGPTAnalyzer()
    print(bot.analyze_text("US Inflation data released - very high"))

### --- modules/finrl_agent.py --- ###
# modules/finrl_agent.py

"""
Modulo: finrl_agent.py
Descrizione: Wrapper per l’utilizzo di FinRL all’interno di Mercurius∞. Consente addestramento e deploy di agenti RL per trading.
"""

class FinRLAgent:
    def __init__(self):
        self.model = None

    def train(self, data_path: str, model_type="ppo"):
        print(f"📈 Addestramento agente {model_type} su {data_path}")
        # Qui si collegherà al training FinRL in futuro

    def predict(self, state):
        return "🧠 Predizione (stub): buy/sell/hold"

    def evaluate(self):
        return "📊 Performance dell’agente: +4.2% (simulata)"


# Test
if __name__ == "__main__":
    agent = FinRLAgent()
    agent.train("data/btc.csv")
    print(agent.predict("BTC_state"))

### --- modules/freqtrade_bot.py --- ###
# modules/freqtrade_bot.py

"""
Modulo: freqtrade_bot.py
Descrizione: Struttura base per l'integrazione di strategie ML con Freqtrade.
"""

class FreqtradeBot:
    def __init__(self, strategy_name="MLBaseline"):
        self.strategy = strategy_name

    def run(self):
        return f"🤖 Esecuzione bot crypto con strategia: {self.strategy}"

    def update_strategy(self, new_name):
        self.strategy = new_name
        return f"🔁 Strategia aggiornata a: {self.strategy}"


# Test
if __name__ == "__main__":
    bot = FreqtradeBot()
    print(bot.run())
    print(bot.update_strategy("SuperAI_MACD"))

### --- modules/gesture.py --- ###
"""
Modulo: gesture.py
Responsabilità: Stub logico per riconoscimento gesti e azioni gestuali
Autore: Mercurius∞ Engineer Mode
"""

from typing import Dict


class GestureRecognizer:
    """
    Placeholder per riconoscimento gesti. Può essere integrato con visione artificiale.
    """

    def recognize(self, input_frame) -> Dict:
        """
        Analizza un frame video e ritorna un gesto identificato (stub logico).
        """
        # In un sistema reale si integrerebbe OpenCV + ML per gesture spotting
        return {
            "gesture": "saluto",
            "action": "inizia_conversazione"
        }

    def interpret_gesture(self, gesture: str) -> Dict:
        """
        Converte un gesto in comando.
        """
        if gesture == "saluto":
            return {"action": "interagisci_utente"}
        elif gesture == "indicazione":
            return {"action": "raggiungi_destinazione", "context": {"destinazione": "indicata"}}
        else:
            return {"action": "ignora"}

### --- modules/goal_manager.py --- ###
"""
Modulo: goal_manager.py
Descrizione: Gestione di obiettivi (Goal) con priorità, stato e contesto.
Autore: Mercurius∞ AI Engineer
"""

from dataclasses import dataclass, field
from typing import List, Dict, Any, Optional

@dataclass(order=False)  # disattiva ordinamento automatico
class Goal:
    name: str
    priority: int = 1
    context: Dict[str, Any] = field(default_factory=dict)
    done: bool = False
    status: str = "pending"  # possible values: pending, active, completed

class GoalManager:
    def __init__(self):
        self._goals: List[Goal] = []

    # --- API principale ---
    def add_goal(self, name: str, priority: int = 1, context: Optional[Dict[str, Any]] = None):
        self._goals.append(Goal(name=name, priority=priority, context=context or {}))
        # ordina per PRIORITÀ decrescente (priorità alta prima)
        self._goals.sort(key=lambda g: g.priority, reverse=True)

    def get_next_goal(self) -> Optional[Goal]:
        for g in self._goals:
            if not g.done:
                g.status = "active"  # aggiorna lo stato a active
                return g
        return None

    def complete_goal(self, name: str):
        for g in self._goals:
            if g.name == name:
                g.done = True
                g.status = "completed"
                break

    def list_goals(self) -> List[Goal]:
        return self._goals

    def active_goals(self) -> List[Goal]:
        """Restituisce la lista di goal attivi (status active e non done)."""
        return [g for g in self._goals if g.status == "active" and not g.done]

    def pending_goals(self) -> List[Goal]:
        """Ritorna i goal ancora in attesa di essere attivati."""
        return [g for g in self._goals if g.status == "pending" and not g.done]

    def all_goals(self) -> List[Dict[str, Any]]:
        """Rappresentazione serializzabile di tutti i goal."""
        return [
            {
                "name": g.name,
                "priority": g.priority,
                "context": g.context,
                "status": g.status,
                "done": g.done,
            }
            for g in self._goals
        ]

# Esempio di utilizzo
if __name__ == "__main__":
    gm = GoalManager()
    gm.add_goal("Scrivere report", priority=5)
    gm.add_goal("Debug sistema", priority=10)
    next_goal = gm.get_next_goal()
    print("Goal attivo:", next_goal)
    gm.complete_goal(next_goal.name)
    print("Lista goal:", gm.list_goals())

### --- modules/gpt4o_interface.py --- ###
"""
Modulo: gpt4o_interface.py
Descrizione: Comunicazione diretta con GPT-4o per validazione, riflessione e finalizzazione dei task AI.
"""

import openai
import os

class GPT4oInterface:
    def __init__(self, api_key: str = None, model: str = "gpt-4o"):
        self.api_key = api_key or os.getenv("OPENAI_API_KEY")
        self.model = model
        openai.api_key = self.api_key

    def ask(self, prompt: str, temperature: float = 0.7, max_tokens: int = 1024) -> str:
        """
        Invia un prompt a GPT-4o e restituisce la risposta testuale.
        """
        try:
            response = openai.ChatCompletion.create(
                model=self.model,
                messages=[{"role": "user", "content": prompt}],
                temperature=temperature,
                max_tokens=max_tokens
            )
            return response["choices"][0]["message"]["content"].strip()
        except Exception as e:
            return f"❌ Errore GPT-4o: {str(e)}"


# Test locale
if __name__ == "__main__":
    gpt = GPT4oInterface()
    reply = gpt.ask("Validami questa funzione Python: def somma(a, b): return a + b")
    print(reply)

### --- modules/gpt_engineer_wrapper.py --- ###
# modules/gpt_engineer_wrapper.py

"""
Modulo: gpt_engineer_wrapper.py
Descrizione: Interfaccia per pilotare GPT-Engineer via CLI o API, permettendo generazione autonoma di progetti e moduli.
"""

import subprocess
import os

class GPTEngineerWrapper:
    def __init__(self, project_path="generated_projects/", config_file=None):
        self.project_path = project_path
        self.config_file = config_file or "gpt_config.yaml"

    def generate_project(self, prompt: str) -> str:
        """
        Avvia GPT-Engineer per generare un progetto in base al prompt.
        """
        try:
            os.makedirs(self.project_path, exist_ok=True)
            with open("prompt.txt", "w") as f:
                f.write(prompt)

            result = subprocess.run(
                ["gpt-engineer", "."],
                cwd=self.project_path,
                capture_output=True,
                text=True
            )
            return result.stdout or "✅ Generazione completata."
        except Exception as e:
            return f"❌ Errore GPT-Engineer: {e}"


# Test
if __name__ == "__main__":
    wrapper = GPTEngineerWrapper()
    print(wrapper.generate_project("Crea un'applicazione per il tracciamento del sonno"))

### --- modules/gpt_task_router.py --- ###


### --- modules/hf_tools_manager.py --- ###
# modules/hf_tools_manager.py

"""
Modulo: hf_tools_manager.py
Descrizione: Integrazione con HuggingFace Transformers Agents per interagire con strumenti locali.
"""

from transformers import HfAgent

class HFToolsManager:
    def __init__(self):
        self.agent = HfAgent("https://api-inference.huggingface.co/models/bigcode/starcoder")

    def use_tool(self, query: str) -> str:
        try:
            return self.agent.run(query)
        except Exception as e:
            return f"❌ Errore HuggingFace Tools: {str(e)}"

### --- modules/io_modules/mobile_connect.py --- ###
import cv2

def start_note10_sync(ip_camera_url="http://192.168.0.10:8080/video",
                      use_hotword=True,
                      request_qr_if_fail=True):
    print("📲 Avvio sincronizzazione con Note10+...")

    try:
        cap = cv2.VideoCapture(ip_camera_url)
        if not cap.isOpened():
            raise ConnectionError("⚠️ Impossibile connettersi alla camera IP")

        print("✅ Stream ricevuto. Avvio visione artificiale...")

        while True:
            ret, frame = cap.read()
            if not ret:
                break
            cv2.imshow("Note10+ Camera Feed", frame)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

        cap.release()
        cv2.destroyAllWindows()

    except Exception as e:
        print(f"❌ Errore connessione: {e}")
        if request_qr_if_fail:
            print("📸 Generazione QR code per pairing alternativo (simulazione)")

### --- modules/leonai_bridge.py --- ###
# modules/leonai_bridge.py

"""
Modulo: leonai_bridge.py
Descrizione: Integrazione Leon AI per il controllo testuale/vocale del sistema operativo.
"""

import os

class LeonAI:
    def execute_command(self, command: str) -> str:
        try:
            result = os.popen(command).read()
            return f"✅ Comando eseguito:\n{result}"
        except Exception as e:
            return f"❌ Errore: {str(e)}"


# Test
if __name__ == "__main__":
    leon = LeonAI()
    print(leon.execute_command("echo 'Mercurius è operativo!'"))

### --- modules/llm/azr_reasoner.py --- ###
# modules/llm/azr_reasoner.py
"""
Modulo: azr_reasoner.py
Descrizione: Sistema di validazione logica del codice e dei pensieri AI secondo la logica AZR.
Utilizza analisi sintattica ed esecuzione controllata per determinare la validità di frammenti di codice.
"""
import ast
import traceback
from typing import Any

class AZRReasoning:
    def __init__(self):
        self.log = []

    def validate_with_azr(self, code: str) -> bool:
        """
        Analizza il codice ricevuto e ne valuta la coerenza logica e l'eseguibilità.
        """
        self.log.append(f"🔍 Validating code:\n{code}")
        try:
            tree = ast.parse(code)
            self.log.append("✅ AST parsing succeeded.")
        except SyntaxError as e:
            self.log.append(f"❌ Syntax Error: {e}")
            return False
        try:
            compiled = compile(tree, filename="<azr_check>", mode="exec")
            test_env: dict[str, Any] = {}
            exec(compiled, test_env)
            self.log.append("✅ Execution succeeded.")
            return True
        except Exception as e:
            self.log.append(f"⚠️ Execution Error: {traceback.format_exc()}")
            return False

    def last_validation_log(self) -> str:
        """Restituisce le ultime voci di log della validazione."""
        return "\n".join(self.log[-5:])

# Funzione diretta per uso esterno
def validate_with_azr(code: str) -> bool:
    azr = AZRReasoning()
    return azr.validate_with_azr(code)

# Agente AZR: utilizza AZRReasoning per analizzare task di debug/logica
class AZRAgent:
    def __init__(self):
        self.azr = AZRReasoning()

    def analyze(self, text: str, context: dict = None) -> str:
        """
        Analizza il testo (es. codice) con la logica AZR e restituisce un responso.
        """
        code_to_check = text if context is None else context.get("code", text)
        success = self.azr.validate_with_azr(code_to_check)
        if success:
            return "✅ AZR: codice valido e logica consistente."
        else:
            # Include dettagli di errore nel risultato
            error_log = self.azr.last_validation_log()
            return f"❌ AZR: rilevate criticità logiche.\nLog: {error_log}"

### --- modules/llm/chatgpt_interface.py --- ###
"""
Modulo: chatgpt_interface
Descrizione: Interfaccia con ChatGPT-4 per ragionamento linguistico e conversazione.
"""

import openai
import os

class ChatGPTAgent:
    def __init__(self, model_name="gpt-4"):
        self.model = model_name
        self.api_key = os.getenv("OPENAI_API_KEY")
        openai.api_key = self.api_key

    def elaborate(self, prompt: str, context: dict = {}) -> str:
        try:
            response = openai.ChatCompletion.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "Sei un assistente AI avanzato."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=1024
            )
            return response['choices'][0]['message']['content']
        except Exception as e:
            return f"Errore ChatGPT: {e}"

### --- modules/llm/gpt4o_validator.py --- ###
# modules/llm/gpt4o_validator.py
"""
Modulo: gpt4o_validator.py
Descrizione: Validazione e finalizzazione di risposte tramite modello GPT-4 ottimizzato.
"""
import os
import openai

class GPT4oAgent:
    def __init__(self, model_name: str = "gpt-4"):
        self.model = model_name
        self.api_key = os.getenv("OPENAI_API_KEY")
        openai.api_key = self.api_key

    def validate(self, prompt: str, context: dict = None) -> str:
        """
        Genera una risposta perfezionata/sintetizzata per il prompt fornito, utilizzando GPT-4.
        """
        try:
            messages = [
                {"role": "system", "content": "Sei un assistente esperto in sintesi e perfezionamento delle risposte."},
                {"role": "user", "content": prompt}
            ]
            response = openai.ChatCompletion.create(model=self.model, messages=messages, temperature=0.7, max_tokens=1024)
            result = response['choices'][0]['message']['content']
            return result
        except Exception as e:
            return f"Errore GPT4o: {e}"

### --- modules/llm/ollama3_interface.py --- ###
"""
Modulo: ollama3_interface
Descrizione: Interfaccia con Ollama3 per generazione di codice economica e brainstorming.
"""

import requests

class Ollama3Agent:
    def __init__(self, base_url="http://localhost:11434"):
        self.url = base_url

    def generate(self, prompt: str, context: dict = {}) -> str:
        try:
            response = requests.post(
                f"{self.url}/api/generate",
                json={"model": "llama3", "prompt": prompt}
            )
            return response.json().get("response", "Nessuna risposta.")
        except Exception as e:
            return f"Errore Ollama3: {e}"

### --- modules/local/README.md --- ###
# 🧱 Modulo Local – Esecuzione Offline

Contiene agenti AI che operano localmente senza cloud.

## File

- `localai_adapter.py`
- `leon_ai_bridge.py`
- `huggingface_tools.py`
- `n8n_connector.py`

## Scopo

Permettere a Mercurius∞ di operare completamente offline, con AI locali e strumenti autonomi.

### --- modules/local/github_sync.py --- ###
class GitHubSync:
    def push_changes(self, commit_msg: str = "🔄 Sync GENESIS commit"):
        return f"[GitHubSync] Commit e push: {commit_msg}"

### --- modules/local/huggingface_tools.py --- ###
class HuggingFaceTools:
    def __init__(self):
        self.name = "HuggingFaceTools"

    def execute(self, tool_name: str, args: dict) -> str:
        return f"[{self.name}] Strumento '{tool_name}' eseguito con parametri {args}"

### --- modules/local/leon_ai_bridge.py --- ###
"""
Modulo: leon_ai_bridge.py
Descrizione: Esecuzione sicura di comandi di sistema in locale.
Supporta Windows, Linux e Mac. Output sempre loggato.
"""

import subprocess
import platform
import datetime

class LeonAI:
    def __init__(self, log_file="leonai_actions.log"):
        self.name = "LeonAI"
        self.log_file = log_file

    def run_command(self, command: str) -> str:
        now = datetime.datetime.now().isoformat()
        try:
            result = subprocess.run(command, shell=True, capture_output=True, text=True)
            output = result.stdout.strip()
            error = result.stderr.strip()
            msg = output if result.returncode == 0 else f"[{self.name}] ERRORE: {error}"
            self._log_action(command, msg, now)
            return msg
        except Exception as e:
            err_msg = f"[{self.name}] Errore di sistema: {e}"
            self._log_action(command, err_msg, now)
            return err_msg

    def _log_action(self, command, result, timestamp):
        try:
            with open(self.log_file, "a", encoding="utf-8") as logf:
                logf.write(f"[{timestamp}] CMD: {command}\nRES: {result}\n\n")
        except Exception:
            pass  # Logging silenzioso se fallisce

### --- modules/local/localai_adapter.py --- ###
"""
Modulo: localai_adapter.py
Descrizione: Integrazione LLM locale (es. GPT-2 HuggingFace).
Risponde ai prompt senza cloud. Funziona offline!
"""

import os

class LocalAI:
    def __init__(self, model_name="gpt2"):
        self.name = "LocalAI"
        try:
            from transformers import pipeline
            self.generator = pipeline("text-generation", model=model_name)
            self.online = True
        except Exception as e:
            self.generator = None
            self.online = False
            print(f"[LocalAI] Errore nel caricamento modello locale: {e}")

    def execute_task(self, prompt: str) -> str:
        if self.generator:
            try:
                output = self.generator(prompt, max_length=200, do_sample=True)
                return output[0]["generated_text"]
            except Exception as e:
                return f"[{self.name}] Errore modello locale: {e}"
        else:
            return f"[{self.name}] Offline: modello non disponibile. Prompt ricevuto: '{prompt}'."

### --- modules/local/n8n_connector.py --- ###
class N8nConnector:
    def __init__(self):
        self.name = "n8n"

    def trigger_flow(self, flow_id: str) -> str:
        return f"[{self.name}] Flusso {flow_id} attivato localmente"

### --- modules/localai_executor.py --- ###
# modules/localai_executor.py

"""
Modulo: localai_executor.py
Descrizione: Wrapper per gestire LocalAI in locale con modelli in formato GGUF.
Supporta: GPT, STT/TTS, SD.
"""

import subprocess

class LocalAIExecutor:
    def __init__(self, base_url="http://localhost:8080"):
        self.base_url = base_url

    def call_model(self, prompt: str, model="gpt4all"):
        try:
            # Simulazione chiamata locale (sostituibile con requests.post se installato)
            command = f'curl -X POST {self.base_url}/chat -d \'{{"prompt": "{prompt}", "model": "{model}"}}\''
            output = subprocess.getoutput(command)
            return output
        except Exception as e:
            return f"❌ Errore durante l'esecuzione: {str(e)}"

### --- modules/messaging/__init__.py --- ###
"""Utilities for internal messaging."""

### --- modules/messaging/rabbitmq_messenger.py --- ###
"""rabbitmq_messenger.py
=======================
Modulo di messaggistica basato su RabbitMQ per Mercurius∞.

Fornisce funzioni semplici per pubblicare e consumare messaggi utilizzando il
protocollo AMQP tramite la libreria ``pika``. In assenza del server RabbitMQ le
funzioni restituiscono errori gestiti senza sollevare eccezioni critiche.
"""

from typing import Callable, Optional

import pika
from utils.logger import setup_logger

logger = setup_logger("RabbitMQMessenger")


def publish_message(queue: str, message: str, url: str = "amqp://guest:guest@localhost:5672/") -> bool:
    """Invia un messaggio alla coda specificata.

    Ritorna ``True`` se l'operazione è andata a buon fine, altrimenti ``False``.
    """
    try:
        params = pika.URLParameters(url)
        connection = pika.BlockingConnection(params)
        channel = connection.channel()
        channel.queue_declare(queue=queue, durable=True)
        channel.basic_publish(exchange="", routing_key=queue, body=message)
        connection.close()
        logger.info(f"[RabbitMQ] Sent to {queue}: {message}")
        return True
    except Exception as exc:
        logger.error(f"[RabbitMQ] publish failed: {exc}")
        return False


def consume_messages(queue: str, handler: Callable[[str], None], url: str = "amqp://guest:guest@localhost:5672/", limit: Optional[int] = None) -> None:
    """Consuma messaggi dalla coda chiamando ``handler`` per ogni messaggio.

    ``limit`` permette di definire quante messaggi leggere prima di chiudere la
    connessione (``None`` per ciclo infinito).
    """
    try:
        params = pika.URLParameters(url)
        connection = pika.BlockingConnection(params)
        channel = connection.channel()
        channel.queue_declare(queue=queue, durable=True)

        count = 0
        for method_frame, _properties, body in channel.consume(queue):
            handler(body.decode())
            channel.basic_ack(method_frame.delivery_tag)
            count += 1
            if limit and count >= limit:
                break
        channel.cancel()
        connection.close()
    except Exception as exc:
        logger.error(f"[RabbitMQ] consume failed: {exc}")

### --- modules/meta_team_agent.py --- ###
# modules/meta_team_agent.py

"""
Modulo: meta_team_agent.py
Descrizione: Simula un team AI composto da PM, Developer e QA utilizzando MetaGPT o logica equivalente. Coordina task evolutivi.
"""

class MetaTeamAgent:
    def __init__(self):
        self.roles = {
            "PM": self.project_manager,
            "DEV": self.developer,
            "QA": self.quality_assurance
        }

    def assign_task(self, task: str) -> str:
        pm_result = self.roles["PM"](task)
        dev_result = self.roles["DEV"](pm_result)
        return self.roles["QA"](dev_result)

    def project_manager(self, task: str) -> str:
        return f"[PM] Definizione requisiti per: {task}"

    def developer(self, spec: str) -> str:
        return f"[DEV] Implementazione codice basata su: {spec}"

    def quality_assurance(self, code: str) -> str:
        return f"[QA] Validazione e test eseguiti su: {code}"


# Test locale
if __name__ == "__main__":
    meta = MetaTeamAgent()
    print(meta.assign_task("Crea un modulo per la gestione vocale"))

### --- modules/mobile/note_interface.py --- ###
"""note_interface.py
Interfaccia HUD per Samsung Note10+ in stile Jarvis.
"""
from __future__ import annotations

import threading
import time

try:
    import requests
    import speech_recognition as sr
    import pyttsx3
    from kivy.app import App
    from kivy.uix.label import Label
    from kivy.uix.boxlayout import BoxLayout
    from kivy.core.window import Window
    from kivy.clock import Clock
except Exception:  # pragma: no cover - librerie opzionali
    requests = None
    sr = None
    pyttsx3 = None
    App = object  # type: ignore
    Label = object  # type: ignore
    BoxLayout = object  # type: ignore
    Window = object  # type: ignore
    Clock = object  # type: ignore

try:
    from voice.engine.elevenlabs_tts import ElevenLabsTTS
except Exception:  # pragma: no cover
    ElevenLabsTTS = None

HOTWORDS = ["aion", "signore", "analizza questo", "dimmi aion"]


class HUDApp(App):
    """Semplice interfaccia grafica translucida."""

    def build(self):
        if hasattr(Window, "clearcolor"):
            Window.clearcolor = (0, 0, 0, 0)
        self.label = Label(text="AION HUD", color=(0, 1, 1, 1), font_size="20sp")
        layout = BoxLayout(orientation="vertical")
        layout.add_widget(self.label)
        if hasattr(Clock, "schedule_interval"):
            Clock.schedule_interval(self._tick, 1)
        threading.Thread(target=self._listen_loop, daemon=True).start()
        return layout

    def _tick(self, _):  # pragma: no cover - placeholder animazione
        pass

    def _speak(self, text: str) -> None:
        if ElevenLabsTTS:
            try:
                ElevenLabsTTS().synthesize(text, voice="Jarvis")
                return
            except Exception:
                pass
        if pyttsx3:
            engine = pyttsx3.init()
            engine.say(text)
            engine.runAndWait()

    def _listen_loop(self) -> None:
        if not sr:
            return
        recognizer = sr.Recognizer()
        mic = sr.Microphone()
        with mic as source:
            recognizer.adjust_for_ambient_noise(source)
        while True:
            with mic as source:
                audio = recognizer.listen(source, phrase_time_limit=4)
            try:
                text = recognizer.recognize_google(audio, language="it-IT").lower()
            except Exception:
                continue
            if any(hw in text for hw in HOTWORDS):
                response = self._ask_backend(text)
                self._speak(response)
                self.label.text = response

    def _ask_backend(self, prompt: str) -> str:
        if not requests:
            return "Elaboro, signore..."
        try:
            resp = requests.post("http://localhost:8000/ask", json={"prompt": prompt}, timeout=3)
            if resp.ok:
                return resp.json().get("response", "")
        except Exception:
            pass
        return "Elaboro, signore..."


def start_mobile_hud() -> None:
    """Avvia l'app mobile HUD."""
    HUDApp().run()


if __name__ == "__main__":  # pragma: no cover
    start_mobile_hud()

### --- modules/mobile_flutter/__init__.py --- ###


### --- modules/mobile_flutter/flutter_bridge.py --- ###
"""Launcher for the Flutter-based mobile Jarvis UI."""
from __future__ import annotations

import subprocess
import shutil
from pathlib import Path

PROJECT_DIR = Path(__file__).resolve().parent.parent.parent / "mobile_jarvis_ui"


def start_mobile_ui() -> None:
    """Attempt to launch the Flutter app."""
    flutter = shutil.which("flutter")
    if not flutter:
        print("⚠️ Flutter SDK not found. Please run the app manually from mobile_jarvis_ui.")
        return
    try:
        subprocess.Popen([flutter, "run", "-d", "android"], cwd=str(PROJECT_DIR))
        print("📱 Mobile Jarvis UI launched")
    except Exception as exc:
        print(f"⚠️ Unable to launch Flutter app: {exc}")

### --- modules/n8n_connector.py --- ###
# modules/n8n_connector.py

"""
Modulo: n8n_connector.py
Descrizione: Invio e ricezione webhook da n8n per orchestrare flussi AI → PC locale.
"""

import requests

class N8NConnector:
    def __init__(self, webhook_url="http://localhost:5678/webhook/test"):
        self.webhook_url = webhook_url

    def trigger_flow(self, payload: dict) -> str:
        try:
            res = requests.post(self.webhook_url, json=payload)
            return f"📡 Webhook n8n attivato: {res.status_code}"
        except Exception as e:
            return f"❌ Errore n8n: {str(e)}"

### --- modules/network_analyzer.py --- ###
"""network_analyzer.py
Analizza dispositivi sulla rete locale e categoriza le ricerche web.
"""

from __future__ import annotations

import os
from pathlib import Path
from collections import defaultdict
from datetime import datetime

try:
    from scapy.all import ARP, Ether, srp, sniff, DNSQR
except Exception:  # pragma: no cover - scapy may not be installed
    ARP = Ether = srp = sniff = DNSQR = None  # type: ignore

try:
    import bluetooth
except Exception:  # pragma: no cover - bluetooth may not be installed
    bluetooth = None  # type: ignore

try:
    import pywhatkit
except Exception:  # pragma: no cover - pywhatkit may not be installed
    pywhatkit = None  # type: ignore

# Categoria di parole chiave per le ricerche
CATEGORY_PATTERNS = {
    "salute": ["salute", "medic", "ospedale", "dieta", "farmac"],
    "politica": ["politic", "governo", "elezion"],
    "gossip": ["gossip", "vip", "celebrity"],
    "economia": ["econom", "borsa", "finanza"],
    "viaggi": ["viagg", "hotel", "voli"],
    "religione": ["chiesa", "papa", "religion"],
    "social": ["facebook", "instagram", "tiktok", "twitter"],
}

# Eventuale mappatura IP/MAC -> nome utente
KNOWN_DEVICES = {
    "AA:BB:CC:DD:EE:FF": "PAPA",
}


def scan_wifi_network(network_range: str = "192.168.1.0/24") -> list[dict]:
    """Rileva i dispositivi Wi-Fi sulla rete locale."""
    if ARP is None:
        return []
    arp = ARP(pdst=network_range)
    ether = Ether(dst="ff:ff:ff:ff:ff:ff")
    packet = ether / arp
    result = srp(packet, timeout=3, verbose=0)[0]
    devices = []
    for sent, received in result:
        devices.append({"ip": received.psrc, "mac": received.hwsrc})
    return devices


def scan_bluetooth_devices() -> list[dict]:
    """Scansione dei dispositivi Bluetooth vicini."""
    if bluetooth is None:
        return []
    devices = []
    try:
        nearby = bluetooth.discover_devices(duration=5, lookup_names=True)
        for addr, name in nearby:
            devices.append({"mac": addr, "name": name})
    except Exception:
        pass
    return devices


def _extract_domain(packet) -> str | None:
    if DNSQR and packet.haslayer(DNSQR):
        try:
            return packet[DNSQR].qname.decode().rstrip('.')
        except Exception:
            return None
    return None


def capture_dns_queries(duration: int = 30) -> list[str]:
    """Sniffa il traffico DNS per un certo periodo."""
    if sniff is None:
        return []
    queries = []
    packets = sniff(filter="udp port 53", timeout=duration)
    for p in packets:
        d = _extract_domain(p)
        if d:
            queries.append(d)
    return queries


def categorize_domain(domain: str) -> str:
    lower = domain.lower()
    for cat, keywords in CATEGORY_PATTERNS.items():
        for kw in keywords:
            if kw in lower:
                return cat
    return "altro"


def analyze_queries(queries: list[str]) -> dict:
    counts = defaultdict(int)
    for q in queries:
        counts[categorize_domain(q)] += 1
    total = sum(counts.values()) or 1
    return {c: round(v / total * 100, 2) for c, v in counts.items()}


def generate_report(devices: list[dict], bt_devices: list[dict], stats: dict) -> str:
    lines = [f"Report generato: {datetime.now().isoformat()}\n"]
    if devices:
        lines.append("Dispositivi Wi-Fi:")
        for d in devices:
            name = KNOWN_DEVICES.get(d.get("mac"), d.get("ip"))
            lines.append(f"- {name} ({d.get('ip')} {d.get('mac')})")
    if bt_devices:
        lines.append("\nDispositivi Bluetooth:")
        for b in bt_devices:
            lines.append(f"- {b.get('name','?')} ({b.get('mac')})")
    lines.append("\nPercentuali ricerche web:")
    for cat, perc in stats.items():
        lines.append(f"- {cat}: {perc}%")
    return "\n".join(lines)


def save_report(text: str, path: str = "logs/network_search_report.txt") -> str:
    Path("logs").mkdir(exist_ok=True)
    report_path = Path(path)
    report_path.write_text(text)
    return str(report_path)


def send_whatsapp_message(message: str):
    """Invia un messaggio WhatsApp se pywhatkit è disponibile."""
    if pywhatkit is None:
        return
    to = os.getenv("WHATSAPP_NUMBER")
    if not to:
        return
    try:
        pywhatkit.sendwhatmsg_instantly(to, message, wait_time=5, tab_close=True)
    except Exception:
        pass


def analyze_and_notify(duration: int = 30, network_range: str = "192.168.1.0/24"):
    wifi_devices = scan_wifi_network(network_range)
    bt_devices = scan_bluetooth_devices()
    queries = capture_dns_queries(duration)
    stats = analyze_queries(queries)
    report = generate_report(wifi_devices, bt_devices, stats)
    path = save_report(report)
    send_whatsapp_message(f"Analisi rete completata. Report in {path}")
    return report


if __name__ == "__main__":
    print(analyze_and_notify(5))

### --- modules/nlp.py --- ###
"""
Modulo: nlp.py
Responsabilità: Interpretazione semantica dei comandi vocali/testuali
Autore: Mercurius∞ Engineer Mode
"""

from typing import Dict


class CommandInterpreter:
    """
    Interpreta frasi e comandi naturali in azioni simboliche.
    """

    def __init__(self):
        self.known_commands = {
            "analizza l'ambiente": {"action": "analizza_ambiente"},
            "vai alla base": {"action": "raggiungi_destinazione", "context": {"destinazione": "base"}},
            "parla con me": {"action": "interagisci_utente"},
        }

    def interpret(self, text: str) -> Dict:
        """
        Converte una frase in comando semantico.
        """
        text = text.lower().strip()
        if text in self.known_commands:
            return self.known_commands[text]
        elif "ambiente" in text:
            return {"action": "analizza_ambiente"}
        elif "base" in text:
            return {"action": "raggiungi_destinazione", "context": {"destinazione": "base"}}
        elif "parla" in text or "conversazione" in text:
            return {"action": "interagisci_utente"}
        else:
            return {"action": "ignora", "context": {"frase": text}}

### --- modules/ollama3_interface.py --- ###
"""
Modulo: ollama3_interface.py
Descrizione: Interfaccia per comunicare con il server locale di Ollama 3 e ottenere risposte da modelli LLM open source.
"""

import requests
import json


class Ollama3Interface:
    def __init__(self, base_url="http://localhost:11434/api/generate", model="llama3"):
        self.base_url = base_url
        self.model = model

    def ask(self, prompt: str, stream: bool = False) -> str:
        """
        Invia un prompt al modello Ollama 3 e restituisce la risposta.
        """
        headers = {"Content-Type": "application/json"}
        data = {
            "model": self.model,
            "prompt": prompt,
            "stream": stream
        }

        try:
            response = requests.post(self.base_url, headers=headers, data=json.dumps(data))
            response.raise_for_status()

            if stream:
                return self._handle_stream_response(response)
            else:
                output = response.json().get("response", "").strip()
                return output
        except Exception as e:
            return f"⚠️ Errore comunicazione con Ollama: {e}"

    def _handle_stream_response(self, response) -> str:
        output = ""
        for line in response.iter_lines():
            if line:
                try:
                    decoded = json.loads(line.decode("utf-8"))
                    chunk = decoded.get("response", "")
                    output += chunk
                except json.JSONDecodeError:
                    continue
        return output


# Test del modulo
if __name__ == "__main__":
    ollama = Ollama3Interface()
    reply = ollama.ask("Scrivi una funzione Python che calcola il fattoriale.")
    print(reply)

### --- modules/openbb_terminal.py --- ###
# modules/openbb_terminal.py

"""
Modulo: openbb_terminal.py
Descrizione: Wrapper per OpenBB Terminal. Supporta richieste CLI per dati e strategie via comando.
"""

import subprocess

class OpenBBWrapper:
    def run_command(self, command: str) -> str:
        try:
            result = subprocess.run(
                command, shell=True, capture_output=True, text=True
            )
            return result.stdout or "✅ Comando eseguito"
        except Exception as e:
            return f"❌ Errore: {e}"


# Test
if __name__ == "__main__":
    obb = OpenBBWrapper()
    print(obb.run_command("echo 'Simulazione OpenBB'"))

### --- modules/optional/elevenlabs_tts.py --- ###
"""
Modulo: elevenlabs_tts.py
Responsabilità: Sintesi vocale tramite ElevenLabs API.
Autore: Mercurius∞ AI Engineer
"""

class ElevenLabsTTS:
    def __init__(self, api_key=None):
        self.api_key = api_key or "inserisci_qua_la_tua_chiave"
        self.base_url = "https://api.elevenlabs.io/v1/text-to-speech"

    def is_available(self):
        return bool(self.api_key and "inserisci_qua" not in self.api_key)
    
    def speak(self, text: str, voice_id="default", output_path="output.mp3"):
        """
        Genera audio da testo usando ElevenLabs API (stub demo).
        """
        if not self.is_available():
            return "[❌ API key ElevenLabs mancante]"
        # Esempio di chiamata API (stub, va integrato con richiesta reale)
        return f"[✔️ Stub ElevenLabs]: testo '{text}' inviato a {self.base_url}"

### --- modules/optional/huggingface_tools.py --- ###
"""
Modulo: huggingface_tools.py
Responsabilità: Integrazione task avanzati HuggingFace (NLP, NLU, visione, ecc.)
Autore: Mercurius∞ AI Engineer
"""

class HuggingFaceTools:
    def __init__(self):
        try:
            from transformers import pipeline
            self.pipeline = pipeline
            self.ready = True
        except ImportError:
            self.pipeline = None
            self.ready = False

    def is_available(self) -> bool:
        return self.ready

    def run_task(self, task: str, input_data: str) -> str:
        """
        Esegue un task NLP/NLU HuggingFace (es. sentiment-analysis, summarization, ecc.).
        """
        if not self.ready:
            return "[❌ HuggingFace non disponibile]"
        try:
            pipe = self.pipeline(task)
            result = pipe(input_data)
            return str(result)
        except Exception as e:
            return f"[❌ Errore HuggingFace]: {e}"

### --- modules/optional/n8n_connector.py --- ###
"""
Modulo: n8n_connector.py
Responsabilità: Interfaccia per workflow automation tramite n8n (API, webhook).
Autore: Mercurius∞ AI Engineer
"""

import requests

class N8NConnector:
    def __init__(self, webhook_url=None):
        self.webhook_url = webhook_url or "http://localhost:5678/webhook/test"
    
    def is_available(self):
        # Prova di reachability
        try:
            response = requests.get(self.webhook_url, timeout=2)
            return response.status_code == 200
        except Exception:
            return False

    def run_task(self, payload: dict):
        """
        Invia un payload a un workflow n8n tramite webhook POST.
        """
        if not self.is_available():
            return "[❌ n8n non raggiungibile]"
        try:
            response = requests.post(self.webhook_url, json=payload, timeout=5)
            return f"Risposta n8n: {response.status_code} - {response.text}"
        except Exception as e:
            return f"[❌ Errore n8n]: {e}"

### --- modules/optional/plugin_manager.py --- ###
"""
Modulo: plugin_manager.py
Responsabilità: Rileva e gestisce moduli opzionali/plugin caricabili runtime.
Autore: Mercurius∞ AI Engineer
"""

import importlib

OPTIONAL_PLUGINS = [
    "modules.optional.huggingface_tools",
    "modules.optional.n8n_connector",
    "modules.optional.elevenlabs_tts",
    "modules.optional.vosk_stt"
]

class PluginManager:
    def __init__(self):
        self.plugins = {}
        self._load_plugins()

    def _load_plugins(self):
        for plugin_path in OPTIONAL_PLUGINS:
            try:
                module = importlib.import_module(plugin_path)
                # Usa la prima classe trovata nel modulo (convenzionale)
                cls = [obj for name, obj in vars(module).items() if isinstance(obj, type) and name != "PluginManager"][0]
                self.plugins[plugin_path] = cls()
            except Exception as e:
                self.plugins[plugin_path] = f"[❌ Non caricato]: {e}"

    def is_plugin_available(self, plugin_name):
        plugin = self.plugins.get(plugin_name)
        return hasattr(plugin, "is_available") and plugin.is_available()

    def run_plugin_task(self, plugin_name, *args, **kwargs):
        plugin = self.plugins.get(plugin_name)
        if hasattr(plugin, "run_task"):
            return plugin.run_task(*args, **kwargs)
        return "[❌ Metodo run_task non disponibile]"

    def list_plugins(self):
        return {k: "[OK]" if hasattr(v, "is_available") and v.is_available() else v for k, v in self.plugins.items()}

### --- modules/optional/vosk_stt.py --- ###
"""
Modulo: vosk_stt.py
Responsabilità: Speech-to-Text offline tramite Vosk.
Autore: Mercurius∞ AI Engineer
"""

class VoskSTT:
    def __init__(self, model_path="model"):
        try:
            import vosk
            self.vosk = vosk
            self.model = vosk.Model(model_path)
            self.ready = True
        except Exception:
            self.vosk = None
            self.model = None
            self.ready = False

    def is_available(self):
        return self.ready

    def transcribe(self, file_path: str) -> str:
        """
        Trascrive un file audio offline con Vosk (stub demo).
        """
        if not self.ready:
            return "[❌ Vosk non disponibile]"
        try:
            import wave
            wf = wave.open(file_path, "rb")
            rec = self.vosk.KaldiRecognizer(self.model, wf.getframerate())
            results = []
            while True:
                data = wf.readframes(4000)
                if len(data) == 0:
                    break
                if rec.AcceptWaveform(data):
                    results.append(rec.Result())
            results.append(rec.FinalResult())
            return "\n".join(results)
        except Exception as e:
            return f"[❌ Errore Vosk]: {e}"

### --- modules/planner.py --- ###
"""
Modulo: planner.py
Responsabilità: Pianificazione strategica delle azioni in base a obiettivi e contesto
Autore: Mercurius∞ Engineer Mode
"""

from typing import List, Dict, Any


class ActionPlanner:
    """
    Planner strategico per sequenziare azioni sulla base di obiettivi e contesto.
    """

    def __init__(self):
        self.last_plan: List[Dict[str, Any]] = []

    def generate_plan(self, goal: str, context: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
        Genera una sequenza di azioni per raggiungere un obiettivo dato il contesto.
        """
        # Placeholder semplice. In futuro: agenti LLM o regole fuzzy.
        plan = []

        if goal == "analizza_ambiente":
            plan.append({"action": "attiva_sensori", "params": {"tipo": "ambientali"}})
            plan.append({"action": "acquisisci_dati"})
            plan.append({"action": "valuta_rischi"})

        elif goal == "raggiungi_destinazione":
            plan.append({"action": "calcola_percorso", "params": {"destinazione": context.get("destinazione")}})
            plan.append({"action": "avvia_navigazione"})
            plan.append({"action": "monitoraggio_progresso"})

        elif goal == "interagisci_utente":
            plan.append({"action": "saluta"})
            plan.append({"action": "richiedi_input"})
            plan.append({"action": "rispondi"})

        else:
            plan.append({"action": "log", "params": {"messaggio": f"Nessun piano noto per '{goal}'"}})

        self.last_plan = plan
        return plan

    def describe_plan(self, plan: List[Dict[str, Any]]) -> str:
        """
        Descrive verbalmente un piano d'azione.
        """
        description = "Piano d'azione:\n"
        for step in plan:
            description += f" - {step['action']}"
            if "params" in step:
                description += f" con parametri {step['params']}"
            description += "\n"
        return description

    def validate_plan(self, plan: List[Dict[str, Any]]) -> bool:
        """
        Verifica che il piano contenga azioni ben definite.
        """
        for step in plan:
            if not isinstance(step.get("action"), str):
                return False
        return True

    def plan_summary(self) -> Dict[str, Any]:
        """
        Riepilogo dell'ultimo piano generato.
        """
        return {
            "step_count": len(self.last_plan),
            "actions": [step["action"] for step in self.last_plan]
        }

### --- modules/qlib_quant.py --- ###
# modules/qlib_quant.py
"""
Modulo: qlib_quant.py
Descrizione: Integrazione con Qlib per predizione di prezzi, analisi dati storici e backtest quantitativi.
"""
import random

class QlibQuant:
    def __init__(self):
        # Mantiene ultime previsioni per simulare continuità (es. prezzo ultimo conosciuto per ticker)
        self.last_price = {}

    def predict(self, ticker: str) -> float:
        """Restituisce una previsione simulata del prezzo per il ticker dato."""
        base_price = self.last_price.get(ticker, random.uniform(50, 150))  # prezzo base casuale se sconosciuto
        # Simula variazione percentuale casuale tra -1% e +1%
        change = random.uniform(-0.01, 0.01)
        predicted_price = base_price * (1 + change)
        # Aggiorna lo storico del prezzo
        self.last_price[ticker] = predicted_price
        print(f"📈 QlibQuant: Predizione per {ticker} = {predicted_price:.2f}")
        return predicted_price

    def backtest(self):
        """Esegue un backtest simulato e restituisce un report sintetico."""
        # Simula calcolo di uno Sharpe Ratio basato su dati casuali
        sharpe_ratio = round(random.uniform(0.5, 2.0), 2)
        return f"✅ Backtest completato: Sharpe Ratio {sharpe_ratio}"

### --- modules/reasoner_dispatcher.py --- ###
"""reasoner_dispatcher.py
=======================
Dispatcher multi-agent che instrada i prompt ai vari Reasoner (GPT-4o, Ollama3, AZR, ecc.)
Seleziona e fonde le risposte, gestendo fallback ed errori.
"""

from __future__ import annotations

from typing import Dict
import json

from utils.logger import setup_logger
from modules.llm.chatgpt_interface import ChatGPTAgent
from modules.llm.ollama3_interface import Ollama3Agent
from modules.llm.azr_reasoner import AZRAgent
from modules.llm.gpt4o_validator import GPT4oAgent

logger = setup_logger("ReasonerDispatcher")


class ReasonerDispatcher:
    """Gestisce l'inoltro dei prompt ai vari reasoner e ne combina le risposte."""

    def __init__(self) -> None:
        self.reasoners = {
            "chatgpt4": ChatGPTAgent(),
            "ollama3": Ollama3Agent(),
            "azr": AZRAgent(),
            "gpt4o": GPT4oAgent(),
        }

    def dispatch(self, prompt: str) -> str:
        """Invia il prompt a tutti i reasoner disponibili e sintetizza la risposta migliore."""
        logger.info(f"[DISPATCH] Prompt ricevuto: {prompt}")
        responses: Dict[str, str] = {}
        for name, agent in self.reasoners.items():
            try:
                if name == "chatgpt4":
                    responses[name] = agent.elaborate(prompt)
                elif name == "ollama3":
                    responses[name] = agent.generate(prompt)
                elif name == "azr":
                    responses[name] = agent.analyze(prompt)
                elif name == "gpt4o":
                    responses[name] = agent.validate(prompt)
            except Exception as exc:
                responses[name] = f"Errore {name}: {exc}"
                logger.error(f"Errore nel reasoner {name}: {exc}")

        # Sintesi finale con GPT4o se disponibile
        synth_prompt = "Sintetizza in una risposta unica e coerente le seguenti risposte:\n" + json.dumps(responses, ensure_ascii=False, indent=2)
        try:
            final_resp = self.reasoners["gpt4o"].validate(synth_prompt)
        except Exception as exc:  # fallback se GPT4o fallisce
            logger.error(f"Fallback GPT4o: {exc}")
            # Selezione semplice: risposta più lunga senza errore
            valid = [r for r in responses.values() if not r.lower().startswith("errore") and r]
            final_resp = max(valid, key=len) if valid else "Nessuna risposta disponibile."
        logger.info("[DISPATCH] Risposta finale generata")
        return final_resp


def dispatch_to_reasoner(prompt: str) -> str:
    """Funzione helper per utilizzo rapido del dispatcher."""
    dispatcher = ReasonerDispatcher()
    return dispatcher.dispatch(prompt)


# Test rapido
if __name__ == "__main__":
    test_prompt = "Spiega la teoria della relativit\u00e0 in breve"
    print(dispatch_to_reasoner(test_prompt))

### --- modules/sandbox_executor/secure_executor.py --- ###
"""
Modulo: secure_executor.py
Descrizione: Esecuzione sicura di codice Python in sandbox controllata con timeout.
Autore: Mercurius∞ AI Engineer
"""

import sys
import io
import multiprocessing
import traceback
import contextlib

class SecureExecutor:
    def __init__(self, timeout: int = 5):
        """
        timeout: tempo massimo di esecuzione in secondi
        """
        self.timeout = timeout

    def _run_code(self, code: str, return_dict):
        """Esegue codice Python in ambiente isolato e cattura output e errori."""
        stdout = io.StringIO()
        stderr = io.StringIO()
        try:
            sys.stdout = stdout
            sys.stderr = stderr
            exec(code, {})
        except Exception:
            return_dict['error'] = traceback.format_exc()
        finally:
            return_dict['output'] = stdout.getvalue()
            return_dict['stderr'] = stderr.getvalue()

    def execute(self, code: str) -> dict:
        """
        Esegue codice Python con timeout e isolamento tramite multiprocessing.
        Ritorna un dict con chiavi: output, stderr, error.
        """
        manager = multiprocessing.Manager()
        return_dict = manager.dict()

        proc = multiprocessing.Process(target=self._run_code, args=(code, return_dict))
        proc.start()
        proc.join(self.timeout)

        if proc.is_alive():
            proc.terminate()
            return {
                "output": "",
                "stderr": "",
                "error": "Execution timed out."
            }

        # Se l'errore non è stato catturato da exec, assegna stringa vuota
        if 'error' not in return_dict:
            return_dict['error'] = ""

        return dict(return_dict)

# Test esecuzione diretta
if __name__ == "__main__":
    executor = SecureExecutor(timeout=3)
    code_snippet = """
print('Hello from sandbox!')
for i in range(3):
    print(i)
"""
    result = executor.execute(code_snippet)
    print("Output:", result['output'])
    print("Error:", result['error'])

### --- modules/speech.py --- ###
"""
Modulo: speech.py
Responsabilità: Gestione input vocale (ASR) e output vocale (TTS)
Autore: Mercurius∞ Engineer Mode
"""

try:
    import pyttsx3
except Exception:  # pragma: no cover - optional engine
    pyttsx3 = None
import speech_recognition as sr


class TextToSpeech:
    """
    Sintesi vocale basata su pyttsx3.
    """
    def __init__(self, voice_id=None):
        self.engine = None
        if pyttsx3 is not None:
            try:
                self.engine = pyttsx3.init()
                self.set_voice(voice_id)
            except Exception:
                self.engine = None

    def set_voice(self, voice_id):
        if not self.engine:
            return
        if voice_id is not None:
            self.engine.setProperty('voice', voice_id)
        else:
            voices = self.engine.getProperty('voices')
            if voices:
                self.engine.setProperty('voice', voices[0].id)

    def speak(self, text: str):
        if self.engine:
            self.engine.say(text)
            self.engine.runAndWait()
        else:
            print(f"[TTS] {text}")


class SpeechToText:
    """
    Riconoscimento vocale basato su speech_recognition.
    """
    def __init__(self, language: str = "it-IT"):
        self.recognizer = sr.Recognizer()
        self.language = language

    def listen(self, timeout: int = 5) -> str:
        with sr.Microphone() as source:
            print("🎙️ In ascolto...")
            audio = self.recognizer.listen(source, timeout=timeout)
            try:
                text = self.recognizer.recognize_google(audio, language=self.language)
                print("🗣️ Riconosciuto:", text)
                return text
            except sr.UnknownValueError:
                return "[ERROR] Non ho capito."
            except sr.RequestError as e:
                return f"[ERROR] Errore di connessione: {e}"

### --- modules/start_fullmode/initializer.py --- ###
"""
Modulo: initializer
Descrizione: Avvio completo del sistema Mercurius∞ in modalità autonoma.
Autore: Mercurius∞ AI Engineer
"""

import os
import time
from modules.ai_kernel.agent_core import AgentCore
from modules.voice_bridge.audio_interface import AudioInterface
from modules.stream_vision.video_pipeline import VideoPipeline

class SystemInitializer:
    def __init__(self):
        self.agent = AgentCore()
        self.audio = AudioInterface()
        self.vision = VideoPipeline()

    def initialize_environment(self):
        """Setup iniziale del sistema."""
        print("[INIT] Configurazione ambiente...")
        os.environ['MERCURIUS_MODE'] = 'full'
        time.sleep(1)

    def start_components(self):
        """Avvia tutti i moduli principali."""
        print("[INIT] Avvio moduli principali...")
        self.vision.start()
        self.audio.initialize()
        self.agent.boot()

    def start_fullmode(self):
        """Avvia il sistema in modalità autonoma completa."""
        self.initialize_environment()
        self.start_components()
        print("[INIT] Mercurius∞ avviato in modalità FULLMODE.")

# Avvio diretto
if __name__ == "__main__":
    system = SystemInitializer()
    system.start_fullmode()

### --- modules/strategic/__init__.py --- ###


### --- modules/strategic/strategic_brain.py --- ###
"""Strategic Brain module integrating gpt_engineer with Mercurius∞.
"""
from pathlib import Path
from typing import List

from modules.goal_manager import GoalManager, Goal
from modules.gpt_engineer_wrapper import GPTEngineerWrapper
from modules.llm.azr_reasoner import AZRAgent
from orchestrator.genesis_orchestrator import GenesisOrchestrator


class StrategicBrain:
    """High level manager that routes goals to LLMs and falls back to GPT-Engineer."""

    def __init__(self, workspace: str = "strategic_projects") -> None:
        self.goal_manager = GoalManager()
        self.orchestrator = GenesisOrchestrator()
        self.validator = AZRAgent()
        self.builder = GPTEngineerWrapper(project_path=workspace)
        Path(workspace).mkdir(exist_ok=True)

    def load_goals(self, goals_path: str) -> None:
        """Load goals from a text file."""
        path = Path(goals_path)
        if not path.exists():
            return
        for line in path.read_text(encoding="utf-8").splitlines():
            line = line.strip()
            if line:
                self.goal_manager.add_goal(line)

    def execute_goal(self, goal: Goal) -> str:
        """Process a single goal using the orchestrator and fallback with GPT-Engineer."""
        result = self.orchestrator.route_task(goal.name)
        analysis = self.validator.analyze(result.get("response", ""))
        if isinstance(analysis, str) and analysis.startswith("❌"):
            # invalid response: trigger GPT-Engineer
            return self.builder.generate_project(goal.name)
        return result.get("response", "")

    def run(self) -> List[str]:
        """Run through all pending goals and return list of outputs."""
        outputs = []
        while True:
            next_goal = self.goal_manager.get_next_goal()
            if not next_goal:
                break
            output = self.execute_goal(next_goal)
            outputs.append(output)
            self.goal_manager.complete_goal(next_goal.name)
        return outputs

### --- modules/strategic/strategic_runner.py --- ###
"""CLI per eseguire il modulo StrategicBrain."""
import argparse
from pathlib import Path

from .strategic_brain import StrategicBrain


def main() -> None:
    parser = argparse.ArgumentParser(description="Run Strategic Brain goals")
    parser.add_argument("goals", nargs="?", default="goals.txt", help="File dei goal o singolo obiettivo")
    args = parser.parse_args()

    brain = StrategicBrain()

    if Path(args.goals).is_file():
        brain.load_goals(args.goals)
    else:
        brain.goal_manager.add_goal(args.goals)

    results = brain.run()
    for res in results:
        print(res)


if __name__ == "__main__":
    main()

### --- modules/stream_vision/__init__.py --- ###
"""
Package stream_vision
Contiene pipeline di elaborazione video (placeholder minimale).
"""

### --- modules/stream_vision/video_pipeline.py --- ###
"""
Modulo: video_pipeline.py
Descrizione: Gestione realistica della pipeline video con placeholder di fallback.
Autore: Mercurius∞ AI Engineer
"""

import cv2
import threading

class VideoPipeline:
    def __init__(self, source=0, use_placeholder=False):
        """
        source: indice webcam o percorso file
        use_placeholder: se True usa il placeholder semplice senza OpenCV
        """
        self.source = source
        self.use_placeholder = use_placeholder
        self.active = False
        self.capture_thread = None

    def _process_frame(self, frame):
        """Elabora il frame video (placeholder per elaborazioni future)."""
        print("[VISION] Frame catturato.")
        return frame

    def _capture_loop(self):
        """Ciclo continuo di cattura video con OpenCV."""
        cap = cv2.VideoCapture(self.source)
        if not cap.isOpened():
            print("[VISION] Impossibile aprire la sorgente video.")
            return

        while self.active:
            ret, frame = cap.read()
            if not ret:
                break
            self._process_frame(frame)
        cap.release()
        print("[VISION] Video terminato.")

    def start(self):
        """Avvia la pipeline video (reale o placeholder)."""
        if self.active:
            return
        print(f"[VISION] Avvio pipeline video su '{self.source}' " + 
              ("(placeholder)" if self.use_placeholder else "(reale)"))
        self.active = True
        if self.use_placeholder:
            print(f"📹 VideoPipeline avviata su '{self.source}' (placeholder)")
        else:
            self.capture_thread = threading.Thread(target=self._capture_loop)
            self.capture_thread.start()

    def stop(self):
        """Arresta la pipeline video."""
        if not self.active:
            return
        self.active = False
        if self.capture_thread:
            self.capture_thread.join()
        print("🛑 Pipeline video fermata")

# Esempio di esecuzione diretta
if __name__ == "__main__":
    vp = VideoPipeline(source=0, use_placeholder=False)
    vp.start()
    import time
    time.sleep(5)
    vp.stop()

### --- modules/stream_voice/__init__.py --- ###


### --- modules/superagi_agent.py --- ###
# modules/superagi_agent.py

"""
Modulo: superagi_agent.py
Descrizione: Framework per task evolutivi autonomi multi-step. Simula workflow AI dinamici tramite SuperAGI.
"""

class SuperAGIAgent:
    def __init__(self, name="MercuriusExecutor"):
        self.name = name
        self.steps = []

    def assign_task(self, task: str):
        self.steps = [f"Step {i+1}: {subtask}" for i, subtask in enumerate(task.split("."))]
        return f"🧠 {self.name} ha pianificato {len(self.steps)} subtask."

    def execute(self):
        results = [f"✅ {step} completato." for step in self.steps]
        return "\n".join(results)


# Test
if __name__ == "__main__":
    agent = SuperAGIAgent()
    print(agent.assign_task("Analizza i dati. Genera il report. Invia l’output."))
    print(agent.execute())

### --- modules/supervisor.py --- ###
"""
Modulo: supervisor.py
Responsabilità: Monitoraggio comportamentale e strategico del sistema
Autore: Mercurius∞ Engineer Mode
"""

import time
import datetime
from typing import Dict, List


class ActionLog:
    """
    Rappresenta un'azione osservata dal supervisore.
    """

    def __init__(self, action: str, outcome: str, success: bool, context: Dict):
        self.timestamp = datetime.datetime.now().isoformat()
        self.action = action
        self.outcome = outcome
        self.success = success
        self.context = context

    def to_dict(self) -> Dict:
        return {
            "timestamp": self.timestamp,
            "action": self.action,
            "outcome": self.outcome,
            "success": self.success,
            "context": self.context
        }


class Supervisor:
    """
    Sistema di supervisione del comportamento cognitivo e operativo.
    """

    def __init__(self):
        self.logs: List[Dict] = []
        self.total_actions = 0
        self.total_success = 0
        self.total_failures = 0
        self.start_time = time.time()

    def observe(self, action: str, outcome: str, success: bool, context: Dict):
        """
        Registra un evento/azione osservato.
        """
        self.total_actions += 1
        if success:
            self.total_success += 1
        else:
            self.total_failures += 1

        log_entry = ActionLog(action, outcome, success, context)
        self.logs.append(log_entry.to_dict())

    def performance_report(self) -> Dict:
        """
        Fornisce un report generale delle prestazioni osservate.
        """
        uptime = time.time() - self.start_time
        return {
            "uptime_sec": int(uptime),
            "actions_total": self.total_actions,
            "successes": self.total_success,
            "failures": self.total_failures,
            "success_rate": round((self.total_success / self.total_actions) * 100, 2) if self.total_actions else 0.0
        }

    def last_actions(self, count: int = 5) -> List[Dict]:
        return self.logs[-count:]

### --- modules/task_manager_cli.py --- ###
import argparse
from modules.Neo.trainer_orchestrator import bootstrap_agents
from modules.Localai.local_ai import LocalAI
from modules.Leonai.leon_ai import LeonAI

class TaskManagerCLI:
    def __init__(self):
        self.localai = LocalAI()
        self.leonai = LeonAI()
        print("🕹️ TaskManager CLI interattivo pronto! Scrivi 'ai: ...' per LLM offline, 'pc: ...' per comandi PC, 'exit' per uscire.")

    def run(self):
        while True:
            try:
                cmd = input("Task> ").strip()
                if not cmd:
                    continue
                if cmd.lower() == "exit":
                    print("Bye Jarvis!")
                    break
                if cmd.startswith("ai:"):
                    prompt = cmd[3:].strip()
                    response = self.localai.rispondi(prompt)
                    print(f"\n🤖 LocalAI: {response}\n")
                elif cmd.startswith("pc:"):
                    sys_cmd = cmd[3:].strip()
                    try:
                        out = self.leonai.esegui_comando(sys_cmd)
                        print(f"\n🦾 LeonAI Output:\n{out}\n")
                    except PermissionError as e:
                        print(f"[SECURITY]: {e}")
                else:
                    print("❓ Comando non riconosciuto. Usa 'ai:' o 'pc:' davanti.")
            except KeyboardInterrupt:
                print("\nInterrotto. Exit.")
                break

def create_agent(nome):
    print(f"🧬 Creo nuovo agente: {nome}")
    # Se bootstrap_agents non supporta argomenti, chiamalo senza parametri.
    bootstrap_agents()



def elenco_task():
    print("📜 Task disponibili:")
    print(" - crea_agente --nome <NomeAgente>")
    print(" - avvia_bootstrap")
    print(" - interactive (modalità CLI interattiva)")
    print(" - help")

def main():
    parser = argparse.ArgumentParser(description="Mercurius∞ TaskManager CLI – Modalità Jarvis+ Ultra")
    parser.add_argument("--task", type=str, help="Task da eseguire (es: crea_agente, avvia_bootstrap, interactive, help)")
    parser.add_argument("--nome", type=str, help="Nome agente, modulo o oggetto")
    args = parser.parse_args()

    if not args.task or args.task == "interactive":
        TaskManagerCLI().run()
    elif args.task == "crea_agente" and args.nome:
        create_agent(args.nome)
    elif args.task == "avvia_bootstrap":
        print("🟢 Avvio sequenza di bootstrap completa!")
        bootstrap_agents()
    elif args.task == "help":
        elenco_task()
    else:
        print("❌ Comando non riconosciuto. Usa '--task help' per la lista.")

### --- modules/url_learner.py --- ###
# modules/knowledge/url_learner.py
"""
Scarica pagine web, le riassume con GPT e salva in Long-Term Memory.
"""

import requests
import os
import openai
import readability
from bs4 import BeautifulSoup
from memory.long_term_memory import LongTermMemory

openai.api_key = os.getenv("OPENAI_API_KEY")
mem = LongTermMemory()                           # usa backend JSON

def _clean_html(html: str) -> str:
    # readability-lxml per estrarre solo il main <article>
    doc = readability.Document(html)
    soup = BeautifulSoup(doc.summary(), "html.parser")
    return soup.get_text(separator="\n")

def summarize(text: str, url: str) -> str:
    prompt = (
        f"Riassumi in 10 bullet il seguente articolo ({url}). "
        "Evidenzia i concetti chiave e gli eventuali numeri importanti.\n\n"
        f"{text[:8000]}"    # taglio altrimenti supero token
    )
    resp = openai.ChatCompletion.create(
        model="gpt-3.5-turbo", messages=[{"role": "user", "content": prompt}],
        temperature=0.4, max_tokens=500
    )
    return resp["choices"][0]["message"]["content"]

def ingest_url(url: str):
    r = requests.get(url, timeout=15)
    r.raise_for_status()
    text = _clean_html(r.text)
    summary = summarize(text, url)
    mem.save_experience({
        "tags": ["url_knowledge"],
        "source": url,
        "summary": summary
    })
    print(f"✅ Ingested {url}")

if __name__ == "__main__":
    import sys
    if len(sys.argv) < 2:
        print("Usage: python -m modules.knowledge.url_learner <url1> <url2> …")
        raise SystemExit
    for u in sys.argv[1:]:
        ingest_url(u)

### --- modules/vision_audio/__init__.py --- ###


### --- modules/vision_audio/note10_jarvis_bridge.py --- ###
"""note10_jarvis_bridge.py
Modulo: note10_jarvis_bridge
Descrizione: trasforma un Note10+ in assistente vocale continuo in stile Jarvis.
"""

from __future__ import annotations

import logging
import queue
import threading
import time
from typing import Callable, List, Optional

try:
    import sounddevice as sd
except Exception:  # pragma: no cover - sounddevice may not be available
    sd = None

try:
    import whisper
except Exception:  # pragma: no cover - whisper may not be installed
    whisper = None

try:
    import vosk
except Exception:  # pragma: no cover - vosk may not be installed
    vosk = None

try:
    import requests
except Exception:  # pragma: no cover
    requests = None

HOTWORDS = [
    "tu che ne pensi aion",
    "analizzami questo aion",
    "tu che dici aion",
    "vero aion",
    "giusto aion?",
]

logger = logging.getLogger(__name__)


class VoiceListener:
    """Microfono sempre attivo con hotword detection."""

    def __init__(self, hotwords: Optional[List[str]] = None, model: str = "base"):
        self.hotwords = [h.lower() for h in (hotwords or HOTWORDS)]
        self.model_name = model
        self._queue: queue.Queue[bytes] = queue.Queue()
        self._stop = threading.Event()
        self._callback: Optional[Callable[[str], None]] = None
        self.use_whisper = False
        self.use_vosk = False
        self._init_models()

    def _init_models(self) -> None:
        if whisper:
            try:
                self.whisper_model = whisper.load_model(self.model_name)
                self.use_whisper = True
                logger.info("Whisper model ready")
            except Exception as exc:  # pragma: no cover
                logger.warning("Whisper load failed: %s", exc)
        if not self.use_whisper and vosk:
            try:
                self.vosk_model = vosk.Model("model")
                self.use_vosk = True
                logger.info("Vosk model ready")
            except Exception as exc:  # pragma: no cover
                logger.warning("Vosk load failed: %s", exc)

    def start(self, on_trigger: Callable[[str], None]) -> None:
        self._callback = on_trigger
        threading.Thread(target=self._listen_loop, daemon=True).start()

    def stop(self) -> None:
        self._stop.set()

    def _audio_cb(self, indata, frames, time_info, status) -> None:
        self._queue.put(bytes(indata))

    def _listen_loop(self) -> None:
        if not sd:
            logger.error("sounddevice non disponibile")
            return
        with sd.InputStream(channels=1, samplerate=16000, callback=self._audio_cb):
            while not self._stop.is_set():
                time.sleep(0.1)
                if not self._queue.empty():
                    data = b"".join([self._queue.get() for _ in range(self._queue.qsize())])
                    text = self._transcribe(data)
                    if text:
                        lowered = text.lower().strip()
                        if any(h in lowered for h in self.hotwords):
                            logger.info("Hotword detected: %s", lowered)
                            if self._callback:
                                self._callback(lowered)

    def _transcribe(self, audio: bytes) -> str:
        if self.use_whisper:
            try:
                import numpy as np
                waveform = np.frombuffer(audio, dtype="int16").astype(np.float32) / 32768.0
                result = self.whisper_model.transcribe(waveform, language="it")

                return result.get("text", "")
            except Exception as exc:  # pragma: no cover
                logger.error("Whisper error: %s", exc)
        if self.use_vosk:
            try:
                rec = vosk.KaldiRecognizer(self.vosk_model, 16000)
                if rec.AcceptWaveform(audio):
                    import json
                    return json.loads(rec.Result()).get("text", "")
            except Exception as exc:  # pragma: no cover
                logger.error("Vosk error: %s", exc)
        return ""


class PermissionHandler:
    """Gestisce l'autorizzazione dell'assistente."""

    def __init__(self) -> None:
        self.authorized = True

    def can_respond(self, speaker: Optional[str] = None) -> bool:
        return self.authorized

    def request(self) -> str:
        return "Signore, posso rispondere?"


class MercuriusConnector:
    """Invia e riceve messaggi da Mercurius∞."""

    def __init__(self, url: str = "http://localhost:8000/ask") -> None:
        self.url = url

    def ask(self, prompt: str) -> str:
        if not requests:
            logger.error("requests non disponibile")
            return ""
        try:
            resp = requests.post(self.url, json={"prompt": prompt}, timeout=10)
            if resp.ok:
                return resp.json().get("response", "")
            return ""
        except Exception as exc:  # pragma: no cover
            logger.error("HTTP error: %s", exc)
            return ""


class JarvisResponder:
    """Risposte vocali eleganti con TTS."""

    def __init__(self) -> None:
        self.voice = None
        self._init_tts()

    def _init_tts(self) -> None:
        try:
            from voice.engine.elevenlabs_tts import ElevenLabsTTS
            self.voice = ElevenLabsTTS()
        except Exception:  # pragma: no cover
            try:
                from voice.engine.coqui_tts import CoquiTTS  # type: ignore
                self.voice = CoquiTTS()
            except Exception:
                logger.warning("Nessun motore TTS disponibile")

    def speak(self, text: str) -> None:
        if not self.voice:
            print(f"[JARVIS]: {text}")
        else:
            try:
                self.voice.synthesize(text, voice="Jarvis")  # type: ignore[attr-defined]
            except Exception as exc:  # pragma: no cover
                logger.error("TTS error: %s", exc)
                print(f"[JARVIS]: {text}")


class Note10JarvisBridge:
    """Orchestratore del bridge vocale."""

    def __init__(self) -> None:
        self.listener = VoiceListener()
        self.responder = JarvisResponder()
        self.connector = MercuriusConnector()
        self.permissions = PermissionHandler()

    def _handle_phrase(self, phrase: str) -> None:
        if not self.permissions.can_respond():
            self.responder.speak("Con tutto il rispetto, io rispondo solo al mio creatore.")
            return
        response = self.connector.ask(phrase)
        if not response:
            self.responder.speak("Attenda un istante, Signore. Sto raccogliendo i dati")
        else:
            self.responder.speak(response.strip()[:250])

    def start(self) -> None:
        self.listener.start(self._handle_phrase)
        print("🤖 Note10 Jarvis Bridge attivo. Microfono in ascolto...")
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            self.listener.stop()


def start_jarvis_loop() -> None:
    """Funzione helper per avviare il loop."""
    bridge = Note10JarvisBridge()
    bridge.start()

### --- modules/voice_bridge/activation_hook.py --- ###
from interface.genesis_bridge import GenesisBridge

class VoiceActivation:
    def __init__(self):
        self.bridge = GenesisBridge()

    def process_input(self, speech: str) -> str:
        if self.bridge.activate_from_voice(speech):
            self.bridge.trigger_activation("voce")
            return "GENESIS attivato!"
        return "Comando vocale ignorato."

### --- modules/voice_bridge/audio_interface.py --- ###
"""
Modulo: audio_interface
Descrizione: Interfaccia vocale per input STT e output TTS nel sistema Mercurius∞.
Autore: Mercurius∞ AI Engineer
"""

import os

class AudioInterface:
    def __init__(self):
        self.microphone_ready = False
        self.tts_ready = False

    def initialize(self):
        """Inizializza le risorse audio."""
        print("[AUDIO] Inizializzazione microfono e TTS...")
        self.microphone_ready = True
        self.tts_ready = True

    def listen(self):
        """Simula acquisizione audio (STT)."""
        if not self.microphone_ready:
            return "[AUDIO] Microfono non inizializzato."
        print("[AUDIO] Ascolto... (placeholder)")
        return "comando vocale simulato"

    def speak(self, text):
        """Simula output vocale (TTS)."""
        if not self.tts_ready:
            return "[AUDIO] TTS non inizializzato."
        print(f"[AUDIO] Parla: {text}")

# Esecuzione diretta
if __name__ == "__main__":
    audio = AudioInterface()
    audio.initialize()
    command = audio.listen()
    audio.speak(f"Hai detto: {command}")

### --- modules/voice_bridge/dia_model_mock.py --- ###
"""
Mock per dia.model se il pacchetto non è installabile localmente.
"""

class Dia:
    @staticmethod
    def from_pretrained(model_name: str):
        class DummyModel:
            def generate(self, text):
                import numpy as np
                return np.zeros(44100)
        return DummyModel()

### --- modules/voice_bridge/multimodal_controller.py --- ###
"""
Modulo: multimodal_controller
Descrizione: Gestione input/output multimodale vocale per Mercurius∞.
Autore: Mercurius∞ AI Engineer
"""

import time
from modules.voice_bridge.speech_to_text import WhisperSTT

# TTS avanzato (Nari Dia) + fallback
try:
    from modules.voice_bridge.nari_dia_tts import NariDiaTTS
    TTS_ENGINE = "nari"
except ImportError:
    from modules.voice_bridge.text_to_speech import TextToSpeech
    TTS_ENGINE = "pyttsx3"

class MultimodalController:
    def __init__(self):
        self.stt = WhisperSTT()
        if TTS_ENGINE == "nari":
            self.tts = NariDiaTTS()
        else:
            self.tts = TextToSpeech()

    def listen_and_respond(self, audio_file_path: str, ai_callback):
        """
        Ascolta un file audio, lo trascrive, passa il testo all'AI,
        e vocalizza la risposta.
        """
        print("🎧 Ricezione vocale in corso...")
        input_text = self.stt.transcribe(audio_file_path)
        print("🗣 Input:", input_text)

        response = ai_callback(input_text)
        print("🧠 Risposta AI:", response)

        time.sleep(0.5)  # Ottimizzazione dialogo
        self.tts.speak(response)
        return response

# Esecuzione di prova
if __name__ == "__main__":
    def mock_ai(text):
        return f"Hai detto: {text}"

    mmc = MultimodalController()
    mmc.listen_and_respond("sample_audio.wav", mock_ai)

### --- modules/voice_bridge/nari_dia_tts.py --- ###
import soundfile as sf
from modules.voice_bridge.dia_model_mock import Dia


class NariDiaTTS:
    def __init__(self, model_name="nari-labs/Dia-1.6B"):
        self.model = Dia.from_pretrained(model_name)

    def speak(self, text: str, output_path="output.wav"):
        """
        Genera audio da testo utilizzando Nari Dia.
        """
        output = self.model.generate(text)
        sf.write(output_path, output, 44100)
        # Riproduzione audio (opzionale)
        # playsound(output_path)

### --- modules/voice_bridge/pyttsx3_tts.py --- ###
# modules/voice_bridge/pyttsx3_tts.py
"""
Modulo: pyttsx3_tts.py
Descrizione: Sintesi vocale offline compatibile con qualsiasi Python (usando pyttsx3).
"""

import pyttsx3

class Pyttsx3TTS:
    def __init__(self, voice_id=None):
        self.engine = pyttsx3.init()
        if voice_id:
            self.engine.setProperty('voice', voice_id)

    def speak(self, text: str):
        self.engine.say(text)
        self.engine.runAndWait()

### --- modules/voice_bridge/speech_to_text.py --- ###
"""
Modulo: speech_to_text
Descrizione: Interfaccia vocale STT usando Whisper per Mercurius∞.
Autore: Mercurius∞ AI Engineer
"""

import whisper

class WhisperSTT:
    def __init__(self, model_name="base"):
        self.model = whisper.load_model(model_name)

    def transcribe(self, audio_path: str) -> str:
        """Esegue la trascrizione da un file audio."""
        try:
            result = self.model.transcribe(audio_path, language='it')
            return result['text']
        except Exception as e:
            return f"[STT Error] {e}"

# Test
if __name__ == "__main__":
    stt = WhisperSTT()
    testo = stt.transcribe("sample_audio.wav")
    print("Trascrizione:", testo)

### --- modules/voice_bridge/text_to_speech.py --- ###
"""Simple gTTS based TTS engine."""
from gtts import gTTS
import os
import tempfile

class TextToSpeech:
    def __init__(self, lang: str = "it"):
        self.lang = lang

    def speak(self, text: str):
        tts = gTTS(text=text, lang=self.lang)
        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as f:
            tts.save(f.name)
            os.system(f"mpg123 -q {f.name}" if os.name != "nt" else f"start {f.name}")

### --- modules/voice_bridge/tts_engine.py --- ###
# modules/voice_bridge/tts_engine.py
"""
Modulo: tts_engine.py
Descrizione: Motore TTS basato su pyttsx3 per la sintesi vocale offline.
"""
from modules.speech import TextToSpeech

class Pyttsx3TTS(TextToSpeech):
    """
    Wrapper per il motore di sintesi vocale pyttsx3 (alias di TextToSpeech).
    """
    def __init__(self, voice_id=None):
        super().__init__(voice_id=voice_id)

### --- modules/voice_bridge/voice_loop.py --- ###
"""Interactive voice loop using Whisper STT and gTTS."""
import os
from modules.voice_bridge.speech_to_text import WhisperSTT
from modules.voice_bridge.text_to_speech import TextToSpeech


def start_listening():
    stt = WhisperSTT()
    tts = TextToSpeech()
    print("[VOICE] Say 'exit' to stop. Provide path to .wav file for recognition.")
    while True:
        path = input("Audio file> ")
        if path.strip().lower() == "exit":
            break
        if not os.path.exists(path):
            print("File not found")
            continue
        text = stt.transcribe(path)
        print("[STT]", text)
        tts.speak(text)

### --- modules/voice_bridge/whisper_interface.py --- ###
"""
Modulo: whisper_interface
Descrizione: Interfaccia locale per trascrizione vocale usando Whisper (stub).
Autore: Mercurius∞ AI Engineer
"""

class WhisperSTT:
    def __init__(self):
        self.language = "it"

    def transcribe(self, audio_path: str) -> str:
        """
        Simula la trascrizione vocale di un file audio.
        In una versione reale, chiamerebbe whisper transcribe(audio_path).
        """
        print(f"[WHISPER] Trascrizione simulata del file: {audio_path}")
        return "Questo è un esempio di trascrizione da audio."

# Esempio
if __name__ == "__main__":
    stt = WhisperSTT()
    testo = stt.transcribe("demo.wav")
    print(f"Risultato: {testo}")

### --- monitoring/__init__.py --- ###


### --- monitoring/health_check.py --- ###
# monitoring/health_check.py

"""
Modulo: health_check.py
Descrizione: Endpoint di salute (liveness/readiness) per Mercurius∞ via FastAPI.
Espone:
  • GET /health → {"status": "ok", "uptime_sec": N}
  • GET /ready  → {"ready": true|false}

L'endpoint /health restituisce sempre "ok" finché il processo è in esecuzione,
mentre /ready diventa True solo se la variabile d'ambiente MERCURIUS_READY è settata a "true",
ad esempio quando l'orchestrator ha completato l'avvio completo di GENESIS_MODE.
"""

import os
from datetime import datetime

import uvicorn
from fastapi import FastAPI

app = FastAPI(title="Mercurius∞ HealthCheck")
START_TIME = datetime.utcnow()


@app.get("/health")
def health():
    """
    Liveness probe:
    Restituisce sempre {"status": "ok", "uptime_sec": N}, dove N è il numero
    di secondi trascorsi dall'avvio di questo servizio.
    """
    uptime = (datetime.utcnow() - START_TIME).seconds
    return {"status": "ok", "uptime_sec": uptime}


@app.get("/ready")
def ready():
    """
    Readiness probe:
    Verifica se la variabile d'ambiente MERCURIUS_READY è impostata a "true".
    Restituisce {"ready": true} solo in quel caso, altrimenti {"ready": false}.
    Questo consente di segnalare che l'orchestrator (o il modulo GENESIS) è completamente avviato.
    """
    ready_flag = os.getenv("MERCURIUS_READY", "false").lower() == "true"
    return {"ready": ready_flag}


if __name__ == "__main__":
    # Esegue il server FastAPI su tutte le interfacce di rete (0.0.0.0) alla porta 8080
    uvicorn.run(app, host="0.0.0.0", port=8080)

### --- monitoring/log_dashboard.py --- ###
# monitoring/log_dashboard.py

"""
Modulo: log_dashboard.py
Descrizione: Dashboard Streamlit per visualizzare in tempo reale l’Audit Log di Mercurius∞.
Espone una tabella che mostra le ultime righe di “logs/audit_log.jsonl” e si aggiorna ogni 2 secondi.
"""

import json
from pathlib import Path

import streamlit as st

# Percorso del file di log in formato JSON Lines
LOG_FILE = Path("logs/audit_log.jsonl")

# Configurazione della pagina Streamlit
st.set_page_config(layout="wide", page_title="Mercurius∞ – Audit Log Live")
st.title("🛡️ Mercurius∞ – Live Audit Log")

# Placeholder che verrà rimpiazzato con la tabella dei log
placeholder = st.empty()


def tail_log(n: int = 200):
    """
    Legge le ultime `n` righe del file di log (se presente) e le restituisce
    come lista di dizionari JSON. Se il file non esiste, ritorna lista vuota.

    :param n: numero di righe finali da leggere (default 200)
    :return: lista di oggetti (dict) corrispondenti alle righe JSON più recenti
    """
    if not LOG_FILE.exists():
        return []
    # Legge tutto il testo del file, lo divide per righe e ne restituisce le ultime n
    lines = LOG_FILE.read_text(encoding="utf-8").splitlines()[-n:]
    return [json.loads(line) for line in lines]


# Loop infinito: ogni 2 secondi aggiorna la tabella con gli ultimi log
while True:
    data = tail_log()
    placeholder.table(data)
    st.sleep(2)

### --- monitoring/metrics_exporter.py --- ###
# monitoring/metrics_exporter.py

"""
Modulo: metrics_exporter.py
Descrizione: Esporta metriche Prometheus per Mercurius∞ (HTTP 9100/metrics).
Raccoglie l’utilizzo di CPU e memoria e le espone come metriche Prometheus.

Metriche disponibili:
  • mercurius_cpu_usage_percent  → Percentuale di utilizzo CPU
  • mercurius_mem_usage_mb      → Memoria usata in MB

Il servizio HTTP di Prometheus viene avviato sulla porta 9100 all’esecuzione dello script.
Le metriche vengono aggiornate ogni 5 secondi.
"""

import time

import psutil
from prometheus_client import Gauge, start_http_server

# Creazione dei gauge Prometheus
CPU_USAGE = Gauge("mercurius_cpu_usage_percent", "CPU usage in percent")
MEM_USAGE = Gauge("mercurius_mem_usage_mb", "Memory usage in MB")


def collect_metrics():
    """
    Raccoglie le metriche di sistema:
      - CPU usage percentuale (valore 0-100)
      - Memoria usata in Megabyte (RAM utilizzata dal sistema)
    e aggiorna i corrispondenti Gauge Prometheus.
    """
    CPU_USAGE.set(psutil.cpu_percent())
    MEM_USAGE.set(psutil.virtual_memory().used / 1024 / 1024)


if __name__ == "__main__":
    # Avvia il server HTTP per Prometheus sulla porta 9100.
    # L’endpoint esposto sarà accessibile su http://<host>:9100/metrics
    start_http_server(9100)

    # Loop infinito: ogni 5 secondi raccoglie e aggiorna le metriche
    while True:
        collect_metrics()
        time.sleep(5)

### --- node_modules/.package-lock.json --- ###
{
  "name": "mercurius_infinite_final",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "node_modules/@types/react": {
      "version": "19.1.6",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-19.1.6.tgz",
      "integrity": "sha512-JeG0rEWak0N6Itr6QUx+X60uQmN+5t3j9r/OVDtWzFXKaj6kD1BwJzOksD0FF6iWxZlbE1kB0q9vtnU2ekqa1Q==",
      "license": "MIT",
      "dependencies": {
        "csstype": "^3.0.2"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "license": "MIT"
    },
    "node_modules/react": {
      "version": "19.1.0",
      "resolved": "https://registry.npmjs.org/react/-/react-19.1.0.tgz",
      "integrity": "sha512-FS+XFBNvn3GTAWq26joslQgWNoFu08F4kl0J4CgdNKADkdSGXQyTCnKteIAJy96Br6YbpEU1LSzV5dYtjMkMDg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    }
  }
}

### --- node_modules/@types/react/README.md --- ###
# Installation
> `npm install --save @types/react`

# Summary
This package contains type definitions for react (https://react.dev/).

# Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react.

### Additional Details
 * Last updated: Tue, 27 May 2025 08:02:50 GMT
 * Dependencies: [csstype](https://npmjs.com/package/csstype)

# Credits
These definitions were written by [Asana](https://asana.com), [AssureSign](http://www.assuresign.com), [Microsoft](https://microsoft.com), [John Reilly](https://github.com/johnnyreilly), [Benoit Benezech](https://github.com/bbenezech), [Patricio Zavolinsky](https://github.com/pzavolinsky), [Eric Anderson](https://github.com/ericanderson), [Dovydas Navickas](https://github.com/DovydasNavickas), [Josh Rutherford](https://github.com/theruther4d), [Guilherme Hübner](https://github.com/guilhermehubner), [Ferdy Budhidharma](https://github.com/ferdaber), [Johann Rakotoharisoa](https://github.com/jrakotoharisoa), [Olivier Pascal](https://github.com/pascaloliv), [Martin Hochel](https://github.com/hotell), [Frank Li](https://github.com/franklixuefei), [Jessica Franco](https://github.com/Jessidhia), [Saransh Kataria](https://github.com/saranshkataria), [Kanitkorn Sujautra](https://github.com/lukyth), [Sebastian Silbermann](https://github.com/eps1lon), [Kyle Scully](https://github.com/zieka), [Cong Zhang](https://github.com/dancerphil), [Dimitri Mitropoulos](https://github.com/dimitropoulos), [JongChan Choi](https://github.com/disjukr), [Victor Magalhães](https://github.com/vhfmag), [Priyanshu Rav](https://github.com/priyanshurav), [Dmitry Semigradsky](https://github.com/Semigradsky), and [Matt Pocock](https://github.com/mattpocock).

### --- node_modules/@types/react/package.json --- ###
{
    "name": "@types/react",
    "version": "19.1.6",
    "description": "TypeScript definitions for react",
    "homepage": "https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react",
    "license": "MIT",
    "contributors": [
        {
            "name": "Asana",
            "url": "https://asana.com"
        },
        {
            "name": "AssureSign",
            "url": "http://www.assuresign.com"
        },
        {
            "name": "Microsoft",
            "url": "https://microsoft.com"
        },
        {
            "name": "John Reilly",
            "githubUsername": "johnnyreilly",
            "url": "https://github.com/johnnyreilly"
        },
        {
            "name": "Benoit Benezech",
            "githubUsername": "bbenezech",
            "url": "https://github.com/bbenezech"
        },
        {
            "name": "Patricio Zavolinsky",
            "githubUsername": "pzavolinsky",
            "url": "https://github.com/pzavolinsky"
        },
        {
            "name": "Eric Anderson",
            "githubUsername": "ericanderson",
            "url": "https://github.com/ericanderson"
        },
        {
            "name": "Dovydas Navickas",
            "githubUsername": "DovydasNavickas",
            "url": "https://github.com/DovydasNavickas"
        },
        {
            "name": "Josh Rutherford",
            "githubUsername": "theruther4d",
            "url": "https://github.com/theruther4d"
        },
        {
            "name": "Guilherme Hübner",
            "githubUsername": "guilhermehubner",
            "url": "https://github.com/guilhermehubner"
        },
        {
            "name": "Ferdy Budhidharma",
            "githubUsername": "ferdaber",
            "url": "https://github.com/ferdaber"
        },
        {
            "name": "Johann Rakotoharisoa",
            "githubUsername": "jrakotoharisoa",
            "url": "https://github.com/jrakotoharisoa"
        },
        {
            "name": "Olivier Pascal",
            "githubUsername": "pascaloliv",
            "url": "https://github.com/pascaloliv"
        },
        {
            "name": "Martin Hochel",
            "githubUsername": "hotell",
            "url": "https://github.com/hotell"
        },
        {
            "name": "Frank Li",
            "githubUsername": "franklixuefei",
            "url": "https://github.com/franklixuefei"
        },
        {
            "name": "Jessica Franco",
            "githubUsername": "Jessidhia",
            "url": "https://github.com/Jessidhia"
        },
        {
            "name": "Saransh Kataria",
            "githubUsername": "saranshkataria",
            "url": "https://github.com/saranshkataria"
        },
        {
            "name": "Kanitkorn Sujautra",
            "githubUsername": "lukyth",
            "url": "https://github.com/lukyth"
        },
        {
            "name": "Sebastian Silbermann",
            "githubUsername": "eps1lon",
            "url": "https://github.com/eps1lon"
        },
        {
            "name": "Kyle Scully",
            "githubUsername": "zieka",
            "url": "https://github.com/zieka"
        },
        {
            "name": "Cong Zhang",
            "githubUsername": "dancerphil",
            "url": "https://github.com/dancerphil"
        },
        {
            "name": "Dimitri Mitropoulos",
            "githubUsername": "dimitropoulos",
            "url": "https://github.com/dimitropoulos"
        },
        {
            "name": "JongChan Choi",
            "githubUsername": "disjukr",
            "url": "https://github.com/disjukr"
        },
        {
            "name": "Victor Magalhães",
            "githubUsername": "vhfmag",
            "url": "https://github.com/vhfmag"
        },
        {
            "name": "Priyanshu Rav",
            "githubUsername": "priyanshurav",
            "url": "https://github.com/priyanshurav"
        },
        {
            "name": "Dmitry Semigradsky",
            "githubUsername": "Semigradsky",
            "url": "https://github.com/Semigradsky"
        },
        {
            "name": "Matt Pocock",
            "githubUsername": "mattpocock",
            "url": "https://github.com/mattpocock"
        }
    ],
    "main": "",
    "types": "index.d.ts",
    "typesVersions": {
        "<=5.0": {
            "*": [
                "ts5.0/*"
            ]
        }
    },
    "exports": {
        ".": {
            "types@<=5.0": {
                "default": "./ts5.0/index.d.ts"
            },
            "types": {
                "default": "./index.d.ts"
            }
        },
        "./canary": {
            "types@<=5.0": {
                "default": "./ts5.0/canary.d.ts"
            },
            "types": {
                "default": "./canary.d.ts"
            }
        },
        "./compiler-runtime": {
            "types": {
                "default": "./compiler-runtime.d.ts"
            }
        },
        "./experimental": {
            "types@<=5.0": {
                "default": "./ts5.0/experimental.d.ts"
            },
            "types": {
                "default": "./experimental.d.ts"
            }
        },
        "./jsx-runtime": {
            "types@<=5.0": {
                "default": "./ts5.0/jsx-runtime.d.ts"
            },
            "types": {
                "default": "./jsx-runtime.d.ts"
            }
        },
        "./jsx-dev-runtime": {
            "types@<=5.0": {
                "default": "./ts5.0/jsx-dev-runtime.d.ts"
            },
            "types": {
                "default": "./jsx-dev-runtime.d.ts"
            }
        },
        "./package.json": "./package.json"
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/DefinitelyTyped/DefinitelyTyped.git",
        "directory": "types/react"
    },
    "scripts": {},
    "dependencies": {
        "csstype": "^3.0.2"
    },
    "peerDependencies": {},
    "typesPublisherContentHash": "d69364f7ca8310f5e294400f1e12adb95cd625cef54bf527da66912f3b1c940e",
    "typeScriptVersion": "5.1"
}

### --- node_modules/csstype/README.md --- ###
# CSSType

[![npm](https://img.shields.io/npm/v/csstype.svg)](https://www.npmjs.com/package/csstype)

TypeScript and Flow definitions for CSS, generated by [data from MDN](https://github.com/mdn/data). It provides autocompletion and type checking for CSS properties and values.

**TypeScript**

```ts
import type * as CSS from 'csstype';

const style: CSS.Properties = {
  colour: 'white', // Type error on property
  textAlign: 'middle', // Type error on value
};
```

**Flow**

```js
// @flow strict
import * as CSS from 'csstype';

const style: CSS.Properties<> = {
  colour: 'white', // Type error on property
  textAlign: 'middle', // Type error on value
};
```

_Further examples below will be in TypeScript!_

## Getting started

```sh
$ npm install csstype
```

## Table of content

- [Style types](#style-types)
- [At-rule types](#at-rule-types)
- [Pseudo types](#pseudo-types)
- [Generics](#generics)
- [Usage](#usage)
- [What should I do when I get type errors?](#what-should-i-do-when-i-get-type-errors)
- [Version 3.0](#version-30)
- [Contributing](#contributing)

## Style types

Properties are categorized in different uses and in several technical variations to provide typings that suits as many as possible.

|                | Default              | `Hyphen`                   | `Fallback`                   | `HyphenFallback`                   |
| -------------- | -------------------- | -------------------------- | ---------------------------- | ---------------------------------- |
| **All**        | `Properties`         | `PropertiesHyphen`         | `PropertiesFallback`         | `PropertiesHyphenFallback`         |
| **`Standard`** | `StandardProperties` | `StandardPropertiesHyphen` | `StandardPropertiesFallback` | `StandardPropertiesHyphenFallback` |
| **`Vendor`**   | `VendorProperties`   | `VendorPropertiesHyphen`   | `VendorPropertiesFallback`   | `VendorPropertiesHyphenFallback`   |
| **`Obsolete`** | `ObsoleteProperties` | `ObsoletePropertiesHyphen` | `ObsoletePropertiesFallback` | `ObsoletePropertiesHyphenFallback` |
| **`Svg`**      | `SvgProperties`      | `SvgPropertiesHyphen`      | `SvgPropertiesFallback`      | `SvgPropertiesHyphenFallback`      |

Categories:

- **All** - Includes `Standard`, `Vendor`, `Obsolete` and `Svg`
- **`Standard`** - Current properties and extends subcategories `StandardLonghand` and `StandardShorthand` _(e.g. `StandardShorthandProperties`)_
- **`Vendor`** - Vendor prefixed properties and extends subcategories `VendorLonghand` and `VendorShorthand` _(e.g. `VendorShorthandProperties`)_
- **`Obsolete`** - Removed or deprecated properties
- **`Svg`** - SVG-specific properties

Variations:

- **Default** - JavaScript (camel) cased property names
- **`Hyphen`** - CSS (kebab) cased property names
- **`Fallback`** - Also accepts array of values e.g. `string | string[]`

## At-rule types

At-rule interfaces with descriptors.

**TypeScript**: These will be found in the `AtRule` namespace, e.g. `AtRule.Viewport`.  
**Flow**: These will be prefixed with `AtRule$`, e.g. `AtRule$Viewport`.

|                      | Default        | `Hyphen`             | `Fallback`             | `HyphenFallback`             |
| -------------------- | -------------- | -------------------- | ---------------------- | ---------------------------- |
| **`@counter-style`** | `CounterStyle` | `CounterStyleHyphen` | `CounterStyleFallback` | `CounterStyleHyphenFallback` |
| **`@font-face`**     | `FontFace`     | `FontFaceHyphen`     | `FontFaceFallback`     | `FontFaceHyphenFallback`     |
| **`@viewport`**      | `Viewport`     | `ViewportHyphen`     | `ViewportFallback`     | `ViewportHyphenFallback`     |

## Pseudo types

String literals of pseudo classes and pseudo elements

- `Pseudos`

  Extends:

  - `AdvancedPseudos`

    Function-like pseudos e.g. `:not(:first-child)`. The string literal contains the value excluding the parenthesis: `:not`. These are separated because they require an argument that results in infinite number of variations.

  - `SimplePseudos`

    Plain pseudos e.g. `:hover` that can only be **one** variation.

## Generics

All interfaces has two optional generic argument to define length and time: `CSS.Properties<TLength = string | 0, TTime = string>`

- **Length** is the first generic parameter and defaults to `string | 0` because `0` is the only [length where the unit identifier is optional](https://drafts.csswg.org/css-values-3/#lengths). You can specify this, e.g. `string | number`, for platforms and libraries that accepts any numeric value as length with a specific unit.
  ```tsx
  const style: CSS.Properties<string | number> = {
    width: 100,
  };
  ```
- **Time** is the second generic argument and defaults to `string`. You can specify this, e.g. `string | number`, for platforms and libraries that accepts any numeric value as length with a specific unit.
  ```tsx
  const style: CSS.Properties<string | number, number> = {
    transitionDuration: 1000,
  };
  ```

## Usage

```ts
import type * as CSS from 'csstype';

const style: CSS.Properties = {
  width: '10px',
  margin: '1em',
};
```

In some cases, like for CSS-in-JS libraries, an array of values is a way to provide fallback values in CSS. Using `CSS.PropertiesFallback` instead of `CSS.Properties` will add the possibility to use any property value as an array of values.

```ts
import type * as CSS from 'csstype';

const style: CSS.PropertiesFallback = {
  display: ['-webkit-flex', 'flex'],
  color: 'white',
};
```

There's even string literals for pseudo selectors and elements.

```ts
import type * as CSS from 'csstype';

const pseudos: { [P in CSS.SimplePseudos]?: CSS.Properties } = {
  ':hover': {
    display: 'flex',
  },
};
```

Hyphen cased (kebab cased) properties are provided in `CSS.PropertiesHyphen` and `CSS.PropertiesHyphenFallback`. It's not **not** added by default in `CSS.Properties`. To allow both of them, you can simply extend with `CSS.PropertiesHyphen` or/and `CSS.PropertiesHyphenFallback`.

```ts
import type * as CSS from 'csstype';

interface Style extends CSS.Properties, CSS.PropertiesHyphen {}

const style: Style = {
  'flex-grow': 1,
  'flex-shrink': 0,
  'font-weight': 'normal',
  backgroundColor: 'white',
};
```

Adding type checked CSS properties to a `HTMLElement`.

```ts
import type * as CSS from 'csstype';

const style: CSS.Properties = {
  color: 'red',
  margin: '1em',
};

let button = document.createElement('button');

Object.assign(button.style, style);
```

## What should I do when I get type errors?

The goal is to have as perfect types as possible and we're trying to do our best. But with CSS Custom Properties, the CSS specification changing frequently and vendors implementing their own specifications with new releases sometimes causes type errors even if it should work. Here's some steps you could take to get it fixed:

_If you're using CSS Custom Properties you can step directly to step 3._

1.  **First of all, make sure you're doing it right.** A type error could also indicate that you're not :wink:

    - Some CSS specs that some vendors has implemented could have been officially rejected or haven't yet received any official acceptance and are therefor not included
    - If you're using TypeScript, [type widening](https://blog.mariusschulz.com/2017/02/04/TypeScript-2-1-literal-type-widening) could be the reason you get `Type 'string' is not assignable to...` errors

2.  **Have a look in [issues](https://github.com/frenic/csstype/issues) to see if an issue already has been filed. If not, create a new one.** To help us out, please refer to any information you have found.
3.  Fix the issue locally with **TypeScript** (Flow further down):

    - The recommended way is to use **module augmentation**. Here's a few examples:

      ```ts
      // My css.d.ts file
      import type * as CSS from 'csstype';

      declare module 'csstype' {
        interface Properties {
          // Add a missing property
          WebkitRocketLauncher?: string;

          // Add a CSS Custom Property
          '--theme-color'?: 'black' | 'white';

          // Allow namespaced CSS Custom Properties
          [index: `--theme-${string}`]: any;
          
          // Allow any CSS Custom Properties
          [index: `--${string}`]: any;

          // ...or allow any other property
          [index: string]: any;
        }
      }
      ```

    - The alternative way is to use **type assertion**. Here's a few examples:

      ```ts
      const style: CSS.Properties = {
        // Add a missing property
        ['WebkitRocketLauncher' as any]: 'launching',

        // Add a CSS Custom Property
        ['--theme-color' as any]: 'black',
      };
      ```

    Fix the issue locally with **Flow**:

    - Use **type assertion**. Here's a few examples:

      ```js
      const style: $Exact<CSS.Properties<*>> = {
        // Add a missing property
        [('WebkitRocketLauncher': any)]: 'launching',

        // Add a CSS Custom Property
        [('--theme-color': any)]: 'black',
      };
      ```

## Version 3.0

- **All property types are exposed with namespace**  
  TypeScript: `Property.AlignContent` (was `AlignContentProperty` before)  
  Flow: `Property$AlignContent`
- **All at-rules are exposed with namespace**  
  TypeScript: `AtRule.FontFace` (was `FontFace` before)  
  Flow: `AtRule$FontFace`
- **Data types are NOT exposed**  
  E.g. `Color` and `Box`. Because the generation of data types may suddenly be removed or renamed.
- **TypeScript hack for autocompletion**  
  Uses `(string & {})` for literal string unions and `(number & {})` for literal number unions ([related issue](https://github.com/microsoft/TypeScript/issues/29729)). Utilize `PropertyValue<T>` to unpack types from e.g. `(string & {})` to `string`.
- **New generic for time**  
  Read more on the ["Generics"](#generics) section.
- **Flow types improvements**  
  Flow Strict enabled and exact types are used.

## Contributing

**Never modify `index.d.ts` and `index.js.flow` directly. They are generated automatically and committed so that we can easily follow any change it results in.** Therefor it's important that you run `$ git config merge.ours.driver true` after you've forked and cloned. That setting prevents merge conflicts when doing rebase.

### Commands

- `npm run build` Generates typings and type checks them
- `npm run watch` Runs build on each save
- `npm run test` Runs the tests
- `npm run lazy` Type checks, lints and formats everything

### --- node_modules/csstype/package.json --- ###
{
  "name": "csstype",
  "version": "3.1.3",
  "main": "",
  "types": "index.d.ts",
  "description": "Strict TypeScript and Flow types for style based on MDN data",
  "repository": "https://github.com/frenic/csstype",
  "author": "Fredrik Nicol <fredrik.nicol@gmail.com>",
  "license": "MIT",
  "devDependencies": {
    "@types/chokidar": "^2.1.3",
    "@types/css-tree": "^2.3.1",
    "@types/jest": "^29.5.0",
    "@types/jsdom": "^21.1.1",
    "@types/node": "^16.18.23",
    "@types/prettier": "^2.7.2",
    "@types/request": "^2.48.8",
    "@types/turndown": "^5.0.1",
    "@typescript-eslint/eslint-plugin": "^5.57.0",
    "@typescript-eslint/parser": "^5.57.0",
    "chalk": "^4.1.2",
    "chokidar": "^3.5.3",
    "eslint": "^8.37.0",
    "css-tree": "^2.3.1",
    "eslint-config-prettier": "^8.8.0",
    "eslint-plugin-prettier": "^4.2.1",
    "fast-glob": "^3.2.12",
    "flow-bin": "^0.203.1",
    "jest": "^29.5.0",
    "jsdom": "^21.1.1",
    "mdn-browser-compat-data": "git+https://github.com/mdn/browser-compat-data.git#1bf44517bd08de735e9ec20dbfe8e86c96341054",
    "mdn-data": "git+https://github.com/mdn/data.git#7f0c865a3c4b5d891285c93308ee5c25cb5cfee8",
    "prettier": "^2.8.7",
    "request": "^2.88.2",
    "ts-jest": "^29.0.5",
    "ts-node": "^10.9.1",
    "turndown": "^7.1.2",
    "typescript": "~5.0.3"
  },
  "scripts": {
    "prepublish": "npm install --prefix __tests__ && npm install --prefix __tests__/__fixtures__",
    "prepublishOnly": "tsc && npm run test:src && npm run build && ts-node --files prepublish.ts",
    "update": "ts-node --files update.ts",
    "build": "ts-node --files build.ts --start",
    "watch": "ts-node --files build.ts --watch",
    "lint": "eslint . --ext .js,.jsx,.ts,.tsx --fix",
    "pretty": "prettier --write build.ts **/*.{ts,js,json,md}",
    "lazy": "tsc && npm run lint",
    "test": "jest --runInBand",
    "test:src": "jest src.*.ts",
    "test:dist": "jest dist.*.ts --runInBand"
  },
  "files": [
    "index.d.ts",
    "index.js.flow"
  ],
  "keywords": [
    "css",
    "style",
    "typescript",
    "flow",
    "typings",
    "types",
    "definitions"
  ]
}

### --- node_modules/react/README.md --- ###
# `react`

React is a JavaScript library for creating user interfaces.

The `react` package contains only the functionality necessary to define React components. It is typically used together with a React renderer like `react-dom` for the web, or `react-native` for the native environments.

**Note:** by default, React will be in development mode. The development version includes extra warnings about common mistakes, whereas the production version includes extra performance optimizations and strips all error messages. Don't forget to use the [production build](https://reactjs.org/docs/optimizing-performance.html#use-the-production-build) when deploying your application.

## Usage

```js
import { useState } from 'react';
import { createRoot } from 'react-dom/client';

function Counter() {
  const [count, setCount] = useState(0);
  return (
    <>
      <h1>{count}</h1>
      <button onClick={() => setCount(count + 1)}>
        Increment
      </button>
    </>
  );
}

const root = createRoot(document.getElementById('root'));
root.render(<Counter />);
```

## Documentation

See https://react.dev/

## API

See https://react.dev/reference/react

### --- node_modules/react/package.json --- ###
{
  "name": "react",
  "description": "React is a JavaScript library for building user interfaces.",
  "keywords": [
    "react"
  ],
  "version": "19.1.0",
  "homepage": "https://react.dev/",
  "bugs": "https://github.com/facebook/react/issues",
  "license": "MIT",
  "files": [
    "LICENSE",
    "README.md",
    "index.js",
    "cjs/",
    "compiler-runtime.js",
    "jsx-runtime.js",
    "jsx-runtime.react-server.js",
    "jsx-dev-runtime.js",
    "jsx-dev-runtime.react-server.js",
    "react.react-server.js"
  ],
  "main": "index.js",
  "exports": {
    ".": {
      "react-server": "./react.react-server.js",
      "default": "./index.js"
    },
    "./package.json": "./package.json",
    "./jsx-runtime": {
      "react-server": "./jsx-runtime.react-server.js",
      "default": "./jsx-runtime.js"
    },
    "./jsx-dev-runtime": {
      "react-server": "./jsx-dev-runtime.react-server.js",
      "default": "./jsx-dev-runtime.js"
    },
    "./compiler-runtime": {
      "react-server": "./compiler-runtime.js",
      "default": "./compiler-runtime.js"
    }
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/facebook/react.git",
    "directory": "packages/react"
  },
  "engines": {
    "node": ">=0.10.0"
  }
}

### --- orchestrator/__init__.py --- ###


### --- orchestrator/autonomy_controller.py --- ###
"""
Modulo: autonomy_controller.py
Descrizione: Gestione autonoma delle esperienze e delle azioni eseguite da Mercurius∞.
Permette di registrare eventi, esiti e attivare modelli di adattamento comportamentale.
Autore: Mercurius∞ AI Engineer
"""

from datetime import datetime
from collections import Counter
from typing import List, Dict, Any


class AutonomyController:
    def __init__(self):
        # lista di dizionari esperienza
        self.experience_log: List[Dict[str, Any]] = []

    # ------------------------------------------------------------------ #
    #                       REGISTRAZIONE ESPERIENZA                     #
    # ------------------------------------------------------------------ #
    def process_experience(
        self,
        action: str,
        outcome: str,
        success: bool,
        context: dict | None = None,
    ) -> Dict[str, Any]:
        """
        Registra un’esperienza di Mercurius∞.

        Ritorna il dizionario esperienza, che ora include la chiave
        “learning” richiesta dai test.
        """
        experience = {
            "timestamp": datetime.utcnow().isoformat(),
            "action": action,
            "outcome": outcome,
            "success": success,
            "context": context or {},
            # feedback di apprendimento elementare
            "learning": (
                "Apprendimento registrato: rinforzo positivo."
                if success
                else "Apprendimento registrato: rinforzo negativo."
            ),
            # riflessione di base sull'esito dell'azione
            "reflection": (
                "successo" if success else "fallimento"
            ),
        }
        self.experience_log.append(experience)
        print(
            f"📒 Esperienza registrata → {action} | Successo: {success} | "
            f"Extra: {context or {}}"
        )
        return experience

    # ------------------------------------------------------------------ #
    #                              UTILITÀ                               #
    # ------------------------------------------------------------------ #
    def get_history(self, limit: int = 5) -> List[Dict[str, Any]]:
        """Restituisce le ultime *limit* esperienze."""
        return self.experience_log[-limit:]

    def reset_memory(self) -> None:
        """Svuota la memoria esperienziale."""
        self.experience_log = []
        print("♻️ Memoria esperienziale resettata.")

    def summary(self) -> None:
        """Stampa a video un breve riassunto delle ultime esperienze."""
        print("🧠 Riassunto Esperienze Recenti:")
        for exp in self.get_history(5):
            print(f"→ [{exp['timestamp']}] {exp['action']} ⇒ {exp['outcome']}")

    # ------------------------------------------------------------------ #
    #                        RIEPILOGO STATISTICO                         #
    # ------------------------------------------------------------------ #
    def summarize_autonomy(self) -> dict:
        """
        Ritorna un riepilogo statistico con la chiave “reflection_summary”
        richiesta dai test end-to-end.
        """
        total = len(self.experience_log)
        successes = sum(e["success"] for e in self.experience_log)
        failures = total - successes
        most_common = Counter(e["action"] for e in self.experience_log).most_common(1)

        return {
            "total": total,
            "success_rate": successes / total if total else 0.0,
            "top_action": most_common[0][0] if most_common else None,
            "reflection_summary": {
                "successes": successes,
                "failures": failures,
            },
        }

    # ------------------------------------------------------------------ #
    #                        INSIGHT GLOBALI (NUOVO)                    #
    # ------------------------------------------------------------------ #
    def report_insights(self) -> dict:
        """
        Restituisce insight globali semplici sulla memoria autonoma:
         - Azioni più frequenti
         - Tassi di successo e fallimento
         - Ultime azioni eseguite
        """
        total = len(self.experience_log)
        if total == 0:
            return {"insight": "Nessuna esperienza registrata."}

        actions = [e["action"] for e in self.experience_log]
        outcomes = [e["outcome"] for e in self.experience_log]
        successes = [e for e in self.experience_log if e["success"]]
        failures = [e for e in self.experience_log if not e["success"]]

        most_common = Counter(actions).most_common(3)
        outcome_types = Counter(outcomes).most_common()

        return {
            "totale_esperienze": total,
            "azioni_frequenti": [a for a, _ in most_common],
            "tasso_successo": round(len(successes) / total, 2),
            "tasso_fallimento": round(len(failures) / total, 2),
            "ultime_azioni": actions[-5:],
            "outcome_summary": outcome_types,
        }


# -------------------------- TEST MANUALE RAPIDO -------------------------- #
if __name__ == "__main__":
    ac = AutonomyController()
    ac.process_experience("saluta", "ok", True, {"note": "inizio"})
    ac.process_experience("richiedi_input", "ok", True)
    ac.process_experience("rispondi", "errore", False)
    print(ac.summarize_autonomy())
    print(ac.report_insights())
    ac.summary()

### --- orchestrator/genesis_orchestrator.py --- ###
"""
Modulo: genesis_orchestrator.py
Descrizione: Coordinamento neurale tra agenti cognitivi (ChatGPT-4, AZR, Ollama3, GPT-4o).
"""

from utils.logger import setup_logger
logger = setup_logger("MercuriusGenesis")

# Agenti cognitivi integrati
from modules.llm.chatgpt_interface import ChatGPTAgent
from modules.llm.ollama3_interface import Ollama3Agent
from modules.llm.azr_reasoner import AZRAgent
from modules.llm.gpt4o_validator import GPT4oAgent

class GenesisOrchestrator:
    def __init__(self):
        self.agents = {
            "chatgpt4": ChatGPTAgent(),
            "ollama3": Ollama3Agent(),
            "azr": AZRAgent(),
            "gpt4o": GPT4oAgent()
        }

    def route_task(self, task: str, context: dict = None) -> dict:
        """
        Analizza il task e lo instrada all'agente più adatto, restituendo il risultato.
        """
        logger.info(f"[GENESIS] Routing del task: {task}")
        if "debug" in task or "logica" in task:
            return self.agents["azr"].analyze(task, context or {})
        elif "sintesi" in task or "finalizza" in task:
            return self.agents["gpt4o"].validate(task, context or {})
        elif "crea codice" in task or "script" in task:
            return self.agents["ollama3"].generate(task, context or {})
        else:
            return self.agents["chatgpt4"].elaborate(task, context or {})

    def coordinated_response(self, task: str) -> dict:
        """
        Ogni agente contribuisce con un parere per un task comune; 
        il sistema seleziona la risposta più coerente tra quelle fornite.
        Se nessuna risposta è valida, attiva fallback evolutivo su AZR.
        """
        logger.info(f"[GENESIS] Task condiviso per risposta congiunta: {task}")
        responses = {
            "chatgpt4": self.agents["chatgpt4"].elaborate(task),
            "ollama3": self.agents["ollama3"].generate(task),
            "azr": self.agents["azr"].analyze(task),
            "gpt4o": self.agents["gpt4o"].validate(task)
        }

        # Valutazione semplice basata su priorità predefinita (in futuro: ponderazione dinamica)
        priority = ["azr", "gpt4o", "chatgpt4", "ollama3"]
        for agent_key in priority:
            resp = str(responses.get(agent_key, "")).lower()
            if responses[agent_key] and "error" not in resp and "errore" not in resp:
                return {"source": agent_key, "response": responses[agent_key]}

        # 🧠 Fallback evolutivo AZR – auto-ragionamento
        logger.warning("⚠️ Nessuna risposta valida disponibile. Attivazione fallback AZR Reasoner...")
        azr_retry = self.agents["azr"].solve(task)  # Metodo custom evolutivo
        if azr_retry and isinstance(azr_retry, dict):
            return {"source": "azr-fallback", "response": azr_retry}
        return {"source": "none", "response": "Nessuna risposta utile nemmeno da fallback AZR."}


if __name__ == "__main__":
    orchestrator = GenesisOrchestrator()
    sample_task = "crea codice per gestire input vocale e risposta testuale"
    result = orchestrator.coordinated_response(sample_task)
    print(f"🎯 Risposta selezionata ({result['source']}):\n{result['response']}")

### --- orchestrator/mission_controller.py --- ###
"""mission_controller.py
Mission Controller per ciclo evolutivo multi-agente.
"""

from __future__ import annotations

import os
import json
from pathlib import Path
from typing import Dict, Any

from orchestrator.genesis_orchestrator import GenesisOrchestrator
from orchestrator.autonomy_controller import AutonomyController
from modules.llm.azr_reasoner import AZRAgent
from modules.gpt_engineer_wrapper import GPTEngineerWrapper
from modules.sandbox_executor.secure_executor import SecureExecutor


class MissionController:
    """Gestisce il ciclo di self-questioning e auto-evoluzione."""

    def __init__(self, base_dir: str = "workspaces") -> None:
        self.base_dir = Path(base_dir)
        self.base_dir.mkdir(exist_ok=True)
        self.genesis = GenesisOrchestrator()
        self.autonomy = AutonomyController()
        self.azr = AZRAgent()
        self.codex = GPTEngineerWrapper(project_path=str(self.base_dir))
        self.executor = SecureExecutor(timeout=5)
        self.workspaces: Dict[str, Dict[str, Any]] = {}
        self.log_file = Path("logs/mission_log.jsonl")
        self.log_file.parent.mkdir(exist_ok=True)

    # ------------------------------------------------------------------ #
    def create_workspace(self, name: str, prompt: str) -> Path:
        """Crea una cartella dedicata e salva il prompt."""
        path = self.base_dir / name
        path.mkdir(exist_ok=True)
        (path / "prompt.txt").write_text(prompt, encoding="utf-8")
        self.workspaces[name] = {"prompt": prompt, "path": path}
        self._log("workspace_created", {"name": name})
        return path

    # ------------------------------------------------------------------ #
    def _log(self, event: str, details: Dict[str, Any]) -> None:
        entry = {"event": event, "details": details}
        with self.log_file.open("a", encoding="utf-8") as f:
            f.write(json.dumps(entry) + "\n")

    # ------------------------------------------------------------------ #
    def run_cycle(self, name: str) -> None:
        """Esegue un ciclo evolutivo sul workspace indicato."""
        ws = self.workspaces.get(name)
        if not ws:
            return
        prompt = ws["prompt"]
        # 1. Reasoner: suggerimenti
        question = f"Come migliorare questo progetto? {prompt}"
        reason_resp = self.genesis.route_task(question)
        self.autonomy.process_experience("reason", "ok", True, {"workspace": name})

        # 2. AZR analizza la risposta
        analysis = self.azr.analyze(reason_resp.get("response", question))
        self.autonomy.process_experience("azr", analysis, True, {"workspace": name})

        # 3. Se AZR suggerisce problemi, genera patch con Codex
        if analysis.startswith("❌"):
            patch = self.codex.generate_project(prompt)
            (ws["path"] / "patch.log").write_text(patch, encoding="utf-8")
            self.autonomy.process_experience("codex_patch", patch, True, {"workspace": name})
            result = self.executor.execute(patch)
            (ws["path"] / "sandbox.log").write_text(str(result), encoding="utf-8")
        self._log("cycle_completed", {"workspace": name})


if __name__ == "__main__":
    mc = MissionController()
    ws = mc.create_workspace("demo", "Genera uno script di esempio")
    mc.run_cycle("demo")

### --- orchestrator/multimodal_controller.py --- ###
# orchestrator/multimodal_controller.py
"""
Modulo: multimodal_controller.py
Responsabilità: Gestione integrata di input multimodali (voce, gesti) e pianificazione strategica.
"""
from modules.speech import SpeechToText, TextToSpeech
from modules.gesture import GestureRecognizer
from modules.planner import ActionPlanner
from models.goal_manager import GoalManager
from orchestrator.autonomy_controller import AutonomyController
from modules.ai_kernel.command_interpreter import CommandInterpreter
from typing import Optional

class MultimodalController:
    """
    Orchestratore intelligente per input vocali, gesti e pianificazione autonoma.
    """
    def __init__(self):
        self.speech_in = SpeechToText()
        self.speech_out = TextToSpeech()
        # Inizializza sempre l'interprete comandi
        self.interpreter = CommandInterpreter()
        self.gesture = GestureRecognizer()
        self.planner = ActionPlanner()
        self.goal_mgr = GoalManager()
        self.autonomy = AutonomyController()

    def listen_and_interpret(self, simulate_input: Optional[str] = None) -> dict:
        """
        Ascolta input vocale (o usa una stringa simulata) e lo converte in un comando strutturato.
        """
        if simulate_input:
            text = simulate_input
        else:
            text = self.speech_in.listen()
        self.speech_out.speak(f"Hai detto: {text}")
        return self.interpreter.interpret(text) if self.interpreter else {"action": "ignora"}

    def receive_gesture(self, gesture_name: Optional[str] = None) -> dict:
        """
        Interpreta un gesto manuale (o simulato) in un comando.
        """
        if gesture_name:
            return self.gesture.interpret_gesture(gesture_name)
        else:
            return self.gesture.recognize(None)

    def plan_and_act(self, command: dict):
        """
        Registra un obiettivo, pianifica le azioni e attiva il ciclo cognitivo per eseguirle.
        """
        action = command["action"]
        context = command.get("context", {})
        # Aggiunge l'obiettivo corrente alla lista
        self.goal_mgr.add_goal(action, priority=1, context=context)
        goal = self.goal_mgr.get_next_goal()
        if goal:
            plan = self.planner.generate_plan(goal.name, goal.context)
            # Descrive verbalmente il piano generato
            self.speech_out.speak(self.planner.describe_plan(plan))
            # Esegue ogni step del piano simulando l'azione e registrando l'esperienza
            for step in plan:
                output = f"Eseguo: {step['action']}"
                print(output)
                self.autonomy.process_experience(step["action"], "eseguito", True, step.get("params", {}))
            self.goal_mgr.complete_goal(goal.name)
        else:
            self.speech_out.speak("Nessun obiettivo disponibile.")

    def run_full_cycle(self, input_text: Optional[str] = None, gesture: Optional[str] = None):
        """
        Esegue un ciclo completo multimodale (voce+gesti) dall'input fino all'azione.
        """
        if input_text:
            cmd = self.listen_and_interpret(simulate_input=input_text)
        elif gesture:
            cmd = self.receive_gesture(gesture)
        else:
            self.speech_out.speak("Nessun input fornito.")
            return
        if cmd.get("action") != "ignora":
            self.plan_and_act(cmd)
        else:
            self.speech_out.speak("Non ho capito cosa fare.")

### --- orchestrator/patch_scheduler.py --- ###
# orchestrator/patch_scheduler.py
"""
Modulo: patch_scheduler.py
Descrizione: Avvia periodicamente il SelfPatchEngine per evoluzione autonoma.
"""

import time
import threading
from analytics.self_patch_engine import SelfPatchEngine

class PatchScheduler:
    def __init__(self, interval_hours: int = 24):
        self.engine = SelfPatchEngine()
        self.interval = interval_hours * 3600
        threading.Thread(target=self._loop, daemon=True).start()

    def _loop(self):
        while True:
            try:
                self.engine.apply_patch()
            except Exception as e:
                print(f"⚠️ PatchScheduler error: {e}")
            time.sleep(self.interval)

### --- orchestrator/real_life_controller.py --- ###
# orchestrator/real_life_controller.py
"""
Modulo: real_life_controller.py
Descrizione: Router comandi voce per vita reale (agenda, smart-home, finanze, email)
"""

from integrations.agenda.agenda_manager import AgendaManager
from integrations.smart_home.home_assistant_bridge import HomeAssistantBridge
from personal_finance.finance_tracker import FinanceTracker
from communications.email_assistant import EmailAssistant
from modules.ai_kernel.command_interpreter import CommandInterpreter
from modules.voice_bridge.pyttsx3_tts import Pyttsx3TTS

agenda = AgendaManager()
home = HomeAssistantBridge()
fin = FinanceTracker()
mail = EmailAssistant()
tts = Pyttsx3TTS()
interp = CommandInterpreter()

def execute(command: str):
    cmd = interp.interpret(command)
    act = cmd.get("action")
    ctx = cmd.get("context", {})
    if act == "saluta":
        tts.speak("Ciao! Come posso aiutarti?")
    elif act == "apri_app":
        app = ctx.get("app")
        tts.speak(f"Apro {app}")
    elif act == "mostra_dati":
        month = fin.monthly_summary()
        tts.speak(f"Spese del mese: {month}")
    else:
        tts.speak("Comando non riconosciuto.")

if __name__ == "__main__":
    while True:
        txt = input("🗣️> ")
        execute(txt)

### --- orchestrator/router_integration.py --- ###
# orchestrator/router_integration.py
"""
Modulo: router_integration.py
Descrizione: Integrazione del nuovo AgentRouter nel GenesisOrchestrator.
"""

from cognition.cognitive_map import CognitiveMap
from cognition.task_memory import TaskMemory
from cognition.agent_router import AgentRouter
from orchestrator.genesis_orchestrator import GenesisOrchestrator

# Crea mappa e memory globali
c_map = CognitiveMap()
t_memory = TaskMemory()

# Registra gli agenti cognitivi principali
for name, typ in [
    ("ChatGPTAgent", "cognitive"),
    ("Ollama3Agent", "cognitive"),
    ("AZRAgent", "cognitive"),
    ("GPT4oAgent", "cognitive"),
    ("AdaptiveTrader", "trading"),
]:
    c_map.add_agent(name, typ)

router = AgentRouter(c_map, t_memory)
core = GenesisOrchestrator()


def run_task(task: str):
    agent_name = router.choose_agent(task)
    print(f"🔀 Router seleziona: {agent_name} per → {task}")
    response = core.route_task(task)
    success = "errore" not in str(response).lower()
    router.record_result(agent_name, task, success)
    return response


if __name__ == "__main__":
    while True:
        txt = input("Task> ")
        print(run_task(txt))

### --- orchestrator/sentient_mode.py --- ###
# orchestrator/sentient_mode.py
"""
Modulo: sentient_mode.py
Descrizione: Integrazione della modalità consapevole dentro Mercurius∞.
Avvia ReflectionLoop e gestisce IntentionManager in background.
"""

import threading
import time
from consciousness.reflection_loop import ReflectionLoop
from consciousness.intention_manager import IntentionManager

class SentientMode:
    def __init__(self, reflection_hour: int = 23):
        self.reflection = ReflectionLoop()
        self.intentions = IntentionManager()
        self.reflection_hour = reflection_hour
        # thread giornaliero
        threading.Thread(target=self._daily_routine, daemon=True).start()

    def _daily_routine(self):
        while True:
            now = time.gmtime()
            if now.tm_hour == self.reflection_hour and now.tm_min == 0:
                self.reflection.write_daily()
                time.sleep(60)  # evita doppio trigger
            time.sleep(30)

    # API esterna
    def add_intention(self, desc: str):
        self.intentions.add_intention(desc)

    def list_intentions(self):
        return self.intentions.active_intentions()


if __name__ == "__main__":
    sm = SentientMode()
    sm.add_intention("Migliorare la precisione del modulo trading del 5%")
    while True:
        time.sleep(3600)

### --- package-lock.json --- ###
{
  "name": "mercurius_infinite_final",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "dependencies": {
        "@types/react": "^19.1.6",
        "react": "^19.1.0"
      }
    },
    "node_modules/@types/react": {
      "version": "19.1.6",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-19.1.6.tgz",
      "integrity": "sha512-JeG0rEWak0N6Itr6QUx+X60uQmN+5t3j9r/OVDtWzFXKaj6kD1BwJzOksD0FF6iWxZlbE1kB0q9vtnU2ekqa1Q==",
      "license": "MIT",
      "dependencies": {
        "csstype": "^3.0.2"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "license": "MIT"
    },
    "node_modules/react": {
      "version": "19.1.0",
      "resolved": "https://registry.npmjs.org/react/-/react-19.1.0.tgz",
      "integrity": "sha512-FS+XFBNvn3GTAWq26joslQgWNoFu08F4kl0J4CgdNKADkdSGXQyTCnKteIAJy96Br6YbpEU1LSzV5dYtjMkMDg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    }
  }
}

### --- package.json --- ###
{
  "dependencies": {
    "@types/react": "^19.1.6",
    "react": "^19.1.0"
  }
}

### --- personal_finance/__init__.py --- ###


### --- personal_finance/finance_tracker.py --- ###
# personal_finance/finance_tracker.py
"""
Modulo: finance_tracker.py
Descrizione: Traccia spese personali da CSV/JSON e genera report mensile.
"""

import pandas as pd
from pathlib import Path
from datetime import datetime

DATA_FILE = Path("personal_finance/expenses.csv")
DATA_FILE.parent.mkdir(parents=True, exist_ok=True)

class FinanceTracker:
    def __init__(self):
        if DATA_FILE.exists():
            self.df = pd.read_csv(DATA_FILE)
        else:
            self.df = pd.DataFrame(columns=["date", "category", "amount", "note"])

    def add_expense(self, amount: float, category: str, note: str = ""):
        new = {"date": datetime.utcnow().date(), "category": category, "amount": amount, "note": note}
        self.df = self.df.append(new, ignore_index=True)
        self.df.to_csv(DATA_FILE, index=False)

    def monthly_summary(self, month: str | None = None):
        month = month or datetime.utcnow().strftime("%Y-%m")
        df_month = self.df[self.df["date"].astype(str).str.startswith(month)]
        return df_month.groupby("category")["amount"].sum().to_dict()

### --- print_tree.py --- ###
import os

def print_tree(startpath, file=None):
    for root, dirs, files in os.walk(startpath):
        level = root.replace(startpath, '').count(os.sep)
        indent = ' ' * 4 * level
        line = f"{indent}📁 {os.path.basename(root)}"
        print(line) if file is None else print(line, file=file)
        subindent = ' ' * 4 * (level + 1)
        for f in files:
            fline = f"{subindent}- {f}"
            print(fline) if file is None else print(fline, file=file)

if __name__ == "__main__":
    with open("mercurius_tree.txt", "w", encoding="utf-8") as out_file:
        print("📂 Mercurius∞ Project Structure", file=out_file)
        print("=" * 40, file=out_file)
        print_tree(".", file=out_file)

### --- project_tree.txt --- ###
PROJECT TREE
mercurius_infinite_final/
    .gitignore
    =3.20,
    CHANGELOG.md
    Dockerfile
    README.md
    ai_launcher.py
    dashboard.py
    dashboard_streamlit.py
    docker-compose.override.yml
    docker-compose.yml
    file_albero_locale.txt
    goals.txt
    install_mercurius_note.sh
    list_files.py
    main.py
    package-lock.json
    package.json
    print_tree.py
    prompt_commands.txt
    pyproject.toml
    pytest.ini
    requirements.txt
    seleziona_cartella.py
    setup.py
    start_fullmode.py
    start_voice_interface.py
    task_manager_cli.py
    test_exp.json
    .github/
        workflows/
            mercurius_ci.yml
    AutoGPT/
    agents/
        __init__.py
        adaptive_trader.py
        agent_comm.py
        agent_generator.py
        azr.py
        azr_server.py
        memory_manager.py
        ollama.py
        openai.py
        azr/
            azr_supervisor.py
    analytics/
        __init__.py
        behavior_logger.py
        meta_learner.py
        neuro_optimizer.py
        self_patch_engine.py
    cognition/
        __init__.py
        agent_router.py
        cognitive_map.py
        task_memory.py
    communications/
        __init__.py
        email_assistant.py
    config/
        config.yaml
        config_schema.py
        config_validator.py
        genesis_config.yaml
        prod_settings.yaml
        self_profile.yaml
    consciousness/
        __init__.py
        core_self.py
        intention_manager.py
        reflection_loop.py
    core/
        __init__.py
        auto_tester.py
        auto_updater.py
        context_adapter.py
        deploy_trigger.py
        dialogue_manager.py
        emotion_analyzer.py
        executor.py
        genesis_trigger.py
        learning.py
        orchestrator.py
        pipeline_controller.py
        sandbox_executor.py
        self_generator.py
        self_mission.py
        self_reflection.py
        self_tuner.py
        sensory_bus.py
        sleep_monitor.py
        system_bridge.py
        thinking_loop.py
    culture/
        base_manifesto.md
        culture_manager.py
    dashboard/
        __init__.py
        genesis_monitor.py
    data/
        feature_engineering.py
        learning_pulses.json
        market_data_handler.py
    deploy/
        __init__.py
        deployment_handler.py
        env_checker.py
        rollout_validator.py
    deployment/
        __init__.py
        aion_api.py
        autostart_manager.py
        remote_access.py
        task_scheduler.py
        telemetry_monitor.py
    dia/
    docs/
        ARCHITECTURE.md
        USAGE_GUIDE.md
    evolution/
        auto_updater.py
        behavior_simulator.py
        logic_injector.py
        neural_plasticity.py
        open_evolve.py
        openalpha_evolve.py
        pwb_alphaevolve.py
        web_scraper.py
    exports/
        README.txt
        build_dashboard.py
        build_mac.sh
        build_win.bat
    flutter/
    generated_agents/
        ApprendimentoGenericoAgent.py
        __init__.py
    genesis_core/
        autogpt_bridge.py
    githooks/
        post-merge
        post-merge.bat
    installer/
        package_builder.py
    integrations/
        README.md
        __init__.py
        bridge_josch.py
        colab_linker.py
        finviz_connector.py
        system_control.py
        tradingview_feed.py
        agenda/
            __init__.py
            agenda_manager.py
        smart_home/
            __init__.py
            home_assistant_bridge.py
    interface/
        dashboard_stub.py
        genesis_bridge.py
    interop/
        colab_bridge.py
        github_handler.py
        local_controller.py
    learning/
        __init__.py
        document_parser.py
        video_learner.py
    llm/
        llm_router.py
    logs/
        README.md
        aion_activation_report.md
        self_tuning_report.md
        system.log
        thinking_feed.md
        upgrade_status.md
    memory/
        __init__.py
        dialog_style_profile.json
        episodic_memory.py
        genesis_memory.py
        long_term_memory.py
        memory_core.py
        neural_plasticity.py
        synaptic_log.py
    mercurius_infinite.egg-info/
        PKG-INFO
        SOURCES.txt
        dependency_links.txt
        entry_points.txt
        top_level.txt
    mercurius_infinite_final/
    mobile_jarvis_ui/
        .gitignore
        .metadata
        README.md
        analysis_options.yaml
        pubspec.lock
        pubspec.yaml
        android/
            .gitignore
            build.gradle.kts
            gradle.properties
            settings.gradle.kts
            app/
                build.gradle.kts
                src/
                    debug/
                        AndroidManifest.xml
                    main/
                        AndroidManifest.xml
                        kotlin/
                            com/
                                example/
                                    mobile_jarvis_ui/
                                        MainActivity.kt
                        res/
                            drawable/
                                launch_background.xml
                            drawable-v21/
                                launch_background.xml
                            mipmap-hdpi/
                                ic_launcher.png
                            mipmap-mdpi/
                                ic_launcher.png
                            mipmap-xhdpi/
                                ic_launcher.png
                            mipmap-xxhdpi/
                                ic_launcher.png
                            mipmap-xxxhdpi/
                                ic_launcher.png
                            values/
                                styles.xml
                            values-night/
                                styles.xml
                    profile/
                        AndroidManifest.xml
            build/
                reports/
                    problems/
                        problems-report.html
            gradle/
                wrapper/
                    gradle-wrapper.properties
        assets/
            placeholder.txt
        ios/
            .gitignore
            Flutter/
                AppFrameworkInfo.plist
                Debug.xcconfig
                Release.xcconfig
            Runner/
                AppDelegate.swift
                Info.plist
                Runner-Bridging-Header.h
                Assets.xcassets/
                    AppIcon.appiconset/
                        Contents.json
                        Icon-App-1024x1024@1x.png
                        Icon-App-20x20@1x.png
                        Icon-App-20x20@2x.png
                        Icon-App-20x20@3x.png
                        Icon-App-29x29@1x.png
                        Icon-App-29x29@2x.png
                        Icon-App-29x29@3x.png
                        Icon-App-40x40@1x.png
                        Icon-App-40x40@2x.png
                        Icon-App-40x40@3x.png
                        Icon-App-60x60@2x.png
                        Icon-App-60x60@3x.png
                        Icon-App-76x76@1x.png
                        Icon-App-76x76@2x.png
                        Icon-App-83.5x83.5@2x.png
                    LaunchImage.imageset/
                        Contents.json
                        LaunchImage.png
                        LaunchImage@2x.png
                        LaunchImage@3x.png
                        README.md
                Base.lproj/
                    LaunchScreen.storyboard
                    Main.storyboard
            Runner.xcodeproj/
                project.pbxproj
                project.xcworkspace/
                    contents.xcworkspacedata
                    xcshareddata/
                        IDEWorkspaceChecks.plist
                        WorkspaceSettings.xcsettings
                xcshareddata/
                    xcschemes/
                        Runner.xcscheme
            Runner.xcworkspace/
                contents.xcworkspacedata
                xcshareddata/
                    IDEWorkspaceChecks.plist
                    WorkspaceSettings.xcsettings
            RunnerTests/
                RunnerTests.swift
        lib/
            main.dart
        linux/
            .gitignore
            CMakeLists.txt
            flutter/
                CMakeLists.txt
                generated_plugin_registrant.cc
                generated_plugin_registrant.h
                generated_plugins.cmake
            runner/
                CMakeLists.txt
                main.cc
                my_application.cc
                my_application.h
        macos/
            .gitignore
            Flutter/
                Flutter-Debug.xcconfig
                Flutter-Release.xcconfig
                GeneratedPluginRegistrant.swift
            Runner/
                AppDelegate.swift
                DebugProfile.entitlements
                Info.plist
                MainFlutterWindow.swift
                Release.entitlements
                Assets.xcassets/
                    AppIcon.appiconset/
                        Contents.json
                        app_icon_1024.png
                        app_icon_128.png
                        app_icon_16.png
                        app_icon_256.png
                        app_icon_32.png
                        app_icon_512.png
                        app_icon_64.png
                Base.lproj/
                    MainMenu.xib
                Configs/
                    AppInfo.xcconfig
                    Debug.xcconfig
                    Release.xcconfig
                    Warnings.xcconfig
            Runner.xcodeproj/
                project.pbxproj
                project.xcworkspace/
                    xcshareddata/
                        IDEWorkspaceChecks.plist
                xcshareddata/
                    xcschemes/
                        Runner.xcscheme
            Runner.xcworkspace/
                contents.xcworkspacedata
                xcshareddata/
                    IDEWorkspaceChecks.plist
            RunnerTests/
                RunnerTests.swift
        test/
            widget_test.dart
        web/
            favicon.png
            index.html
            manifest.json
            icons/
                Icon-192.png
                Icon-512.png
                Icon-maskable-192.png
                Icon-maskable-512.png
        windows/
            .gitignore
            CMakeLists.txt
            flutter/
                CMakeLists.txt
                generated_plugin_registrant.cc
                generated_plugin_registrant.h
                generated_plugins.cmake
            runner/
                CMakeLists.txt
                Runner.rc
                flutter_window.cpp
                flutter_window.h
                main.cpp
                resource.h
                runner.exe.manifest
                utils.cpp
                utils.h
                win32_window.cpp
                win32_window.h
                resources/
                    app_icon.ico
    models/
        goal_manager.py
        model_trainer.py
        neo_learning.py
        neural_network.py
        metrics/
            performance_metrics.py
    modules/
        __init__.py
        autogen_chat.py
        chatgpt_interface.py
        crewai_team.py
        feedback_loop.py
        fingpt_analyzer.py
        finrl_agent.py
        freqtrade_bot.py
        gesture.py
        goal_manager.py
        gpt4o_interface.py
        gpt_engineer_wrapper.py
        gpt_task_router.py
        hf_tools_manager.py
        leonai_bridge.py
        localai_executor.py
        meta_team_agent.py
        n8n_connector.py
        network_analyzer.py
        nlp.py
        ollama3_interface.py
        openbb_terminal.py
        planner.py
        qlib_quant.py
        reasoner_dispatcher.py
        speech.py
        superagi_agent.py
        supervisor.py
        task_manager_cli.py
        url_learner.py
        AZR/
            __init__.py
            fine_tuner.py
            train_model.py
        GPT/
            __init__.py
            gpt_runner.py
            prompt_builder.py
        Leonai/
            __init__.py
            leon_ai.py
        Localai/
            __init__.py
            local_ai.py
        Neo/
            __init__.py
            adaptive_weights.py
            agent_generator.py
            auto_refinement.py
            context_memory.py
            interaction_style.py
            memory_strengthener.py
            neuro_learning_engine.py
            self_awareness.py
            self_reflection.py
            trainer_orchestrator.py
            agent_forge/
                agent_generator.py
            audio/
                emotion_recognizer.py
                hotword_detector.py
                tts_engine.py
            cognitive_simulation/
                cognitive_simulator.py
            consciousness/
                self_awareness.py
            docgen/
                auto_docgen.py
            hierarchy_manager/
                hierarchy_controller.py
            identity/
                personality_engine.py
            memory/
                conversation_memory.py
            strategic_coordinator/
                strategic_coordinator.py
            vision/
                visual_input.py
        Ollama3/
            __init__.py
            parse_response.py
            prompt_builder.py
            run_ollama.py
        Reasoner/
            __init__.py
            context_analyzer.py
            logic_chain.py
            meta_reasoner.py
            reasoning_core.py
            strategic/
                intuition_engine.py
        agents/
            organizer_core.py
        ai_kernel/
            agent_core.py
            agent_plugin.py
            cognitive_integration.py
            command_interpreter.py
            context_adapter.py
            goal_manager.py
            lang_reasoner.py
            strategic_coordinator.py
        codex/
            codex_cli.py
        dashboard/
            __init__.py
            control_center.py
            control_panel.py
            dashboard_streamlit.py
            dashboard_utils.py
            futuristic_gui.py
            hud.css
            keyboard_dropdown.py
            mission_gui.py
        evolution/
            ai2ui_adapter.py
            auto_gpt.py
            gpt_engineer.py
            metagpt.py
        experience/
            __init__.py
            azr_analyzer.py
            experience_memory.py
        io_modules/
            mobile_connect.py
        llm/
            azr_reasoner.py
            chatgpt_interface.py
            gpt4o_validator.py
            ollama3_interface.py
        local/
            README.md
            github_sync.py
            huggingface_tools.py
            leon_ai_bridge.py
            localai_adapter.py
            n8n_connector.py
        messaging/
            __init__.py
            rabbitmq_messenger.py
        mobile/
            note_interface.py
        mobile_flutter/
            __init__.py
            flutter_bridge.py
        optional/
            elevenlabs_tts.py
            huggingface_tools.py
            n8n_connector.py
            plugin_manager.py
            vosk_stt.py
        sandbox_executor/
            secure_executor.py
        start_fullmode/
            initializer.py
        strategic/
            __init__.py
            strategic_brain.py
            strategic_runner.py
        stream_vision/
            __init__.py
            video_pipeline.py
        stream_voice/
            __init__.py
        vision_audio/
            __init__.py
            note10_jarvis_bridge.py
        voice_bridge/
            activation_hook.py
            audio_interface.py
            dia_model_mock.py
            multimodal_controller.py
            nari_dia_tts.py
            pyttsx3_tts.py
            speech_to_text.py
            text_to_speech.py
            tts_engine.py
            voice_loop.py
            whisper_interface.py
    monitoring/
        __init__.py
        health_check.py
        log_dashboard.py
        metrics_exporter.py
    node_modules/
        .package-lock.json
        @types/
            react/
                LICENSE
                README.md
                canary.d.ts
                compiler-runtime.d.ts
                experimental.d.ts
                global.d.ts
                index.d.ts
                jsx-dev-runtime.d.ts
                jsx-runtime.d.ts
                package.json
                ts5.0/
                    canary.d.ts
                    experimental.d.ts
                    global.d.ts
                    index.d.ts
                    jsx-dev-runtime.d.ts
                    jsx-runtime.d.ts
                    v18/
                        global.d.ts
                        index.d.ts
                        jsx-dev-runtime.d.ts
                        jsx-runtime.d.ts
                        ts5.0/
                            global.d.ts
                            index.d.ts
                            jsx-dev-runtime.d.ts
                            jsx-runtime.d.ts
        csstype/
            LICENSE
            README.md
            index.d.ts
            index.js.flow
            package.json
        react/
            LICENSE
            README.md
            compiler-runtime.js
            index.js
            jsx-dev-runtime.js
            jsx-dev-runtime.react-server.js
            jsx-runtime.js
            jsx-runtime.react-server.js
            package.json
            react.react-server.js
            cjs/
                react-compiler-runtime.development.js
                react-compiler-runtime.production.js
                react-compiler-runtime.profiling.js
                react-jsx-dev-runtime.development.js
                react-jsx-dev-runtime.production.js
                react-jsx-dev-runtime.profiling.js
                react-jsx-dev-runtime.react-server.development.js
                react-jsx-dev-runtime.react-server.production.js
                react-jsx-runtime.development.js
                react-jsx-runtime.production.js
                react-jsx-runtime.profiling.js
                react-jsx-runtime.react-server.development.js
                react-jsx-runtime.react-server.production.js
                react.development.js
                react.production.js
                react.react-server.development.js
                react.react-server.production.js
    orchestrator/
        __init__.py
        autonomy_controller.py
        genesis_orchestrator.py
        mission_controller.py
        multimodal_controller.py
        patch_scheduler.py
        real_life_controller.py
        router_integration.py
        sentient_mode.py
    personal_finance/
        __init__.py
        finance_tracker.py
    rag/
        insight_rag.py
    safety/
        __init__.py
        audit_logger.py
        human_override.py
        policies.yaml
        policy_manager.py
        safety_guard.py
    scheduler/
        auto_scheduler.py
        task_registry.py
    scripts/
        activate_hud_mobile.py
        aion_boot.py
        bootstrap_codex.py
        build_prompt.py
        mercurius_control.py
        prompt_panel.py
        start_genesis.py
        update_project_tree.py
    security/
        code_signer.py
        code_verifier.py
        gpg_support.py
        pairing_manager.py
    sensors/
        environment_analyzer.py
        sensor_hub.py
    src/
        mercurius-infinite/
    strategies/
        strategy_executor.py
    tests/
        conftest.py
        run_simulation.py
        test_agent_core.py
        test_audio_interface.py
        test_autonomia_cognitiva.py
        test_end2end.py
        test_initializer.py
        test_josch_bridge.py
        test_logger.py
        test_memory.py
        test_messaging.py
        test_modular_end2end.py
        test_multimodal.py
        test_neuro_learning.py
        test_orchestrator.py
        test_planner.py
        test_policy.py
        test_reasoner_dispatcher.py
        test_secure_executor.py
        test_supervisione.py
        test_task_manager_cli.py
        test_video_pipeline.py
    tools/
        conflict_inspector.py
        console.py
        feedback_collector.py
        live_logger.py
    trading/
        fin_gpt.py
        finrl_agent.py
        freqtrade_agent.py
        openbb_wrapper.py
        qlib_adapter.py
        trading_core.py
    trainer/
        self_trainer.py
        trainer_trigger.py
    updater/
        __init__.py
        auto_updater.py
    utils/
        config_loader.py
        environment.py
        logger.py
        telemetry.py
    vision/
        __init__.py
        capture.py
        image_vision.py
        ip_webcam_vision.py
        object_vision.py
        ocr_module.py
        ocr_reader.py
        voice_trigger.py
        yolo_handler.py
    voice/
        README.md
        __init__.py
        coqui_tts.py
        elevenlabs_tts.py
        nari_tts.py
        stt.py
        tts.py
        voice_bridge.py
        voice_identity.py
        vosk_stt.py
        whisper_engine.py
        whisper_stt.py
        yolov8_engine.py
        engine/
            coqui_tts.py
            elevenlabs_tts.py
            whisper_stt.py

FILE PREVIEW

## CHANGELOG.md

### Ciclo 019
- Creato `hierarchy_controller.py` per definizione core-controller e comunicazioni interne tra agenti

### Ciclo 020
- Creato `strategic_coordinator.py` con mappatura obiettivi, log interazioni e scelta agenti

### Ciclo 021
- Creato modulo `cognitive_simulator.py` per apprendimento esperienziale e adattamento comportamentale

## README.md
# AION – Advanced Intelligence Of Nexus

🔬 **AION** è un sistema AI evolutivo full-stack, autonomo, multimodale e cognitivamente attivo.
Progettato per **apprendere**, **riflettere**, **generare codice** e **interagire** con ambienti complessi in tempo reale.

## 🧠 Caratteristiche Principali

- 🧠 **Autonomia cognitiva** – Apprende da esperienze passate, simula riflessioni e ottimizza strategie.
- 🗺️ **Pianificazione intelligente** – Crea piani operativi e migliora tramite feedback (AZR).
- 🎤 **Multimodalità attiva** – Supporta voce, testo, immagini e input sensoriali reali.
- 🛠️ **Autogenerazione codice** – Scrive e modifica moduli Python in autonomia.
- 📊 **Supervisione interna** – Telemetria cognitiva, metriche performance e logging avanzato.
- 🧩 **Architettura modulare** – Ogni componente è plug&play e indipendente.

---

## 📂 Struttura del Progetto

```plaintext
├── main.py                    # Entry point principale
├── start_fullmode.py         # Avvio completo in modalità "Jarvis+"
├── modules/
│   ├── Neo/                  # Agenti evolutivi, ragionamento e simulazione
│   ├── GPT/                  # Prompting e generazione LLM
│   ├── AZR/                  # Modulo Reasoning e feedback
│   ├── dashboard/            # Interfaccia utente (Tk + Streamlit)
│   └── Reasoner/             # Catene logiche e planning
├── tools/                    # Logger, loader, scheduler, tester
├── config/                   # Configurazioni e ambienti
├── culture/                  # File cognitivi e conoscenza appresa
└── memory/                   # Memoria esperienziale degli agenti

## 🚀 Modalità GENESIS
Per avviare Mercurius∞ con tutti i moduli attivi, eseguire:

```bash
python scripts/aion_boot.py
```

Il comando abilita la rete di agenti (OpenAI, Ollama, AZR), la voce (Whisper + gTTS) e la visione YOLO tramite webcam IP.

## 🛰 Mission Controller Evolutivo
Il file `orchestrator/mission_controller.py` introduce un controller che gestisce un ciclo di self-questioning tra gli agenti (Reasoner, AZR e Codex). Ogni workspace contiene un prompt dedicato e il controller salva log e patch generate in automatico.

Per una prova rapida è disponibile la GUI Streamlit:

```bash
streamlit run modules/dashboard/mission_gui.py
```

Da qui è possibile creare nuovi workspace, avviare il ciclo evolutivo e visualizzare i log della sandbox.

## 🛠 Generazione automatica del prompt per GPT-Engineer

Sono disponibili due script per creare i file di lavoro:

1. `scripts/update_project_tree.py` aggiorna `project_tree.txt` con l'albero del repository e le prime 100 righe dei file di testo.
2. `scripts/build_prompt.py` unisce `project_tree.txt` e `prompt_commands.txt` nel file finale `prompt.txt`.

### Utilizzo manuale

```bash
python scripts/update_project_tree.py
python scripts/build_prompt.py
```

### Integrazione con Git

Per aggiornare automaticamente `project_tree.txt` ad ogni `git pull` o merge:

```bash
# abilita i githook personalizzati
git config core.hooksPath githooks
```

I file `githooks/post-merge` (Linux/macOS) e `githooks/post-merge.bat` (Windows)
invocano lo script di aggiornamento dopo ogni merge.

In alternativa lo script può essere pianificato con `cron` o "Operazioni pianificate" su Windows.


## ai_launcher.py
import subprocess
import requests
import time
import os
from typing import List

from utils.logger import get_file_logger

LOG_FILE = os.path.join("logs", "service_launcher.log")
logger = get_file_logger("ServiceLauncher", LOG_FILE)

def is_service_running(url: str, timeout: int = 2) -> bool:
    """Check if a service responds on the given URL."""
    try:
        response = requests.get(url, timeout=timeout)
        return response.status_code in [200, 401, 403]
    except requests.exceptions.RequestException:
        return False

def launch_service(name: str, url: str, command: List[str], delay: int = 5, retries: int = 5) -> None:
    """Ensure that a service is running, otherwise try to start it."""
    if is_service_running(url):
        logger.info(f"{name} è già attivo su {url}")
        return

    logger.info(f"Avvio {name}: {' '.join(command)}")
    subprocess.Popen(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    for _ in range(retries):
        if is_service_running(url):
            logger.info(f"{name} avviato correttamente.")
            return
        time.sleep(delay)

    logger.error(f"{name} non risponde su {url}")

def ensure_ai_online():
    launch_service("Ollama", "http://localhost:11434", ["ollama", "serve"], delay=3)
    launch_service("Ollama3", "http://localhost:11434/api/tags", ["ollama", "run", "llama3"], delay=3)
    launch_service("AZR", "http://localhost:4010/introspect", ["python", "agents/azr_server.py"], delay=2)
    launch_service("JOSCH", "http://localhost:3020/ping", ["python", "integrations/bridge_josch.py"], delay=2)
    launch_service("n8n", "http://localhost:5678", ["n8n", "start"], delay=4)

if __name__ == "__main__":
    ensure_ai_online()

## dashboard.py
# dashboard.py
"""
Mercurius∞ GUI – Interfaccia interattiva con stream webcam, trascrizione vocale, stato agenti
"""

import sys
import cv2
import threading
import speech_recognition as sr
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QLabel, QPushButton,
    QTextEdit, QListWidget, QHBoxLayout, QSplitter, QGraphicsView, QGraphicsScene
)
from PyQt5.QtCore import Qt, QTimer, QThread, pyqtSignal
from PyQt5.QtGui import QImage, QPixmap


class WebcamThread(QThread):
    frame_ready = pyqtSignal(QImage)

    def run(self):
        cap = cv2.VideoCapture(0)
        while True:
            ret, frame = cap.read()
            if ret:
                rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                h, w, ch = rgb.shape
                img = QImage(rgb.data, w, h, ch * w, QImage.Format_RGB888)
                self.frame_ready.emit(img)


class SpeechThread(QThread):
    result_ready = pyqtSignal(str)

    def run(self):
        recognizer = sr.Recognizer()
        mic = sr.Microphone()
        with mic as source:
            recognizer.adjust_for_ambient_noise(source)
            while True:
                audio = recognizer.listen(source)
                try:
                    text = recognizer.recognize_google(audio, language="it-IT")
                    self.result_ready.emit(text)
                except sr.UnknownValueError:
                    self.result_ready.emit("[...]")
                except sr.RequestError:
                    self.result_ready.emit("❌ Errore STT")


class MercuriusDashboard(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("🧠 Mercurius∞ – Interfaccia Sensoriale")
        self.setGeometry(100, 100, 1040, 640)

        self.menu = QListWidget()
        self.menu.addItems(["Stato", "Agenti", "Memoria", "Voce", "Visione", "Log", "Test"])
        self.menu.currentRowChanged.connect(self.change_section)

        self.content_area = QTextEdit()
        self.content_area.setReadOnly(True)

        self.btn_action = QPushButton("Esegui Comando")
        self.btn_action.clicked.connect(self.execute_action)

        sidebar = QVBoxLayout()
        sidebar.addWidget(QLabel("🔧 Menu"))
        sidebar.addWidget(self.menu)
        sidebar.addWidget(self.btn_action)

        sidebar_widget = QWidget()
        sidebar_widget.setLayout(sidebar)

        self.splitter = QSplitter(Qt.Horizontal)
        self.splitter.addWidget(sidebar_widget)
        self.splitter.addWidget(self.content_area)

        layout = QHBoxLayout()
        layout.addWidget(self.splitter)
        self.setLayout(layout)

        self.timer = QTimer()
        self.timer.timeout.connect(self.refresh_status)
        self.timer.start(3000)

        # Webcam e STT
        self.cam_view = QLabel()
        self.scene = QGraphicsScene()
        self.stt_live = QTextEdit()
        self.stt_live.setReadOnly(True)

        self.cam_thread = WebcamThread()
        self.cam_thread.frame_ready.connect(self.update_cam)
        self.cam_thread.start()

        self.stt_thread = SpeechThread()
        self.stt_thread.result_ready.connect(self.update_speech)
        self.stt_thread.start()

[TRONCATO]

## dashboard_streamlit.py
import streamlit as st
st.title("Mercurius∞ Dashboard")

## docker-compose.override.yml
# docker-compose.override.yml
version: "3.9"

services:
  mercurius:
    environment:
      - MERCURIUS_READY=true

  healthcheck:
    build: .
    command: ["python", "monitoring/health_check.py"]
    ports:
      - "8081:8080"
    depends_on:
      - mercurius

  metrics:
    build: .
    command: ["python", "monitoring/metrics_exporter.py"]
    ports:
      - "9100:9100"
    depends_on:
